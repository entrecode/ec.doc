{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"entrecode API Documentation","text":"<p>This documentation explains the core principles of entrecode's own systems. </p> <p>The core of it is the Data Manager, an API-based Database for web applications.  It allows easy configuration of API resources and provides many useful features for validation. It's real-time features allow for event based actions upon data changes. Data Manager also supports file management of web assets, especially for (but not limited to) images. Every Data Manager instance also allows easy setup of a user system with elaborated access control.</p> <p>You can access entrecode's systems using the Editor.</p> <p>Programmatic Access is most easily achieved using the JavaScript SDK.</p>"},{"location":"api-basics/","title":"API Basics","text":""},{"location":"api-basics/#api-basics","title":"API Basics","text":"<p>All entrecode APIs are REST APIs, or rather Hypermedia APIs. This means that the term REST is actually understood as intended by Roy T. Fielding \u2013 including the Hypermedia Constraint. See this blog post for a more in-depth description of REST and the difference to a simple HTTP-based API which is often mistakenly called REST API.</p> <p>In short, data is partitioned in resources which manifest in representations. Those are transferred using a standardized format (JSON HAL) with standardized methods (HTTP/1.1, RFC 7230). Application flow between resources is defined by link relations. URLs are subject to change and must not be hard coded. Instead, link relations can be used to explore and use the APIs.</p>"},{"location":"api-basics/#available-apis","title":"Available APIs","text":""},{"location":"api-basics/#account-server-api","title":"Account Server API","text":"<p>The account server handles user accounts, registration, authentication and authorization.</p> <p>The Entry Point is <code>https://accounts.entrecode.de/</code>, root relation: ec:auth</p>"},{"location":"api-basics/#data-manager-api","title":"Data Manager API","text":"<p>A Data Manager is a generated REST API with completely dynamic, configurable resources. A user can, in general, have any number of Data Manager \u201cSpaces\u201d. The exact number may be limited by the customers plan. A single Data Manager Space manages Assets (Files) and Models with Entries (RESTful Resources).</p> <p>The Entry Point is <code>https://datamanager.entrecode.de/</code>, root relation: ec:datamanagers</p>"},{"location":"api-basics/#app-manager-api","title":"App Manager API","text":"<p>The App Manager is a tool for configuring, building and deploying Apps. An App can have multiple platforms to run on.</p> <p>The Entry Point is <code>https://appserver.entrecode.de/</code>, root relation: ec:apps</p>"},{"location":"api-basics/#editor","title":"Editor","text":"<p>The Front-End editor for Account Server, Data Manager and App Manager is live at </p> <p>e.entrecode.de</p>"},{"location":"api-basics/#authentication","title":"Authentication","text":"<p>Most API Calls require Authorization.  The issued Authorization Token (<code>access_token</code>) has to be sent using the following HTTP Header:</p> <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n</code></pre> <p>The token can also be sent via query string property <code>_token</code>.</p> <p>The Access Token has to be acquired using the Accounts API. It is a JWT.</p>"},{"location":"api-basics/#relations","title":"Relations","text":"<p>Link Relation names are those registered with the IANA. Additionally, custom link relations are used which are built in the form <code>https://entrecode.de/doc/rel/&lt;relation&gt;/&lt;optional_subrelation&gt;</code>. Those relations are also links to their own documentation.  For brevity, CURIE Syntax is used which results in relation names of the form <code>ec:&lt;relation&gt;/&lt;optional_subrelation&gt;</code>. </p>"},{"location":"api-basics/#generic-list-resources","title":"Generic list resources","text":"<p>In general (i.e. unless stated otherwise), list resources support pagination, sorting and filtering.</p>"},{"location":"api-basics/#pagination","title":"Pagination:","text":"<p>Link relations <code>prev</code>, <code>next</code> and <code>first</code> SHOULD be used for pagination. Internally, pagination is realized with the query string parameters <code>page</code> and <code>size</code>.  <code>page</code> defaults to <code>1</code> and <code>size</code> defaults to <code>10</code>. To get all items of a list, you may specify <code>size=0</code>. Note that this may take considerable time on large resources, so us this function with care.</p>"},{"location":"api-basics/#sorting","title":"Sorting:","text":"<p>To sort by a different than the default property, the following query string parameter can be used: <code>sort={direction}{property}</code> where <code>direction</code> defaults to <code>+</code> (ascending order) and can be set to <code>-</code> (descending order).</p>"},{"location":"api-basics/#filtering","title":"Filtering:","text":"<p>Exact Match: A query string parameter of the form <code>{property}={value}</code> can be used for an exact-match filter. If used with an ID parameter, only one item will be returned and no list resource.</p> <p>Empty/Null: A query string parameter of the form <code>{property}=</code> (empty value) can be used for an is empty / is null filter, where supported (PublicAPI). Up until Data Manager 0.33.0 dm users could use an empty value for <code>_creator</code> to filter implicitly for resources created by the user \u2013 this was changed in favor of the is empty / is null filter. To filter for resources created by the user, use <code>_creator={userId}</code> or <code>_creator=me</code>. </p> <p>Not: A query string parameter of the form <code>{property}!={value}</code>  can be used for an \"is not exact match\" filter, where supported (PublicAPI) - can also be combined with empty value for \"not empty\" filter.</p> <p>Search: A query string parameter of the form <code>{property}~={value}</code> can be used for searching (non-exact-match filter).</p> <p>Ranges: A query string parameter of the form <code>{property}From={value}</code> and <code>{property}To={value}</code> can be used for specifying ranges. If only one of the two is given, the other is minimum resp. maximum.</p> <p>Multiple-Exact-Match: A parameter with multiple values can be filtered for exact match of all or any of a number of given values. <code>{property}={value1},{value2}</code> matches all resources where one of the two values is matched. <code>{property}={value1}+{value2}</code> matches all resources where both of the two values are matched. Note that properties with this functionality must not have values that contain <code>,</code>, <code>+</code> or <code></code> (Space) characters.</p>"},{"location":"api-basics/#examples","title":"Examples:","text":"<ul> <li><code>resource?page=2</code> items 11 to 20</li> <li><code>resource?page=2&amp;size=50</code>items 51 to 100</li> <li><code>resource?sort=price</code> ordered by price in ascending order (lowest first)</li> <li><code>resource?sort=+price</code> same as above</li> <li><code>resource?sort=-price</code> ordered by price in descending order (highest first)</li> <li><code>resource?id=38fa21</code> item with id 38fa21</li> <li><code>resource?name=Doe</code> all items with the value Doe as name</li> <li><code>resource?name!=Doe</code> all items with a name other than \"Doe\"</li> <li><code>resource?name=</code> all items with no name</li> <li><code>resource?name!=</code> all items with any name (not empty)</li> <li><code>resource?email~=gmail</code> all items that contain gmail in the email property</li> <li><code>resource?priceFrom=100</code> all items with a price &gt;= 100</li> <li><code>resource?priceTo=100</code> all items with a price &lt;=100</li> <li><code>resource?priceFrom=50&amp;priceTo=100</code> all items with a price between 50 and 100</li> <li><code>resource?tag=foo,bar</code> all items with the tag foo or bar</li> <li><code>resource?tag=foo+bar</code> all items with the tags foo and bar</li> </ul> <p>All combinations are possible.</p>"},{"location":"api-basics/#cross-origin-resource-sharing-cors","title":"Cross-Origin Resource Sharing (CORS)","text":"<p>The Same-origin policy usually prevents browsers from accessing remote APIs using XMLHTTPRequests (AJAX). This results in an error message like \u201cNo 'Access-Control-Allow-Origin' header is present on the requested resource.\u201d and fails requests. To make our APIs accessable using Web Clients, we support Cross-Origin Resource Sharing (CORS). And not the crude hack that is JSONP. This means, we generally send the following HTTP Headers:</p> <pre><code>Access-Control-Allow-Methods: GET, PUT, POST, DELETE, OPTIONS\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: Allow\n</code></pre> <p>Additionally, we send <code>Access-Control-Allow-Headers</code> with whatever is requested via <code>Access-Control-Request-Headers</code>.</p> <p>Preflight Requests (HTTP OPTIONS calls) are responded to with an HTTP 200.</p>"},{"location":"errors/","title":"Errors","text":"<p>Error responses across all APIs are always returned with an HTTP status code \u2265 400, i.e. 400, 401, 403, 404, 429, 500. The media type is <code>application/problem+json</code>. Error responses comply to the Problem Details IETF Draft and to HAL.</p> <p>JSON Schema: https://schema.entrecode.de/schema-acc/error</p> <p>The following properties are REQUIRED:</p> <ul> <li><code>status</code> is the HTTP status code of the error and the same status code as the actual HTTP response</li> <li><code>code</code> is a four digit error code as defined below</li> <li><code>title</code> is the generic, short description of the error code</li> <li><code>type</code> is the URL to the description of the error code</li> <li><code>_links</code> is a HAL link object that includes <code>up</code> and <code>describedby</code> link relations; <code>describedby</code> is the same URL as <code>type</code>.</li> </ul> <p>The following properties are OPTIONAL:</p> <ul> <li><code>detail</code> is the name of the object the error occurred on (e.g. the invalid property)</li> <li><code>verbose</code> any additional information about the error</li> <li><code>_embedded</code> is a HAL embed object that MAY include <code>error</code> sub-resources.</li> </ul> <p>Error sub-resources can be used to indicate more errors that occurred or would have occurred, if the enclosing main error would not have occurred. Error sub-resources have a subset of the properties described above: <code>code</code>, <code>title</code>, <code>type</code> and <code>detail</code>.</p>"},{"location":"errors/#example","title":"Example","text":"<pre><code>{\n    \"status\": 400,\n    \"code\": 2202,        \n    \"title\": \"Missing property in query string\",\n    \"type\": \"https://entrecode.de/doc/errors/2202\",\n    \"detail\": \"count\",\n    \"_links\": {\n        \"up\": {\n            \"title\": \"Data Manager Home Page\",\n            \"href\": \"https://datamanager.entrecode.de\" \n        },\n        \"describedby\": {\n            \"title\": \"Error Description\",\n            \"href\": \"https://entrecode.de/doc/errors/2202\"\n        }\n    }\n    \"_embedded\": {\n        \"error\": {\n            \"code\": 2201,\n            \"title\": \"Missing property in JSON Body\",\n            \"type\": \"https://entrecode.de/doc/errors/2201\",\n            \"detail\": \"property\"\n        }\n    }\n}\n</code></pre>"},{"location":"errors/#error-codes","title":"Error Codes","text":"<p>Error codes are 4 digit decimal codes. They consist of two parts. The first number identifies the system the error occurred in, the last three numbers identify the error, they are the actual error codes. Examples:</p> <p>2100: A requested resource in the Datamanager does not exist.</p> <p>2202: A request to a resource in the Datamanager misses a required property in its query string. The detail field of the error response will indicate which property.</p> <p>3000: An internal error occurred in the Appserver, probably a server-side bug.</p>"},{"location":"errors/#first-number-system","title":"First Number: System","text":"Code System 1xxx Account Server 2xxx Data Manager 3xxx App Manager <p>More Codes may be added in the future.</p>"},{"location":"errors/#second-number-error-code","title":"Second Number: Error Code","text":"<p>The actual error code (<code>code</code>) is partitioned in error types (bold in the table below). The <code>detail</code> field includes further information about the subject of the error. The <code>verbose</code> field may be used for further information what is actually wrong with the subject in <code>detail</code>.</p> Code Description Detail Verbose HTTP Status Code 000 Internal Error. No further information disclosured to client. 500 1xx Generic Error 100   Resource not found 404 101   No resource entity matching body property filter found the body property that did not produce a match 404 102   No resource entity matching query string filter found the query string property that did not produce a match 404 110   Method not allowed the request method that is not allowed 405 150   Error in remote API description of the error the Error returned from the remote API 400 2xx Syntax Error 200   Missing body 400 201   Missing property in JSON body the property that is missing 400 202   Missing property in query string the property that is missing 400 203   Missing file in upload 400 204   Missing HAL link or embed in JSON body the relation that is missing 400 211   Invalid format for property in JSON body the property with an invalid format 400 212   Invalid format for property in query string the property with an invalid format 400 213   Invalid file format in upload the recognized mime type that is not allowed 400 214   Invalid linked or embedded HAL resource in JSON body, or link not found the relation that is invalid 400 215   Resource cannot be sorted after given property the property that is not allowed for sorting 400 216   Resource cannot be filtered with given property the property that is not allowed for filtering 400 217   Resource cannot be range-filtered with given property the property that is not comparable 400 251   Password is too short (on registration, only 1251 is defined) 400 252   Unmatched validation error TinyValidator4 Error Code with message 400 253   Invalid asset to merge 400 254   Exceeded maximum levels for nested request. Number of maximum levels 400 255   Could not get nested resources. entryID which produced the error 400 256   Could not create download file. detailed error response 400 3xx Semantics Error 311   Invalid value for property in JSON body the property with an invalid value 400 351   eMail address is unavailable (on registration and email change, only 1351 is defined) 403 352   Cannot delete openID connection (only 1352 is defined) 403 353   Duplicate model/assetgroup in same data manager (only 2352 is defined) 403 354   Cannot delete Model, has entries (only 2354 is defined) 403 355   Cannot delete Model, mandatory model (only 2355 is defined) 403 356   Cannot change Model, has Entries. (only 2356 is defined) More detailed description of error Affected Field 403 357   Model must support default locale (only 2357 is defined) Affected modelID 400 358   Unsupported locale (only 2358 is defined) Affected modelID 400 359   Violates unique constraint (only 2359 is defined) title of violating field 400 360   Cannot delete entry. Referenced as required. (only 2360 is defined) entryID holding the reference 400 361   Cannot change entry. Read Only. (only 2361 is defined) 403 362   Cannot change entry. Reference not allowed due to type validation. (only 2362 is defined) 400 363   Cannot change Model, edit of mandatory/unmutable field. (only 2363 is defined) More detailed description of error Affected field 403 364   Cannot change Model, reserved field title. (only 2364 is defined) Field title 400 365   Cannot change Model, duplicate model title. (only 2365 is defined) Model title 400 366   Duplicate field name in model. Field title 400 367   Field cannot be unique and localizable. Field title 400 368   Field of type boolean must be required. Field title 400 369   Title field not a field in the model. Title field 400 370   Cannot delete Resource. Is used. 403 371   Cannot change entry. Reference not found. (only 2371 is defined) 400 372   Required field must have a default value set. Field title 400 373   Other parallel request already added tag(s) 400 374   Cannot export datamanager. Required field has no default value. model title field title 400 375   A duplicate asset already exists in this AssetGroup. Set <code>ignoreDuplicates</code> flag to ignore. No assets were uploaded. model title field title 400 376   Cannot export datamanager. Required field has no default value. model title field title 400 4xx Rights Management Error 400   Missing Access Token 401 401   Invalid Access Token 401 402   Outdated Access Token 401 403   Invalid Password the email address that attempted the login Timestamp until login is locked for this email address 401 404   Account not found (unknown email address) 404 410   Insufficient rights to access the requested resource The rejected permission 401 411   Insufficient rights to access the requested resource with this method 405 444   Denied because of stupidity 403 451   Too many wrong login attempts (on login, only 1451 is defined) 429 452   User blocked (on login and internal account API, only 1452 is defined) 403 453   Invalid invite (on registration, only 1453 is defined) 403 460   Generic OAuth Error more information 400 461   Facebook OAuth Request failed Facebook Error Code Facebook Error Message 400 462   Facebook API call failed to receive eMail address more verbose Error Message 400 470   \u00a0Target resource does not fulfill permission policy conditions 403 471   Property cannot be written due to permission policy restrictions the property that is not allowed 403 472   Error while processing asset file. The original error message 400 5xx Plan error (not in Accountserver, only 25xx and 35xx are defined) 500   Missing plan for this product the product that is not included in the current plan 403 510   Insufficient plan for this product the product whose limit is exceeded in the current plan 403 511   Insufficient plan for creation the product whose limit is exceeded in the current plan 403 9xx Other"},{"location":"errors/#guidelines-for-definition-of-new-error-codes","title":"Guidelines for definition of new error codes","text":"<ul> <li>a suitable HTTP error code should still be used</li> <li>codes should be added to the defined error types (1xx-5xx)</li> <li>codes are logically sub-partitioned in groups of ten</li> <li>codes above x5x should be used for very (resource- or system-)specific errors</li> </ul>"},{"location":"privacy/","title":"About","text":""},{"location":"privacy/#impressum","title":"Impressum","text":"<pre><code>entrecode GmbH\nEpplestra\u00dfe 60\n70597 Stuttgart\ninfo@entrecode.de\n\nGesch\u00e4ftsf\u00fchrer: Simon Scherzinger\n\nUStID: DE297537979, Amtsgericht Stuttgart HRB 750847\n</code></pre>"},{"location":"privacy/#datenschutz-privacy-policy","title":"Datenschutz / Privacy Policy","text":"<p>Sie finden unsere Datenschutzerkl\u00e4rung hier: https://entrecode.de/datenschutz</p>"},{"location":"account/","title":"The Account Server","text":"<p>The Account Server handles authentication, authorization and account management.</p>"},{"location":"account/#authentication","title":"Authentication","text":"<p>Most API calls require authentication using an access token.</p> <p>Access tokens are only issued to valid accounts on registered clients. </p> <p>To get an access token, a user has four options:</p> <ul> <li>login using a registered email address and password</li> <li>Facebook Login</li> <li>Google OpenID Connect</li> <li>creating a long-lived, fixed API key</li> </ul> <p>In all cases, the user gets redirected back to the client with an access token. Depending on client configuration, the access token is appended to the URL query string or set as cookie. For debugging, you may also configure a client to send the access token back in a JSON body, this will however not really work with the third-party login options due to the redirect-based OAuth flow.</p> <p>The access token is a JSON Web Token [RFC 7519] signed with RS512. The public RSA key can be obtained from the account server using the <code>ec:auth/public-key</code> relation for validation. The decrypted JWT contains the following information:</p> <ul> <li><code>jti</code>: Token identifier (UUID)</li> <li><code>sub</code>: Account ID (UUID)</li> <li><code>email</code>: primary eMail address of the account</li> <li><code>iss</code>: issuer (\"entrecode\")</li> <li><code>iat</code>: timestamp (in seconds) the token was issued</li> <li><code>exp</code>: expiration timestamp of the token (in seconds)</li> </ul> <p>See JWT libraries for JWT decoding and validating.</p> <p>The issued access token has to be sent using the following HTTP Header:</p> <pre><code>Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJlbWFpbCI6InRlc3RAZW50cmVjb2RlLmRlIiwianRpIjoiYjQ0MDE5ODAtODkwOC00OWIyLWE4YjQtYTBjOGI4OWQ2Nzk2IiwiaWF0IjoxNDQwNDk0MTI0LCJleHAiOjE0NDA0OTc3MjQsImlzcyI6ImVudHJlY29kZSIsInN1YiI6IjA3MDBkYWNlLTA1YTgtNDk2Zi05YTFhLTIwYTdmODQ4ODQ5NiJ9.O3HPjePx1uHsA4QyOAer3za0JrxpH_WiKV__9eTTD_2CwlGp2Mjv03wG49mdg_NQUIPFAISqJZMZTiTI0S3hPVYQ1N5_zhqSyWE29OJlCD0yFbcZIEglyydYydBhtj9yPgNhhjCKSSKjrTWqXlBV-KMrVJOqqmjVn55DEdATppqOWWQgI18_FXcL7zXZR5qGuZ8JTUBhCxQ9p1bu7ydRmJQHzxvoqfb_IN6sc6QycsOMs6pSrdatGK0GTFjyjvR1EWBaPgyTQo90Q0o9l7dLTQoueqdkzNH7A0BiRgGiqB775DeEBpGoO5oJYjVQGo7IcdKwIBKNV8WRvgecwT-w3w\n</code></pre> <p>The token can also be sent via query string property <code>_token</code>.</p> <p>To acquire an access token, ec:auth/login for user credentials or ec:auth/facebook or ec:auth/google has to be called. See the Link Relation table of the Entry Point Resource for details.</p>"},{"location":"account/#client-registration","title":"Client registration","text":"<p>Client registration is needed to obtain access tokens. Due to the authentication flow of OAuth, the end user is sent to the OAuth Provider in the browser, and afterwards redirected back to the client application. The access token can only be sent to the client using a valid redirect URL that gets the token appended as query string parameter or cookie.</p> <p>The following information is needed:</p> <ul> <li><code>clientID</code>: Unique string identifier for the client. Has to be appended to requests.</li> <li><code>callbackURL</code>: URL to send the user agent back to after success</li> <li><code>config</code> (JSON):<ul> <li><code>tokenMethod</code>: Specifies how the token is sent back to the client. Values: <code>query</code>, <code>cookie</code> or <code>body</code>. Can also be an array with multiple values. <code>body</code> only works with local Authentication (email/password). Default: <code>query</code></li> <li><code>disableStrategies</code>: Disallow one or more login strategies for this client. Array containing any of <code>facebook</code>, <code>google</code>, <code>password</code>. Default: <code>null</code> (all strategies enabled)</li> </ul> </li> </ul> <p><code>config</code> can contain a parameter <code>\"tokenMethod\": \"cookie\"</code> for the token to be sent as cookie. Default is <code>query</code>, so the token gets sent in the query string as <code>token</code> parameter.</p> <p>Clients are expected to look for the token in that parameter and save it locally. Note that they should be stored into cookies instead of HTML 5 Local Storage due to security issues (XSRF attacks): Where to Store Your JWTs</p>"},{"location":"account/#authorization","title":"Authorization","text":"<p>entrecode uses a permission based authorization and permission system. Basically:</p> <ul> <li>accounts can be in any number of groups</li> <li>accounts as well as groups can have permissions</li> <li>account permissions are the sum of all permissions assigned directly to an account, as well as permissions assigned to any group the account is member of</li> <li>permissions are hierarchically organized in a Shiro-like manner using node shiro trie</li> </ul> <p>The available permissions are listed in the internal entrecode Knowledge Base (Authentication needed).</p>"},{"location":"account/#api-keys","title":"API Keys","text":"<p>API keys are Account Resources without an email address and with no possibility to sign in. Instead, they have one very long-lived access token. They may be used in special cases were a piece of software has to be able to use entrecode APIs just like a user account, without actually involving a user login. To create them, simply POST to <code>ec:auth/create-anonymous</code> (included in the Account List Resource). The result is a JSON containing <code>jwt</code>, an almost indefinitely valid access token (~ 100 Years) as well as the corresponding <code>accountID</code>. After creation, this <code>accountID</code> has absolutely no permissions. You can, however, assign permissions to it or put it in a permission group. The access token is currently only visible after creation and cannot be accessed later, so it should be saved immediately.</p>"},{"location":"account/#account-server-api","title":"Account Server API","text":"<ul> <li>Entry Point: https://accounts.entrecode.de/</li> <li>Richardson Maturity Level: 3 (full Hypermedia), except some Auth-related functionality</li> <li>Media Type: <code>application/hal+json</code> (HAL)</li> <li>Root Resource: <code>ec:auth</code> (Auth Entry Point)</li> <li>Authentication: Bearer Token aquired using the Account Server API</li> </ul>"},{"location":"account/#state-diagram","title":"State Diagram","text":""},{"location":"account/#relations","title":"Relations","text":"<p>Link Relation names are those registered with the IANA. Additionally, custom link relations are used which are built in the form <code>https://doc.entrecode.de/en/latest/App_Manager/#link-relations/&lt;relation&gt;</code>. Those relations are also links to their own documentation (on this page).  For brevity, CURIE Syntax is used which results in relation names of the form <code>ec:&lt;relation&gt;/&lt;optional_subrelation&gt;</code>. </p> <p>Additional to the official link relations defined by IANA the App Manager uses the following:</p> Link Relation Target Resource \u00a0Description <code>ec:auth</code> Auth Entry Point <code>ec:auth/public-key</code> Auth/PublicKey Public RSA key for validation of access token JWTs <code>ec:auth/register</code> Auth/Signup Registration with email/password <code>ec:auth/login</code> Auth/Login Login with email/password <code>ec:auth/logout</code> Auth/Logout Invalidation of an access token <code>ec:auth/password-reset</code> Auth/Password-Reset Changing a registered password <code>ec:auth/change-email</code> Auth/Change-Email Changing the given email address with validation <code>ec:auth/email-available</code> Auth/Email-Available Check if a given email is available for registration <code>ec:auth/facebook</code> Auth/Facebook Login/Register using Facebook <code>ec:auth/google</code> Auth/Google Login/Register using Google <code>ec:accounts</code> Account List Account List <code>ec:account</code> Account Single Account <code>ec:account/tokens</code> Token List Access Tokens of an account <code>ec:account/token</code> Token Single Access Token of an account <code>ec:account/create-anonymous</code> API Token POST to this resource to create a new anonymous account with an access token. (API key) <code>ec:acc/groups</code> Account Group List List of Account groups <code>ec:acc/group</code> Account Group Single Account group <code>ec:invites</code> Invites Resource Invites for Signups"},{"location":"account/#auth-functions-rest","title":"Auth functions &amp; REST","text":"<p>Some functionality of the Auth Server is not completely RESTful:</p> <ul> <li>Login and Signup (either via email/password or a third party provider) will redirect the user agent back after successful authentication, with a JWT in the query string or as cookie header.</li> <li>After registration, an email is sent to the user's email address for validation. After clicking the link, the user gets a HTML page with a success message.</li> <li>Password Reset renders a HTML page that tells the user to check her email account for a password reset email. The email contains a link to change the password, also on a HTML page rendered by the Account Server itself.</li> <li>eMail change also requires validation via eMail. The links in the emails (sent to both the old and the new address) render a HTML page.</li> </ul>"},{"location":"account/resources/account/","title":"Single Account","text":"<p>A single entrecode Account.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-acc/account.</p>"},{"location":"account/resources/account/#properties","title":"Properties","text":"Property Type Format Description Writable accountID String Version 4 UUID (RFC 4122) The unique identifier for an Account No. Gets generated on creation. created String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the creation of the Account No. Gets written on creation. email String valid eMail Address The primary eMail address of the account Yes language String Shortened RFC5646 Syntax (<code>en</code>, <code>de</code>, \u2026) The primary UI language for this account Yes state String <code>active</code>, <code>inactive</code>, <code>blocked</code>, <code>deleted</code> The account state Yes hasPassword Boolean Optional. Indicates if the user has a password set. No hasPendingEmail Boolean Optional. Indicates if the user has a pending email change No openID Array OAuth Accounts of linked OAuth / Open ID Connect accounts. Each Array item is an object including the fields <code>sub</code> (subject), <code>iss</code> (issuer), <code>pending</code> (true/false), <code>email</code> and <code>name</code> (as given from the OAuth issuer) Yes permissions Array[String] Shiro permission string Permissions that are directly assigned to this account (excluding group permissions). Yes groups Array objects containing <code>name</code>, <code>groupID</code> and a <code>permissions</code> array Groups this account is assigned to, including group permissions (permissions inherited by group membership). Groups are not linked to the group resource because other members may not be disclosed. No. Edit the group resource to change memberships. <p>Note to deprecated <code>isPrincess</code> field: This field is not included anymore. Just check for membership in the <code>Princesses</code> group.</p>"},{"location":"account/resources/account/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Account The resource itself GET, PUT collection Account List List of all available Accounts GET ec:account/tokens Token List Collection of access tokens for this account GET"},{"location":"account/resources/account/#list","title":"List","text":"<p>The Account List Resource is a Generic List Resource with embedded Account Resources.</p>"},{"location":"account/resources/account/#possible-actions","title":"Possible Actions","text":""},{"location":"account/resources/account/#read","title":"Read","text":"<p>To read a single Account Resource, clients may perform GET on a <code>ec:account</code> relation.</p> <p>To read the Account List Resource, clients may perform GET on a <code>ec:accounts</code> relation or on the <code>collection</code> relation of a single Account resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"account/resources/account/#example","title":"Example","text":"<pre><code>{\n  \"accountID\": \"00000000-0000-4444-8888-000000000000\",\n  \"created\": \"2014-12-04T17:00:38.208Z\",\n  \"email\": \"test@abc.de\",\n  \"hasPassword\": true,\n  \"language\": \"en\",\n  \"openID\": [ ],\n  \"state\": \"active\",\n  \"permissions\": [\n    \"a:b:c\",\n    \"d:e:f\n  ],\n  \"groups\": [\n    {\n      \"name\": \"datamanager-user\",\n      \"groupID\": \"fc8aff95-fd00-4f98-ac06-61659b48657b\",\n      \"permissions\": [\n        \"dm-create\"\n      ]\n    },\n    {\n      \"name\": \"appserver-user\"\n      \"groupID\": \"a6b78f95-fd00-4f98-ac06-61659b45f3e2\",\n      \"permissions\": [\n        \"app-create\",\n        \"app:platform-create:web\"\n      ]\n    }\n  ]\n  \"_links\": {\n    \"self\": {\n      \"href\": \"https://accounts.entrecode.de/account?accountID=00000000-0000-4444-8888-000000000000\"\n    },\n    \"curies\": {\n      \"href\": \"https://entrecode.de/doc/rel/{rel}\",\n      \"templated\": true\n    },\n    \"ec:account/tokens\": {\n      \"href\": \"https://accounts.entrecode.de/account/tokens?accountID=00000000-0000-4444-8888-000000000000\"\n    },\n    \"collection\": {\n      \"href\": \"https://accounts.entrecode.de/accounts\"\n    }\n  }\n}\n</code></pre>"},{"location":"account/resources/account/#create","title":"Create","text":"<p>To create a new Account Resource, the Signup process has to be executed. See <code>ec:auth/register</code> relation.</p>"},{"location":"account/resources/account/#edit","title":"Edit","text":"<p>To update an existing Account Resource, clients may perform a PUT on <code>ec:account</code> or <code>self</code> at a single Account Resource. The JSON Schema for editing an Account is https://schema.entrecode.de/schema-acc/account-template. </p> <p>All fields are optional and need their own permission. Fields where no permission is available will be ignored.</p> <p>Permissions:</p> <pre><code>acc:edit:&lt;uuid&gt;:language,openid,password\nacc:change-state:&lt;uuid&gt;\nacc:set-permissions:acc:&lt;uuid&gt;\n</code></pre> <p>For setting permissions, additionally the permission <code>acc:permissions:&lt;permission&gt;</code> is needed. The permission <code>acc:set-password:&lt;uuid&gt;</code> enables changing the password without the need for <code>oldPassword</code> to be set.</p> <p>Deleting an OAuth / OpenID Connect connection is only allowed if <code>hasPassword</code> is true or an other connection which is not pending exists. Adding a connection is not possible via PUT, instead a signup has to be done with an authenticated access token.</p> <p>For changing email address or password, the according auth relations have to be used: Change eMail, Password reset. Both require validation over email. </p> <p>Editing the groups array is not possible using the Account Resource. Sending the property with a PUT request has no effect. To add accounts to a group, the group resource has to be edited.</p> <p>Note to deprecated <code>isPrincess</code> field: This field is not included anymore. Just add account to the <code>Princesses</code> group.</p> <p>The success status code is 200 OK and the response body is the updated single Account resource.</p>"},{"location":"account/resources/account/#delete","title":"Delete","text":"<p>Deletion is not possible at the moment. However, the <code>state</code> can be set to <code>deleted</code>.</p>"},{"location":"account/resources/auth/","title":"Auth","text":""},{"location":"account/resources/auth/#the-auth-resource","title":"The Auth \u201cResource\u201d","text":"<p>This resource has many faces, and is more of a accumulation of multiple auth-related resources.</p>"},{"location":"account/resources/auth/#entry-point","title":"Entry Point","text":"<p>When accessing the Entry Point, the following resource is returned containing links to available sub resources.</p>"},{"location":"account/resources/auth/#relations","title":"Relations","text":"Relation Description \u00a0Methods Templated self The Entry Point itself. GET No. curies CURIE links. GET Yes. ec:accounts Collection of accounts. Only included for privileged users. GET No. ec:account The single account of the logged in user. GET No. ec:auth/register\u00a0 Used to register a new account using credentials. POST Yes. Requires <code>clientID</code> and <code>invite</code> (if activated). ec:invites List of available invites GET, POST No. ec:auth/login Used to login using credentials POST Yes. Requires <code>clientID</code>. ec:auth/logout Used to logout a logged in user GET, POST Yes. Optionally, the token can be sent as Query String. ec:auth/password-reset Used to send an email in case a user forgot her credentials GET Yes. Requires <code>eMail</code> and <code>clientID</code> ec:auth/email-available Used to determine if an email address is still available for registration. GET Yes. Requires the eMail address to check. ec:auth/facebook Used to login and/or register using Facebook POST Yes. Requires <code>clientID</code> and <code>invite</code> (if activated and not registered yet). ec:auth/google Used to login and/or register using Google POST Yes. Requires <code>clientID</code> and <code>invite</code> (if activated and not registered yet). ec:auth/public-key Returns the Server public key as pem file for checking signed tokens. GET No."},{"location":"account/resources/auth/#authentication","title":"Authentication","text":"<p>The authentication relations (<code>ec:auth/register</code>, <code>ec:auth/login</code>, <code>ec:auth/facebook</code> and <code>ec:auth/google</code>) work different than the rest of the API. Because of OAuth authentication flow, they don't act RESTfully in the sense that they return a JSON document: instead they redirect the user agent back to the client after successful (or failing)  authentication. For that matter, a valid <code>clientID</code> has to be sent with each request. Only valid (registered) clients can send these requests, because the callback URL the user agent gets redirected back to has to be known on the server. An access token is appended to the callback URL on redirection, or optionally sent as cookie. These requests are not designed to be used via AJAX, but plain browser HTTP (links/forms). If errors occur, a readable error code gets appended to the callback URL.</p>"},{"location":"account/resources/auth/#signup","title":"Signup","text":""},{"location":"account/resources/auth/#input","title":"Input","text":"<p>To complete the registration process, the following has to be sent in a POST Request using <code>application/x-www-form-urlencoded</code> (default HTML form):</p> Input field Description email eMail address this account should be linked to. SHOULD be proven for availability before (using ec:auth/email-available) password desired password for this account. Has to be at least 4 characters long. invite (optional) invite token. Registrations may be declined without an invite token."},{"location":"account/resources/auth/#login","title":"Login","text":""},{"location":"account/resources/auth/#input_1","title":"Input","text":"<p>To log in a user using user credentials, the following has to be sent in a POST Request using <code>application/x-www-form-urlencoded</code> (default HTML form):</p> Input field Description email eMail address of the desired account password password for this account <p>For debugging (e.g. in Postman), this relation can also be sent in a JSON body. The result token is then also sent back directly, without redirects.</p>"},{"location":"account/resources/auth/#googlefacebook-login","title":"Google/Facebook Login","text":""},{"location":"account/resources/auth/#input_2","title":"Input","text":"<p>To login and optionally register using a Google or Facebook account, follow this relation (simple GET). Note that the <code>clientID</code> query string parameter is still needed, as well as an <code>invite</code> (here also sent as query string parameter) if configured. The user will redirected to the auth provider for credentials.</p>"},{"location":"account/resources/auth/#api-token-anonymous-user","title":"API Token (anonymous user)","text":"<p>An API Token (=Anonymous user) can only login once, on registration, and gets a JWT that is valid almost indefinitely long (about 100 Years). To obtain it, simple send an empty POST to the <code>ec:account/create-anonymous</code> resource. The response is the default authentication response, similar to after a regular signup.</p>"},{"location":"account/resources/auth/#logout","title":"Logout","text":"<p>Log out a user. The used access token's <code>validUntil</code> timestamp will be altered to now, which makes it unusable for further actions. This only affects this one access token \u2013 if the account is still logged in at another device, this is unaffected by the logout operation.</p> <p>Variant A: GET </p> <p>A plain GET request, usable for Hyperlinking, with the access token to invalidate attached as query string value for <code>token</code>.</p> <p>Variant B: POST</p> <p>POST request with Bearer authentication. The used token will be invalidated.</p> <p>Both requests also require a valid <code>clientID</code>. The user agent will get redirected back to the registered callback URL.</p>"},{"location":"account/resources/auth/#password-reset","title":"Password Reset","text":"<p>Send the user an email with links to reset the password. GET the <code>ec:auth/password-reset</code> with <code>email</code> and <code>clientID</code> template parameters to trigger the password reset. The user agent will get an HTML rendered message for confirmation.  The account owner will get an email with two links: for aborting and for setting the new password. Both render an HTML site. After successful resetting the password, the user will be taken back to the origin client with an login response (just as if he successfully authenticated in the first place). </p>"},{"location":"account/resources/auth/#change-email-address","title":"Change eMail address","text":"<p>An eMail address change is only possible through validation (i.e. opening a link sent to the address).</p>"},{"location":"account/resources/auth/#input_3","title":"Input","text":"<p>The following has to be sent in a POST Request:</p> Input field Description email new eMail address of the account"},{"location":"account/resources/auth/#output","title":"Output","text":"<ul> <li>200 ok </li> </ul> <p>The response is a HTML page telling the user that an email to the new address has been sent.  The change will only be permanent after the link has been opened. There will also be a link sent to the old email address. By clicking that link, the link for the new address becomes invalid. If the change has already been approved, it will be changed back to the old address.</p>"},{"location":"account/resources/auth/#authentication-response","title":"Authentication Response","text":"<ul> <li>302 Found</li> </ul> <p>The user agent is always redirected back to the client, using the registered <code>callbackURL</code>.  If the user has registered successfully, she is automatically logged in. However, the account state is <code>inactive</code> until the eMail address is validated (only register).</p> <p>The access Token (as signed JSON Web Token) is appended to the callbackURL's query string as <code>token</code> value.</p> <p>Clients may decode them using a JWT library to get the containing information: <code>email</code>, <code>jti</code> (Token ID), <code>iat</code> (Timestamp issued), <code>exp</code> (Timestamp of expiration), <code>iss</code> (<code>entrecode</code>), and <code>sub</code> (Account ID). To get further account information, clients can authenticate with this token at the entry point resource and follow the then contained <code>ec:account</code> relation to their account information.</p> <p>If an Error occured, an error code is appended to the callbackURL's query string as <code>error</code> value.  These errors are no full JSON errors as the rest of the API use, but plain strings:</p>"},{"location":"account/resources/auth/#auth-errors","title":"Auth Errors","text":"Error code Description <code>account_blocked</code> The account is blocked, the user cannot login <code>account_not_found</code> No account found for this email address <code>auth_error</code> Generic auth error (probably server-side) <code>clientID_not_found</code> clientID not found in client registry <code>db_error</code> Generic db error (server-side) <code>email_unavailable</code> An account with this email address already exists <code>invalid_email</code> No valid email address <code>invalid_invite</code> No valid invite code (UUIDv4) <code>missing_clientID</code> clientID is missing <code>missing_credentials</code> email and/or password fields are missing <code>password_too_short</code> The password is too short, must be at least 4 characters long <code>session_not_found</code> Internal error (session could not be re-established after external OAuth process) <code>token_not_found</code> The access token could not be found <code>too_many_login_attempts</code> Too many login attempts, please wait. <code>wrong_password</code> Wrong password entered on login. Additionally, a <code>lockUntil</code> parameter is appended to the callback URL, containing a timestamp until the login is blocked. <p><code>missing_clientID</code> and <code>clientID_not_found</code> are not appended to a registered callback URL but instead the user is redirected back to the HTTP Referer with those codes appended. If no Referer field is set, it triggers HTTP 400 (when <code>missing_clientID</code>) or HTTP 404 (when <code>clientID_not_found</code>).</p>"},{"location":"account/resources/auth/#connecting-accounts-login-methods","title":"Connecting accounts / login methods","text":"<p>To connect an Facebook or Google account to an existing account (no matter how it got created), or to set a password to an existing account, the above relations for registration, google and facebook can be used. If a valid access token is sent (either via HTTP Authorization header as Bearer token, or as query parameter <code>token</code>) with those requests, the server will try to connect the new login method with the existing account.</p>"},{"location":"account/resources/auth/#public-key","title":"Public Key","text":"<p>The <code>ec:public-key</code> relation returns the Public RSA Key of the Server in PEM format for validation of the token signature.</p>"},{"location":"account/resources/auth/#email-available","title":"email-available","text":""},{"location":"account/resources/auth/#input_4","title":"Input","text":"<p>This Resource allows verification if an eMail address is still available for registration. The following has to be sent in a GET (!) Request:</p> Input field Description email eMail address of the account"},{"location":"account/resources/auth/#output_1","title":"Output","text":"<ul> <li>200 ok </li> </ul> Field Description email eMail address that was checked available true or false"},{"location":"account/resources/client/","title":"Client","text":""},{"location":"account/resources/client/#single-client","title":"Single Client","text":"<p>A single entrecode Client.</p> <p>Clients are needed to be registered using this resource.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-acc/client</p>"},{"location":"account/resources/client/#properties","title":"Properties","text":"Property Type Format Description Writable clientID String lowercase characters, numbers and <code>-</code> The unique identifier for a Client Only on creation. callbackURL String URI The client's URI to redirect to after login \u00a0Yes config Object see below Configuration Yes config.tokenMethod\u00a0 String one of <code>query</code>, <code>cookie</code>, <code>body</code> The clients's allowed tokenMethod Yes"},{"location":"account/resources/client/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Client The resource itself GET, PUT collection Client List List of all available Clients GET"},{"location":"account/resources/client/#list","title":"List","text":"<p>The Client List Resource is a Generic List Resource with embedded Client Resources.</p>"},{"location":"account/resources/client/#possible-actions","title":"Possible Actions","text":""},{"location":"account/resources/client/#read","title":"Read","text":"<p>To read a single Client Resource, clients may perform GET on a <code>ec:client</code> relation.</p> <p>To read the Client List Resource, clients may perform GET on a <code>ec:clients</code> relation or on the <code>collection</code> relation of a single Client resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"account/resources/client/#example","title":"Example","text":"<pre><code>{\n  \"clientID\": \"my-app\",\n  \"callbackURL\": \"https://my-app.com/callback\",\n  \"config\": {\n    \"tokenMethod\": \"cookie\"\n  }\n  \"_links\": {\n    \"self\": {\n      \"href\": \"https://accounts.entrecode.de/client?clientID=my-app\"\n    },\n    \"curies\": {\n      \"href\": \"https://entrecode.de/doc/rel/{rel}\",\n      \"templated\": true\n    },\n    \"collection\": {\n      \"href\": \"https://accounts.entrecode.de/clients\"\n    }\n  }\n}\n</code></pre>"},{"location":"account/resources/client/#create","title":"Create","text":"<p>To create a new Client Resource, clients may perform a POST on <code>ec:clients</code> (the list resource). The JSON Schema for creating a new Client is https://schema.entrecode.de/schema-acc/client. </p> <p>Identical to Edit, but <code>clientID</code> is writable and required.</p> <p>The success status code is 201 Created and the response body is the newly created single Client resource.</p>"},{"location":"account/resources/client/#edit","title":"Edit","text":"<p>To update an existing Client Resource, clients may perform a PUT on <code>ec:client</code> or <code>self</code> at a single Client Resource. The JSON Schema for editing a Client is https://schema.entrecode.de/schema-acc/client. </p> <p>Note that the <code>clientID</code> cannot be changed.</p> <p>The success status code is 200 OK and the response body is the updated single Client resource.</p>"},{"location":"account/resources/client/#delete","title":"Delete","text":"<p>To delete an existing Client Resource, clients may perform a DELETE on <code>ec:client</code> or <code>self</code> at a single Client Resource. </p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"account/resources/group/","title":"Group","text":""},{"location":"account/resources/group/#single-group","title":"Single Group","text":"<p>A single entrecode Permission Group.</p> <p>Groups are instances \u2013 just as accounts \u2013 that can have permissions assigned to. Accounts can be added to groups, which grants the group permissions to all those accounts. Membership in a group is always equal for all users (i.e. there is no \"special\" group membership). However, the creator of the group gets the right to edit the group (permissions and members) as personal permission assigned to his account.</p> <p>Starting with Account Server v1.2 it is also possible to add sub-groups to groups, which recursively grants the sub-group's permissions to the group. </p> <p>The JSON Schema is https://schema.entrecode.de/schema-acc/group</p>"},{"location":"account/resources/group/#subgroups-and-permissions","title":"Subgroups and permissions","text":"<p>Group IDs are permissions itself. All permissions of the group and all of its sub- and subsub-groups are listed in the <code>permissions</code> poperty. All group IDs of sub- and subsub-groups are listed in the <code>subgroups</code> property. Permissions directly associated with the group are listed in the groups <code>nativePermissions</code> property.</p> <p>When editing the permissions of the group the property <code>nativePermissions</code> is used. Adding sub-groups is done by adding the group ID of the sub-group to <code>nativePermissions</code>. Adding subsub-groups is done via the sub-group and cannot be done in the group directly.</p> <p>Note that for backward-compatibility editing <code>permissions</code> property can be used as well but is desregarded with v1.2 of Account Server. </p> <p>The group's own groupID permission cannot be removed. Subsub-groups must be edited by editing the Sub-group.</p>"},{"location":"account/resources/group/#properties","title":"Properties","text":"Property Type Format Description Writable groupID String <code>^[a-zA-Z0-9_\\\\-:]+$</code> The unique identifier for a group Yes, optionally - otherwise gets generated on creation. name String Name of the permission group. Has to be unique. \u00a0Yes permissions Array[String] Shiro permission string All Permissions that are assigned to this group, including permissions from sub-groups. Yes, but disregarded with v1.2 subgroups Array[String] Shiro permission string All subgroups of this group. Subset of permissions. Yes, but only direct subgroups can be removed (which are also included in nativePermissions) nativePermissions Array[String] Shiro permission string Permissions and Subgroups that are directly attached to this group. Only permissions in this array are removable Yes customAuthDomain String URL The custom domain from wich users in this group receive their auth mails. Yes customAuthDomainPriority Number 0 - 100 The priority of the custom auth domain. Higher values means higher priority Yes groupSettings.mfaRequired Boolean If <code>true</code>, all users in this group are required to use MFA. Default <code>false</code> Yes groupSettings.authenticatorRequires2FA Boolean If <code>true</code>, second factor is required even when first factor was biometric. Default <code>false</code> Yes groupSettings.legacyLoginDisabled Boolean If <code>true</code>, all users in this group are required to use OIDC for login. Default <code>false</code> Yes"},{"location":"account/resources/group/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Group The resource itself GET, PUT collection Group List List of all available Groups GET ec:account Account Embedded partial Account resources (containing <code>self</code> link, <code>accountID</code> and <code>email</code>) GET"},{"location":"account/resources/group/#list","title":"List","text":"<p>The Group List Resource is a Generic List Resource with embedded Group Resources.</p>"},{"location":"account/resources/group/#possible-actions","title":"Possible Actions","text":""},{"location":"account/resources/group/#read","title":"Read","text":"<p>To read a single Group Resource, clients may perform GET on a <code>ec:group</code> relation.</p> <p>To read the Group List Resource, clients may perform GET on a <code>ec:groups</code> relation or on the <code>collection</code> relation of a single Group resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"account/resources/group/#example","title":"Example","text":"<pre><code>{\n  \"groupID\": \"group:an-example-group\",\n  \"name\": \"an example group\",\n  \"permissions\": [\n    \"a:b:c\",\n    \"a:subgroup-permission\",\n    \"d:e:f,\n    \"group:an-example-group\",\n    \"group:subgroup\",\n    \"group:subsubgroup\"\n  ],\n  \"nativePermissions\": [\n    \"a:b:c\",\n    \"d:e:f,\n    \"group:subgroup\"\n  ],\n  \"subgroups\": [\n    \"group:subgroup\",\n    \"group:subsubgroup\"\n  ],\n  \"customAuthDomain\": \"entrecode.de\n  \"customAuthDomainPriority\": 50,\n  \"_embedded\": {\n    \"ec:account\":\n      [\n        {\n          \"accountID\": \"fc8aff95-fd00-4f98-ac06-61659b48657b\"\n          \"email\": \"test@entrecode.de\"\n          \"_links\": {\n            \"self\": {\n                \"href\": \"https://accounts.entrecode.de/account?accountID=fc8aff95-fd00-4f98-ac06-61659b48657b\"\n            }\n          }\n        },\n        {\n          \"accountID\": \"a6b78f95-fd00-4f98-ac06-61659b45f3e2\"\n          \"email\": \"user@entrecode.de\"\n          \"_links\": {\n            \"self\": {\n                \"href\": \"https://accounts.entrecode.de/account?accountID=a6b78f95-fd00-4f98-ac06-61659b45f3e2\"\n            }\n          }\n        }\n      ]\n  \"_links\": {\n    \"self\": {\n      \"href\": \"https://accounts.entrecode.de/group?groupID=group:an-example-group\"\n    },\n    \"curies\": {\n      \"href\": \"https://entrecode.de/doc/rel/{rel}\",\n      \"templated\": true\n    },\n    \"collection\": {\n      \"href\": \"https://accounts.entrecode.de/groups\"\n    }\n  }\n}\n</code></pre>"},{"location":"account/resources/group/#create","title":"Create","text":"<p>To create a new Group Resource, clients may perform a POST on <code>ec:groups</code> (the list resource). The JSON Schema for creating a new Group is https://schema.entrecode.de/schema-acc/group-template. </p> <p>Identical to Edit, but <code>name</code> and <code>permissions</code> are both required. Accounts can also be linked, however the account creating the group is added automatically.</p> <p>Also, the creator will get the right to edit and delete the group.</p> <p>The success status code is 201 Created and the response body is the newly created single Group resource.</p>"},{"location":"account/resources/group/#edit","title":"Edit","text":"<p>To update an existing Group Resource, clients may perform a PUT on <code>ec:group</code> or <code>self</code> at a single Group Resource. The JSON Schema for editing a Group is https://schema.entrecode.de/schema-acc/group-template. </p> <p>Embedded or linked: partial <code>ec:account</code> resources (with one of <code>accountID</code>, <code>email</code> or <code>_links.self</code> correctly set). Note that if at least one account resource is linked or embedded, the member accounts get rewritten. I.e., missing accounts will be removed. If no accounts are sent, no changes are done. Therefore, you cannot remove all accounts from a group.</p> <p>It is also possible to make partial changes (i.e. only edit <code>name</code>, <code>permissions</code>, <code>customAuthDomain</code>, <code>customAuthDomainPriority</code>, or only edit embedded accounts). In this case, the existing values should just be sent along to prevent errors. If a property is changed, the client needs the corresponding permission \u2013 otherwise the change is being ignored while the rest of the edit is processed.</p> <p>Note that it is possible to remove the client's own account (that gets added to the group on creation automatically). </p> <p>The success status code is 200 OK and the response body is the updated single Group resource.</p>"},{"location":"account/resources/group/#delete","title":"Delete","text":"<p>To delete an existing Group Resource, clients may perform a DELETE on <code>ec:group</code> or <code>self</code> at a single Group Resource.  Also deletes any permissions that were set for this group (account- and group-permissions).</p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"account/resources/invalid-permissions/","title":"Invalid Permissions","text":""},{"location":"account/resources/invalid-permissions/#invalid-permission","title":"Invalid Permission","text":"<p>List of invalid Permissions.</p> <p>Note: This resource requires <code>acc:invalid-permissions:view,delete</code>, <code>dm-stats</code>, and <code>app-stats</code> permission.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-acc/invalidpermissions.</p>"},{"location":"account/resources/invalid-permissions/#properties","title":"Properties","text":"Property Type Format Description Writable invalidAccountPermissions Array Permission Element Array of all invalid account permissions. No. invalidGroupPermissions Array Permission Element Array of all invalid group permissions. No."},{"location":"account/resources/invalid-permissions/#permission-element","title":"Permission Element","text":"Property Type Format Description accountID or groupID\u00a0 \u00a0String Version 4 UUID (RFC 4122)\u00a0 \u00a0The accountID or groupID which holds this invalid permission. permission String Shiro permission string The invalid permission"},{"location":"account/resources/invalid-permissions/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Invalid Permissions The resource itself GET, DELETE ec:auth Auth \u201cResource\u201d The Auth \u201cResource\u201d GET"},{"location":"account/resources/invalid-permissions/#possible-actions","title":"Possible Actions","text":""},{"location":"account/resources/invalid-permissions/#read","title":"Read","text":"<p>To read the Invalid Permissions resource, clients may perform GET on a <code>ec:invalid-permissions</code> relation.</p> <p>The success status code is 200 OK.</p>"},{"location":"account/resources/invalid-permissions/#example","title":"Example","text":""},{"location":"account/resources/invalid-permissions/#delete","title":"Delete","text":"<p>To delete all invalid Permissions, clients may perform DELETE on the resource.</p> <p>The success status code is 204 No Content.</p>"},{"location":"account/resources/invite/","title":"Invites","text":""},{"location":"account/resources/invite/#invite-resource","title":"Invite Resource","text":"<p>The Invite Resource is a resource listing available account registration invites.</p> <p>An invite is basically just a UUID, with optionally assigned permissions and groups.  This invite can be used to register a new user. The invite's permissions and groups will then directly be assigned to the new user.</p> <p>Eligible users can post to the list resource to generate (a number of) new invites. They can get permissions and groups assigned via PUT or directly at creation via POST.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-acc/invite</p> <p>CHANGES with Account Server 0.13:</p> <ul> <li>the List resource is a Generic List Resource now</li> <li>single Invites are their own resource</li> <li>single Invites can be edited with permissions and groups</li> </ul>"},{"location":"account/resources/invite/#properties","title":"Properties","text":"Property Type Format Description Writable invite String Version 4 UUID (RFC 4122) The invite codes No permissions Array[String] Shiro permission string Permissions that are assigned to this invite. Yes groups Array objects containing <code>name</code>, and <code>groupID</code> (not <code>permissions</code>!) Groups this invite is assigned to. Yes email String Email address Email address of the user that was invited. Yes"},{"location":"account/resources/invite/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Invite The resource itself GET, PUT collection Invite List List of all available invites GET, POST ec:auth Entry Point Account Server Entry Point GET"},{"location":"account/resources/invite/#list","title":"List","text":"<p>The Invite List Resource is a Generic List Resource with embedded Invite Resources.</p>"},{"location":"account/resources/invite/#possible-actions","title":"Possible Actions","text":""},{"location":"account/resources/invite/#read","title":"Read","text":"<p>To read a single Invite Resource, clients may perform GET on an <code>ec:invite</code> relation.</p> <p>To read the Invite List Resource, clients may perform GET on a <code>ec:invites</code> relation or on the <code>collection</code> relation of a single Invite resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"account/resources/invite/#create","title":"Create","text":"<p>To create new invite(s), clients may perform a POST on <code>ec:invites</code>. The JSON Schema for creating new Invites is https://schema.entrecode.de/schema-acc/invites-template-post. It may be an empty body, or a JSON containing a <code>count</code> number. An empty body is equivalent to using <code>\"count\": 1</code>. It indicates how much new invites will be generated. It is also possible to set <code>email</code>, <code>permissions</code> and <code>groups</code> to set those for the newly generated invites. Note: When providing <code>email</code> property when creating an invite, the <code>count</code> property is ignored and only one invite is created \u2013 this invite will be sent to the provided email address.</p> <p>The success status code is 201 Created and the response body is the Invites Resource containing the new invite(s).</p>"},{"location":"account/resources/invite/#edit","title":"Edit","text":"<p>To update an existing Invite Resource, clients may perform a PUT on <code>ec:invite</code> or <code>self</code> at a single Invite Resource. The JSON Schema for editing a Invite is https://schema.entrecode.de/schema-acc/invite-template-put. </p> <p>Editable fields are the <code>email</code> field, the <code>permissions</code> array, and the <code>groups</code> array. Note that the elements of the <code>groups</code> array are expected to be objects with a <code>groupID</code> property. The response will also contain the group's <code>name</code> property.</p> <p>The success status code is 200 OK and the response body is the updated single Invite resource.</p>"},{"location":"account/resources/invite/#delete","title":"Delete","text":"<p>Since version 0.20.0 of Account Server it is possible to delete Invite Resources. For this you will need to send a DELETE on <code>ec:invite</code> or <code>self</code> at a single Invite Resource.</p> <p>Additionally, Invites Resources get invalidated on usage and will not be visible through this resource anymore.</p>"},{"location":"account/resources/token/","title":"Token","text":""},{"location":"account/resources/token/#single-token","title":"Single Token","text":"<p>A single access token. Note that the token itself will never be published by the API to prevent misusing them; instead this resource will deliver metadata to enable an overview of issued tokens and the possibility to revoke them.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-acc/account-token.</p>"},{"location":"account/resources/token/#properties","title":"Properties","text":"Property Type Format Description Writable accessTokenID String Version 4 UUID (RFC 4122) The unique identifier for the Token. This is NOT the token itself. It is equivalent to the JWT's <code>jti</code>. No. Gets generated on creation. device JSON Device this access token was issued to. JSON object provided by express-useragent. Notable properties are <code>Platform</code>, <code>OS</code> and <code>Browser</code>. No ipAddress String IP Address (IPv6 or IPv4) IP Address this access token was issued to No ipAddressLocation String Assumed Location of the IP Address this access token was issued to (e.g. city name) No isCurrent Boolean Flag indicating that this access token is the one currently used for this request No issued String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the creation of this access token No validUntil String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the current end of the validity lifetime of this token. No"},{"location":"account/resources/token/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Token The resource itself GET, DELETE collection Token List List of all available Tokens GET ec:account Account The account of this access token. GET, PUT"},{"location":"account/resources/token/#list","title":"List","text":"<p>The Token List Resource is a Generic List Resource with embedded Token Resources.</p> <p>It is a collection of currently valid access tokens for an account.</p>"},{"location":"account/resources/token/#possible-actions","title":"Possible Actions","text":""},{"location":"account/resources/token/#read","title":"Read","text":"<p>To read a single Token Resource, clients may perform GET on a <code>ec:account/token</code> relation.</p> <p>To read the App List Resource, clients may perform GET on a <code>ec:account/tokens</code> relation or on the <code>collection</code> relation of a single Token resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"account/resources/token/#create","title":"Create","text":"<p>A new token gets generated on Login. For API Keys, a long-lived token gets generated on creation.</p> <p>It is possible to add 1 additional token to API Key Accounts (Accounts without password and without email address). POST to <code>ec:account/tokens</code> with account edit permission. An API Key Account can have a maximum of 2 valid tokens at any time. To create more, invalidate an old one first.</p>"},{"location":"account/resources/token/#edit","title":"Edit","text":"<p>Modification of Tokens is not possible.</p>"},{"location":"account/resources/token/#delete","title":"Delete","text":"<p>A token can be revoked by performing a DELETE Request on a single Token resource. The token can then not be used anymore, regardless of its <code>validUntil</code> value.  The current token (<code>isCurrent === true</code>) cannot be deleted. Perform a Logout instead.</p>"},{"location":"appmanager/","title":"The App Manager","text":"<p>The App Manager is a technical tool for configuring, building and deploying Apps. An App can have multiple platforms to run on. </p>"},{"location":"appmanager/#workflow","title":"Workflow","text":"<p>An App is a single, isolated entity. All other resources are dependent on a single App \u2013 they cannot be shared between Apps. </p> <p>An App can have a arbitrary number of Platforms. A Platform is a special configuration for building the App. It consists of exactly one CodeSource, exactly one DataSource and at least one (but possible more) Targets. Dependent on its type, the platform will build a specialized product when a Build is created.</p> <p>Available CodeSource Types, DataSource Types, Target Types and Platform Types can be obtained by getting the Types resource. There may be dependencies: a type may require an explicit platform (e.g. the TargetType 'App Store' could only work with the PlatformType 'iOS').</p> <p>When creating a Build for a Platforms, the App Server will obtain Code from the CodeSource, Data from the DataSource, then build it according to the Platform and save it for later use. A successful Build can then be deployed to one or many selected Targets of all configured Targets of the Platform by creating a Deployment.</p> <p>A Build or a Deployment is either running, failed or successfully finished.</p>"},{"location":"appmanager/#app-manager-api","title":"App Manager API","text":"<ul> <li>Entry Point: https://appserver.entrecode.de/</li> <li>Richardson Maturity Level: 3 (full Hypermedia)</li> <li>Media Type: <code>application/hal+json</code> (HAL)</li> <li>Root Resource: <code>ec:apps</code> (App List)</li> <li>Authentication: Bearer Token aquired using the Account Server API</li> </ul> <p>Make sure to read entrecode API Basics first.</p>"},{"location":"appmanager/#state-diagram","title":"State Diagram","text":""},{"location":"appmanager/#link-relations","title":"Link Relations","text":"<p>Link Relation names are those registered with the IANA. Additionally, custom link relations are used which are built in the form <code>https://doc.entrecode.de/en/latest/App_Manager/#link-relations/&lt;relation&gt;</code>. Those relations are also links to their own documentation (on this page).  For brevity, CURIE Syntax is used which results in relation names of the form <code>ec:&lt;relation&gt;/&lt;optional_subrelation&gt;</code>. </p> <p>Additional to the official link relations defined by IANA the App Manager uses the following:</p> Link Relation Target Resource \u00a0Description <code>ec:app</code> App A single App <code>ec:app-stats</code> App Stats App Statistics <code>ec:app/build</code> Build A single Build <code>ec:app/build/by-id</code> Build Templated Link Relation to a specific Build by <code>buildID</code> <code>ec:app/build/latest</code> Build The last build of a Platform <code>ec:app/builds</code> Build List List of Builds <code>ec:app/builds/options</code> Build List Filter Options of the Build List <code>ec:app/by-id</code> App Templated Link Relation to a specific App by <code>appID</code> <code>ec:app/codesource</code> CodeSource The configured CodeSource of a Platform <code>ec:app/codesource/by-id</code> CodeSource Templated Link Relation to a specific CodeSouce by <code>codeSourceID</code> <code>ec:app/codesources</code> CodeSource List CodeSources configured in an App <code>ec:app/codesources/options</code> CodeSource List \u00a0Filter Options of the CodeSource List <code>ec:app/datasource</code> DataSource The configured DataSource of a Platform <code>ec:app/datasource/by-id</code> DataSource Templated Link Relation to a specific DataSource by <code>dataSourceID</code> <code>ec:app/datasources</code> DataSource List DataSources configured in an App <code>ec:app/datasources/options</code> DataSource List Filter Options of the DataSource List <code>ec:app/deployment</code> Deployment A single Deployment of a Platform <code>ec:app/deployment/by-id</code> Deployment Templated Link Relation to a specific Deployment by <code>deploymentID</code> <code>ec:app/deployment/latest</code> Deployment The latest Deployment of a Platform <code>ec:app/deployments</code> Deployment List All Deployments of a Platform. Also used to create a new Deployment <code>ec:app/deployments/options</code> Deyploment List Filter Options of the Deployment List <code>ec:app/platform</code> Platform A single Platform <code>ec:app/platform/by-id</code> Platform Templated Link Relation to a specific Platform by <code>platformID</code> <code>ec:app/platforms</code> Platform List A list of Platforms of an App <code>ec:app/platforms/options</code> Platform List Filter Options of the Platform List <code>ec:app/target</code> Target A configured Target of a Platform <code>ec:app/target/by-id</code> Target Templated Link Relation to a specific Target by <code>targetID</code> <code>ec:app/targets</code> Target List Targets configured in an App <code>ec:app/targets/options</code> Target List Filter Options of Targets List <code>ec:apps</code> App List List of Apps <code>ec:apps/options</code> App List Filter Options of the App List <code>ec:apps/types</code> App Manager Type Info Information about available CodeSource-, DataSource-, Target- and Platform-Types"},{"location":"appmanager/resources/app-stats/","title":"App Stats","text":""},{"location":"appmanager/resources/app-stats/#app-stat","title":"App Stat","text":"<p>The App Stats Resources represents statistics for all available Apps in App Manager. It shows all App regardless of an available permission for the specific app.</p>"},{"location":"appmanager/resources/app-stats/#properties","title":"Properties","text":"Property Type Format Description Writable appID String Version 4 UUID (RFC 4122) The unique identifier for an App No. title String Friendly name of the App No. monthlyBuilds Object Monthly Object Number of monthly Builds for this App No. monthlyDeployments Object Monthly Object Number of monthly Deployments for this App No. totalBuildSize Integer Size of all created builds in byte. No. totalBuilds Integer Number of all Builds. Failed and succeeded. No. totalDeployments Integer Number of all Deployments. Failed and succeeded No. usedCodeSources Array String List of all used CodeSource Plugins. No. usedDataSources Array String List of all used DataSource Plugins. No. usedPlatforms Array String List of all used Platform Plugins. No. usedTargets Array String List of all used Target Plugins. No."},{"location":"appmanager/resources/app-stats/#monthly-object","title":"Monthly Object","text":"Property Type Format Description Writable key String <code>YYYY-MM</code> The Month in a year eg. <code>2016-05</code>. No. value Integer Number of Builds/Deployments in the specific month. No."},{"location":"appmanager/resources/app-stats/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self App Stats The resource itself GET collection App Stats The resource itself GET ec:app App List The list of all Apps. GET, PUT, POST"},{"location":"appmanager/resources/app-stats/#list","title":"List","text":"<p>The App Stat List Resource is a Generic List Resource with embedded App Stats Resources.</p>"},{"location":"appmanager/resources/app-stats/#possible-actions","title":"Possible Actions","text":"<p>Editing or Deleting the App Stats Resource is not possible. </p>"},{"location":"appmanager/resources/app-stats/#read","title":"Read","text":"<p>To read the App Stats Resource, clients may perform GET on a <code>ec:app-stats</code> relation.</p> <p>The success status code is 200 OK.</p>"},{"location":"appmanager/resources/app/","title":"App","text":""},{"location":"appmanager/resources/app/#single-app","title":"Single App","text":"<p>The single App Resource represents an isolated \u201cspace\u201d. An App can have any number of platforms. </p> <p>The JSON Schema is https://schema.entrecode.de/schema-app/app.</p>"},{"location":"appmanager/resources/app/#properties","title":"Properties","text":"Property Type Format Description Writable appID String Version 4 UUID (RFC 4122) The unique identifier for an App No. Gets generated on creation. shortID String Shortened UUID The unique identifier for an App used when deploying on some targets. No. Gets generated on creation. created String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the creation of the App No. Gets written on creation. title String Friendly name for the App Yes hexColor String 6-digit hex color <code>#rrggbb</code> <code>/^#[A-Fa-f0-9]{6}$/</code> Color identifier for editor. Yes"},{"location":"appmanager/resources/app/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self App The resource itself GET, PUT, DELETE collection App List List of all available Apps GET, POST ec:app/platforms Platform List List of this App\u00b4s platforms GET, POST ec:app/codesources CodeSource List List of CodeSources configured for this App GET, POST ec:app/datasources DataSource List List of DataSources configured for this App GET, POST ec:app/targets Target List List of Targets configured for this App GET, POST"},{"location":"appmanager/resources/app/#list","title":"List","text":"<p>The App List Resource is a Generic List Resource with embedded App Resources.</p> <p>Additionally, it is the entry point for the App Manager API. Because of that, it has an additional <code>msg</code> property with a greeting string (including the API Server version number). </p>"},{"location":"appmanager/resources/app/#possible-actions","title":"Possible Actions","text":""},{"location":"appmanager/resources/app/#read","title":"Read","text":"<p>To read a single App Resource, clients may perform GET on a <code>ec:app</code> relation.</p> <p>To read the App List Resource, clients may perform GET on a <code>ec:apps</code> relation or on the <code>collection</code> relation of a single App resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"appmanager/resources/app/#create","title":"Create","text":"<p>To create a new App Resource, clients may perform a POST on <code>ec:apps</code> (the list resource). The JSON Schema for creating a new App is https://schema.entrecode.de/schema-app/app-template. </p> <p>The success status code is 201 Created and the response body is the newly created single App resource.</p>"},{"location":"appmanager/resources/app/#edit","title":"Edit","text":"<p>To update an existing App Resource, clients may perform a PUT on <code>ec:app</code> or <code>self</code> at a single App Resource. The JSON Schema for editing an App is https://schema.entrecode.de/schema-app/app-template. </p> <p>The success status code is 200 OK and the response body is the updated single App resource.</p>"},{"location":"appmanager/resources/app/#delete","title":"Delete","text":"<p>To delete an existing App Resource, clients may perform a DELETE on <code>ec:app</code> or <code>self</code> at a single App Resource. This marks the App for deletion and makes it (including all related subresources) unavailable over the API. At some later point, it will even be wiped from the App Server.</p> <p>Currently it is not possible to restore a deleted App using the API, so handle this method with care!</p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"appmanager/resources/apptypes/","title":"Types","text":""},{"location":"appmanager/resources/apptypes/#app-types","title":"App Types","text":"<p>The Types Resource indicates which CodeSource-, DataSource-, Target- and Platform-Types are available.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-app/app-plugin-types.</p>"},{"location":"appmanager/resources/apptypes/#properties","title":"Properties","text":"<p>| Property | Type | Format | Description | Writable |7 |----------|------|--------|-------------|----------| |platformTypes | Array | | List of available platformTypes | No. | |codeSourceTypes | Array | | List of available codeSourceTypes | No. | |dataSourceTypes | Array | | List of available dataSourceTypes | No. | |targetTypes | Array | | List of available targetTypes | No. |</p> Type Arrays Item Properties Property Type Format Description Writable type String The Type identifier No. configSchema JSON \u00a0valid JSON Schema Schema of the config property for instances. No. typeConfig JSON arbitrary configuration of the type. No. restrictToPlatformType String a valid platformType require a specific platform type for instances of this type. (Only on codeSourceTypes, dataSourceTypes and targetTypes) No."},{"location":"appmanager/resources/apptypes/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self App Types The resource itself GET, PUT, DELETE ec:apps App List List of all available Apps GET, POST"},{"location":"appmanager/resources/apptypes/#possible-actions","title":"Possible Actions","text":""},{"location":"appmanager/resources/apptypes/#read","title":"Read","text":"<p>This resource can only be read. Just GET the <code>ec:apps/types</code> relation.</p> <p>The success status code is 200 OK.</p>"},{"location":"appmanager/resources/build/","title":"Build","text":""},{"location":"appmanager/resources/build/#single-build","title":"Single Build","text":"<p>The single Build Resource represents Build of an App using a specific Platform configuration. It consists of a status (<code>success</code>, <code>error</code> or <code>running</code>) and events that occurred during build process.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-app/build.</p>"},{"location":"appmanager/resources/build/#properties","title":"Properties","text":"Property Type Format Description Writable buildID Integer 32 Bit signed (max. 2147483647) The unique identifier for a Build No. Gets generated on creation. started String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the beginning of the build. No. Gets written on creation. finished String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the end of the build. No. Gets written on success or error. successful ENUM <code>success</code>, <code>error</code>, <code>running</code> Indicates if the build is still running,finished successfully, or with an error. No. buildLocation JSON Object describing the location where the sucessful build is stored No. events Array List of build Events. No. Events Array Item Properties Property Type Format Description Writable buildEventID Integer \u00a064 Bit signed (max. 9223372036854775807) The unique identifier for a Build Event No. buildEventType String valid deployment event type Specifies the type of the build event. No. timestamp String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the occurrence of the event. No. message String Human-readable description of the Event No. temporary\u00a0 Boolean not null A temporary event marks the start of an action that will be finished with either a success or a failure event. No. info JSON Additional information about the event in any format. No. buildLocation Properties Property Type Format Description Writable type String <code>zipFile</code> The type with which the build was saved. Was saved with a Target. No. config JSON Object containing info needed for retrieval of the saved build. With <code>zipFile</code> it is the <code>url</code> of the file. No. ## Relations Relation Name Target Resource Description Possible Methods self Build The resource itself GET collection Build List List of all available Builds GET, POST ec:app App The app this Deployment is corresponding to. GET, PUT, DELETE ec:app/deployment/latest\u00a0 Deployment The last deployment of this build. GET ec:app/platform Platform The Platform that is deployed GET, DELETE"},{"location":"appmanager/resources/build/#list","title":"List","text":"<p>The Build List Resource is a Generic List Resource with embedded Build Resources.</p>"},{"location":"appmanager/resources/build/#possible-actions","title":"Possible Actions","text":"<p>Editing a Build Resource is not possible. </p>"},{"location":"appmanager/resources/build/#read","title":"Read","text":"<p>To read a single Build Resource, clients may perform GET on a <code>ec:app/build</code> relation.</p> <p>To read the Build List Resource, clients may perform GET on a <code>ec:app/builds</code> relation or on the <code>collection</code> relation of a single Build resource. The query string parameter <code>platformID</code> is mandatory.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"appmanager/resources/build/#delete","title":"Delete","text":"<p>To delete a single Build Resource, clients may perform a DELETE on a <code>ec:app/build</code> relation or the <code>self</code> relation of a single Build Resource.</p> <p>The success status code is 200 OK.</p>"},{"location":"appmanager/resources/build/#create","title":"Create","text":"<p>To create a new Build Resource, clients may perform a POST on <code>ec:app/builds</code> (the list resource) with an empty Body but a query string parameter <code>platformID</code>.</p> <p>This will start a new Build for the referenced platform.</p> <p>The success status code is 201 Created and the response body is the newly created single Build resource. Note that the resource is created and returned instantly, and not after the Build has finished. Clients may follow the <code>self</code> relation of the returned resource to obtain the Build Status at a later time.</p>"},{"location":"appmanager/resources/codesource/","title":"CodeSource","text":""},{"location":"appmanager/resources/codesource/#single-codesource","title":"Single CodeSource","text":"<p>The single CodeSource Resource represents a file source that is needed for Deployments of a Platform.  It has a specific CodeSourceType that defines the behavior when deploying.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-app/codesource.</p>"},{"location":"appmanager/resources/codesource/#properties","title":"Properties","text":"Property Type Format Description Writable codeSourceID String Version 4 UUID (RFC 4122) The unique identifier for a CodeSource No. Gets generated on creation. codeSourceType String valid codeSourceType Specifies the type of the CodeSource. Yes. config JSON Object valid against the JSON Schema of the selected codeSourceType codeSourceType-dependent configuration options. Yes. config._context JSON Object Object with <code>appID</code>, <code>shortAppID</code>, <code>appTitle</code>, <code>buildCount</code>, <code>deploymentCount</code> Context object used in all platform and plugin types. Contains info about the app No."},{"location":"appmanager/resources/codesource/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self CodeSource The resource itself GET, PUT, DELETE collection CodeSource List List of all available CodeSources GET, POST ec:app App The app this codeSource is corresponding to. GET, PUT, DELETE ec:app/platform Platforms Platforms that use this codeSource. (optional) GET, PUT, DELETE <p>Note that a codeSource cannot be deleted if it is used in at least one platform.</p>"},{"location":"appmanager/resources/codesource/#list","title":"List","text":"<p>The CodeSource List Resource is a Generic List Resource with embedded CodeSource Resources.</p>"},{"location":"appmanager/resources/codesource/#possible-actions","title":"Possible Actions","text":""},{"location":"appmanager/resources/codesource/#read","title":"Read","text":"<p>To read a single CodeSource Resource, clients may perform GET on a <code>ec:app/codesource</code> relation.</p> <p>To read the CodeSource List Resource, clients may perform GET on a <code>ec:app/codesources</code> relation or on the <code>collection</code> relation of a single CodeSource resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"appmanager/resources/codesource/#create","title":"Create","text":"<p>To create a new CodeSource Resource, clients may perform a POST on <code>ec:app/codesource</code> (the list resource). The JSON Schema for creating a new CodeSource is https://schema.entrecode.de/schema-app/codesource-template. </p> <p>The success status code is 201 Created and the response body is the newly created single CodeSource resource.</p>"},{"location":"appmanager/resources/codesource/#edit","title":"Edit","text":"<p>To update an existing CodeSource Resource, clients may perform a PUT on <code>ec:app/codesource</code> or <code>self</code> at a single CodeSource Resource. The JSON Schema for editing an CodeSource is https://schema.entrecode.de/schema-app/codesource-template. </p> <p>The success status code is 200 OK and the response body is the updated single CodeSource resource.</p>"},{"location":"appmanager/resources/codesource/#delete","title":"Delete","text":"<p>To delete an existing CodeSource Resource, clients may perform a DELETE on <code>ec:app/codesource</code> or <code>self</code> at a single CodeSource Resource. This is only possible if the codeSource is not used in any platform (would trigger an error 403 with code 3370).</p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"appmanager/resources/codesource/#codesource-types","title":"CodeSource Types","text":"<p>All CodeSource types SHOULD contain a required property <code>hexColor</code> in the config_schema. <code>hexColor</code> SHOULD be the regex format <code>^#[A-Fa-f0-9]{6}$</code> (<code>#d23738</code>).</p>"},{"location":"appmanager/resources/codesource/#remotegit","title":"remoteGit","text":"<p>Pulls a remote Git Repository.</p> <p>Expected configuration: a JSON object with the key <code>giturl</code> that contains a valid Git URL and the key <code>hexColor</code> with the desired color shown in the editor frontend (format: <code>#d23738</code>).</p> <p>For private repositories, SSH can be used. The following public Key has to be allowed access:</p> <pre><code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAEAQC6zr+84QyFf3Rbpv18VQHuwqk5PDMw/Uq1Ek9LooUEErRaecj21SXUaElEai9U+7OfTguIgDGS4YGOV4ya5zKh/Ja7mOhErgLIKGRaA61POGZ4gPnI5IjPak3U4oEW8PLmNPbtBkTMJxmSL7X3LTWm3iSIhUUeZ0tPRhnoBtNpAN58QINt5mhZ/+Hzm62j69ezvToBlIq2uf1AM9rRcN/BY1FE0WAVtiJG2ABRUELc7C2wvw68MWHOUEX1fRpXr82fm9orBtMg2kV7E/Wif6EcoGh+1D18WJa4jnXR+ChYGb2/KketFNoo1lwvpv0AGA3TZKsgntU9V0KU/LzJFbv1jK72IVwSQO6yuextMPIctq1VuGowAmPznap3VMHQ5qyR4fDNbg0kJF6wSGUGXsnc7zBVfS9hl1EdIeQTI/DSYnMJEKwZnfrcrMKZYZ0jc3lVU9yZWFuF6fyYqVmiF8GO0leCT2EBOl6sztNO0etG8EQ0NmtQRr5RndaOtVrcxrkxul8GDRqPtqVn43nkpa4UmqXn259jkr78fkCRAS9UCfPjOAkpeY8GWxZ1K40gFIjYnQ3PRx7DnQyqOkTDWMCzErxtI6qup9TK+0NZfvcEM3+FybG77/3e+j3oN5cKASJdk3ikbRPPbcUY2UQDWaG+XrG8KaAAaHtIjmAkoioCPQkpwPlndzSVioiMUQhMJdpn+Wrz29IAsB6Fm/oQE45+epGyc6GxvnrVojabklLD3yKkI9hD8qkeAddSJeMfOfvcJLtQUOQKUNmuxMjBJdczvpiU6A+QeYVpn+JcAfAneMjjsO3otCVIdFPpOQWy2/JNtb26D97fRaMs9AkpgNPG44wUcZBVA+4+M7U/+E1F9/qDy2wyYB71JDOVTle4+h6j5MbOtueSNLDBSct3PrBCORpTytSBiqpFb6MqdLULoTv4b331w3Obocc25mbDbStvVv3C6E61BxDVehWq+CyuZKaviLBVq7ryIzbAd23ijnEv8at3BpMpdivpxA/nx3nD+Hran6FDvh6cQBQz4mVVaGJ8t8AHxbARsIINbYVkD2vYfguMH8ECWVkv6jXSk1xTganAUSUpb590RHtOt2VwioYuovS/EAWVxvEhpCLT/VO2R5J/tT61Ad4dMaLBBf9jB1CXn71RIisi9/5fZaEG6wFmEy5fD1trlEeoh2869bAWmC7t2cKKYVamJF8wRjjV4aRitOZnFD7V6vOjqJaHkQNNJGwwEWoFix9mg2v3J4oW6z4AnDPZ+EGzwKZJsGsZFjIcOV67A7NRzILotAbxD/bfpf1zfZyXcB5gUkUFb2Ln77uKsalNWqOAoGDf2PSx6uYoXOi0QY64Rpnmigml ec.AppServer\n\n</code></pre>"},{"location":"appmanager/resources/datasource/","title":"DataSource","text":""},{"location":"appmanager/resources/datasource/#single-datasource","title":"Single DataSource","text":"<p>The single DataSource Resource represents a data source that is needed for Deployments of a Platform.  It has a specific DataSourceType that defines the behavior when deploying.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-app/datasource.</p>"},{"location":"appmanager/resources/datasource/#properties","title":"Properties","text":"Property Type Format Description Writable dataSourceID String Version 4 UUID (RFC 4122) The unique identifier for a DataSource No. Gets generated on creation. dataSourceType String valid dataSourceType Specifies the type of the DataSource. Yes. config JSON Object valid against the JSON Schema of the selected dataSourceType dataSourceType-dependent configuration options. Yes. config.context JSON Object Object with <code>appID</code>, <code>shortAppID</code>, <code>appTitle</code>, <code>buildCount</code>, <code>deploymentCount</code> Context object used in all platform and plugin types. Contains info about the app No."},{"location":"appmanager/resources/datasource/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self DataSource The resource itself GET, PUT, DELETE collection DataSource List List of all available DataSources GET, POST ec:app App The app this dataSource is corresponding to. GET, PUT, DELETE ec:app/platform Platforms Platforms that use this dataSource. (optional) GET, PUT, DELETE <p>Note that a dataSource cannot be deleted if it is used in at least one platform.</p>"},{"location":"appmanager/resources/datasource/#list","title":"List","text":"<p>The DataSource List Resource is a Generic List Resource with embedded DataSource Resources.</p>"},{"location":"appmanager/resources/datasource/#possible-actions","title":"Possible Actions","text":""},{"location":"appmanager/resources/datasource/#read","title":"Read","text":"<p>To read a single DataSource Resource, clients may perform GET on a <code>ec:app/datasource</code> relation.</p> <p>To read the DataSource List Resource, clients may perform GET on a <code>ec:app/datasources</code> relation or on the <code>collection</code> relation of a single DataSource resource.</p> <p>In both cases, the success status data is 200 OK.</p>"},{"location":"appmanager/resources/datasource/#create","title":"Create","text":"<p>To create a new DataSource Resource, clients may perform a POST on <code>ec:app/datasource</code> (the list resource). The JSON Schema for creating a new DataSource is https://schema.entrecode.de/schema-app/datasource-template. </p> <p>The success status data is 201 Created and the response body is the newly created single DataSource resource.</p>"},{"location":"appmanager/resources/datasource/#edit","title":"Edit","text":"<p>To update an existing DataSource Resource, clients may perform a PUT on <code>ec:app/datasource</code> or <code>self</code> at a single DataSource Resource. The JSON Schema for editing an DataSource is https://schema.entrecode.de/schema-app/datasource-template. </p> <p>The success status data is 200 OK and the response body is the updated single DataSource resource.</p>"},{"location":"appmanager/resources/datasource/#delete","title":"Delete","text":"<p>To delete an existing DataSource Resource, clients may perform a DELETE on <code>ec:app/datasource</code> or <code>self</code> at a single DataSource Resource. This is only possible if the dataSource is not used in any platform (would trigger an error 403 with code 3370).</p> <p>The success status data is 204 No Content with an empty response body.</p>"},{"location":"appmanager/resources/datasource/#datasource-types","title":"DataSource Types","text":"<p>All DataSource types SHOULD contain a required property <code>hexColor</code> in the config_schema. <code>hexColor</code> SHOULD be the regex format <code>^#[A-Fa-f0-9]{6}$</code> (<code>#d23738</code>).</p>"},{"location":"appmanager/resources/datasource/#owndatamanager","title":"ownDataManager","text":"<p>Pulls data out of a Data Manager.</p> <p>Expected configuration: a JSON object with the key <code>url</code> is needed, linking to the generated API of the Data Manager, and the key <code>hexColor</code>, with the desired color shown in the editor frontend (format: <code>#d23738</code>).</p>"},{"location":"appmanager/resources/deployment/","title":"Deployment","text":""},{"location":"appmanager/resources/deployment/#single-deployment","title":"Single Deployment","text":"<p>The single Deployment Resource represents Deployment of an App using a specific Platform configuration. It consists of a status (successful, failed or still running) and events that occurred during deployment.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-app/deployment.</p>"},{"location":"appmanager/resources/deployment/#properties","title":"Properties","text":"Property Type Format Description Writable deploymentID Integer 32 Bit signed (max. 2147483647) The unique identifier for a Deployment No. Gets generated on creation. started String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the beginning of the deployment. No. Gets written on creation. finished String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the end of the deployment. No. Gets written on success/failure. successful Enum success, error, running Indicates if the deployment is still running or finished successfully or with an error. No. events Array List of deployment Events. No. results Array Array of anything. Contains the results each target plugin reports on a successful deployment. No. Events Array Item Properties Property Type Format Description Writable deploymentEventID Integer \u00a064 Bit signed (max. 9223372036854775807) The unique identifier for a Deployment Event No. deploymentEventType String valid deployment event type Specifies the type of the deployment event. No. timestamp String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the occurrence of the event. No. message String Human-readable description of the Event No. temporary\u00a0 Boolean not null A temporary event marks the start of an action that will be finished with either a success or a failure event. No. info JSON Additional information about the event in any format. No."},{"location":"appmanager/resources/deployment/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Deployment The resource itself GET collection Deployment List List of all available Deployments GET, POST ec:app App The app this Deployment is corresponding to. GET, PUT, DELETE ec:app/build Build The build used in this deployment.\u00a0 GET ec:app/platform Platform The Platform that is deployed GET, DELETE"},{"location":"appmanager/resources/deployment/#list","title":"List","text":"<p>The Deployment List Resource is a Generic List Resource with embedded Deployment Resources.</p>"},{"location":"appmanager/resources/deployment/#possible-actions","title":"Possible Actions","text":"<p>Modifying (editing or deleting) a Deployment Resource is not possible. </p>"},{"location":"appmanager/resources/deployment/#read","title":"Read","text":"<p>To read a single Deployment Resource, clients may perform GET on a <code>ec:app/deployment</code> relation.</p> <p>To read the Deployment List Resource, clients may perform GET on a <code>ec:app/deployments</code> relation or on the <code>collection</code> relation of a single Deployment resource. The query string parameter <code>platformID</code> is mandatory.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"appmanager/resources/deployment/#create","title":"Create","text":"<p>To create a new Deployment Resource, clients may perform a POST on <code>ec:app/deployments</code> (the list resource) with an empty Body but a query string parameter <code>platformID</code>, <code>buildID</code> of the Build Resource to deploy and, one or multiple <code>targetID</code>s where to deploy to.</p> <p>This will start a new Deployment for the referenced Build to all Targets.</p> <p>The success status code is 201 Created and the response body is the newly created single Deployment resource. Note that the resource is created and returned instantly, and not after the Deployment has finished. Clients may follow the <code>self</code> relation of the returned resource to obtain the Deployment Status at a later time.</p>"},{"location":"appmanager/resources/platform/","title":"Platform","text":""},{"location":"appmanager/resources/platform/#single-platform","title":"Single Platform","text":"<p>The single Platform Resource represents a build configuration for a specific App. It has exactly one CodeSource and DataSource, and at least one Target. It may have an arbitrary number of Deployments. It has a specific PlatformType that defines the behavior when deploying.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-app/platform.</p>"},{"location":"appmanager/resources/platform/#properties","title":"Properties","text":"Property Type Format Description Writable platformID String Version 4 UUID (RFC 4122) The unique identifier for a Platform No. Gets generated on creation. platformType String valid platformType Specifies the type of the platform. Yes. title String Friendly name for the Platform Yes config JSON Object valid against the JSON Schema of the selected platformType platformType-dependent configuration options. Yes. _context JSON Object Object with <code>appID</code>, <code>shortAppID</code>, <code>appTitle</code>, <code>buildCount</code>, <code>deploymentCount</code> Context object used in all platform and plugin types. Contains info about the app No."},{"location":"appmanager/resources/platform/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Platform The resource itself GET, DELETE collection Platform List List of all available Platforms GET, POST ec:app App The app this Platform is corresponding to. GET, PUT, DELETE ec:app/codesource CodeSource The Code Source of the Platform GET, PUT ec:app/datasource DataSource The Data Source of the Platform GET, PUT ec:app/target Target A Target of the Platform (may occur several times) GET, PUT ec:app/deployment/latest Deployment The latest deployment of this Platform GET ec:app/deployments Deployment List List of deployments that were executed for this platform. POST to this link relation to create a new deployment for the platform. GET, POST ec:app/deployments/options Deployment List List of deployments with filter options GET ec:app/build/latest Build The latest build of this Platform GET ec:app/builds Build List List of builds that were executed for this platform. POST to this link relation to create a new build for the platform. GET, POST ec:app/builds/options Build List List of builds with filter options. GET"},{"location":"appmanager/resources/platform/#list","title":"List","text":"<p>The Platform List Resource is a Generic List Resource with embedded Platform Resources.</p>"},{"location":"appmanager/resources/platform/#possible-actions","title":"Possible Actions","text":"<p>Editing (PUT) is currently not implemented. </p>"},{"location":"appmanager/resources/platform/#read","title":"Read","text":"<p>To read a single Platform Resource, clients may perform GET on a <code>ec:app/platform</code> relation.</p> <p>To read the Platform List Resource, clients may perform GET on a <code>ec:app/platforms</code> relation or on the <code>collection</code> relation of a single Platform resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"appmanager/resources/platform/#create","title":"Create","text":"<p>To create a new Platform Resource, clients may perform a POST on <code>ec:app/platforms</code> (the list resource). The JSON Schema for creating a new Platform is https://schema.entrecode.de/schema-app/platform-template. </p> <p>The success status code is 201 Created and the response body is the newly created single Platform resource.</p> <p>Note that the used CodeSource, DataSource and Targets have to be created first.</p>"},{"location":"appmanager/resources/platform/#delete","title":"Delete","text":"<p>To delete an existing Platform Resource, clients may perform a DELETE on <code>ec:platform</code> or <code>self</code> at a single Platform Resource.</p> <p>This also deletes the related deployment resources, so handle with care! CodeSources, DataSources and Targets stay.</p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"appmanager/resources/platform/#platform-types","title":"Platform Types","text":"<p>All Platform types SHOULD contain a required property <code>hexColor</code> in the config_schema. <code>hexColor</code> SHOULD be the regex format <code>^#[A-Fa-f0-9]{6}$</code> (<code>#d23738</code>).</p>"},{"location":"appmanager/resources/platform/#staticwebsite","title":"staticWebsite","text":"<p>Generates a static Website.</p> <p>Expected configuration: a JSON object with the key <code>hexColor</code> with the desired color shown in the editor frontend (format: <code>#d23738</code>).</p> <p>Expects valid CodeSource and DataSource.</p>"},{"location":"appmanager/resources/target/","title":"Target","text":""},{"location":"appmanager/resources/target/#single-target","title":"Single Target","text":"<p>The single Target Resource represents a deployment target that is needed for Deployments of a Platform.  It has a specific TargetType that defines the behavior when deploying.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-app/target.</p>"},{"location":"appmanager/resources/target/#properties","title":"Properties","text":"Property Type Format Description Writable targetID String Version 4 UUID (RFC 4122) The unique identifier for a Target No. Gets generated on creation. targetType String valid targetType Specifies the type of the Target. Yes. config JSON Object valid against the JSON Schema of the selected targetType targetType-dependent configuration options. Yes. config._context JSON Object Object with <code>appID</code>, <code>shortAppID</code>, <code>appTitle</code>, <code>buildCount</code>, <code>deploymentCount</code> Context object used in all platform and plugin types. Contains info about the app No."},{"location":"appmanager/resources/target/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Target The resource itself GET, PUT, DELETE collection Target List List of all available Targets GET, POST ec:app App The app this target is corresponding to. GET, PUT, DELETE ec:app/platform Platforms Platforms that use this codeSource. (optional) GET, PUT, DELETE ec:app/deployments Deployments Deyployments that had this Target. GET <p>Note that a target cannot be deleted if it is used in at least one platform.</p>"},{"location":"appmanager/resources/target/#list","title":"List","text":"<p>The Target List Resource is a Generic List Resource with embedded Target Resources.</p>"},{"location":"appmanager/resources/target/#possible-actions","title":"Possible Actions","text":""},{"location":"appmanager/resources/target/#read","title":"Read","text":"<p>To read a single Target Resource, clients may perform GET on a <code>ec:app/target</code> relation.</p> <p>To read the Target List Resource, clients may perform GET on a <code>ec:app/targets</code> relation or on the <code>collection</code> relation of a single Target resource.</p> <p>In both cases, the success status data is 200 OK.</p>"},{"location":"appmanager/resources/target/#create","title":"Create","text":"<p>To create a new Target Resource, clients may perform a POST on <code>ec:app/target</code> (the list resource). The JSON Schema for creating a new Target is https://schema.entrecode.de/schema-app/target-template. </p> <p>The success status data is 201 Created and the response body is the newly created single Target resource.</p>"},{"location":"appmanager/resources/target/#edit","title":"Edit","text":"<p>To update an existing Target Resource, clients may perform a PUT on <code>ec:app/target</code> or <code>self</code> at a single Target Resource. The JSON Schema for editing an Target is https://schema.entrecode.de/schema-app/target-template. </p> <p>The success status data is 200 OK and the response body is the updated single Target resource.</p>"},{"location":"appmanager/resources/target/#delete","title":"Delete","text":"<p>To delete an existing Target Resource, clients may perform a DELETE on <code>ec:app/target</code> or <code>self</code> at a single Target Resource. This is only possible if the target is not used in any platform (would trigger an error 403 with code 3370).</p> <p>The success status data is 204 No Content with an empty response body.</p>"},{"location":"appmanager/resources/target/#target-types","title":"Target Types","text":"<p>All Target types SHOULD contain a required property <code>hexColor</code> in the config_schema. <code>hexColor</code> SHOULD be the regex format <code>^#[A-Fa-f0-9]{6}$</code> (<code>#d23738</code>).</p>"},{"location":"appmanager/resources/target/#localwebserver","title":"localWebServer","text":"<p>Expected configuration: a JSON object with the key <code>hexColor</code> with the desired color shown in the editor frontend (format: <code>#d23738</code>).</p> <p>The build result is served directly by the App Server.</p> <p>This target can only be used with the staticWebsite platform.</p>"},{"location":"appmanager/resources/target/#entrecodes3","title":"entrecodeS3","text":"<p>Expected configuration: a JSON object with the key <code>hexColor</code> with the desired color shown in the editor frontend (format: <code>#d23738</code>).</p> <p>The build result is served from Amazon S3.</p> <p>This target can only be used with the staticWebsite platform.</p>"},{"location":"appmanager/resources/target/#backups3","title":"backupS3","text":"<p>Expected configuration: a JSON object with the key <code>hexColor</code> with the desired color shown in the editor frontend (format: <code>#d23738</code>).</p> <p>The build result is served as zipped Archive from Amazon S3.</p>"},{"location":"datamanager/","title":"The Data Manager","text":"<p>The Data Manager is a technical tool for dynamic generation of Hypermedia REST APIs \u2013 complete with documentation, JSON schemas, and goodies like static file management and external Hooks. </p>"},{"location":"datamanager/#workflow","title":"Workflow","text":"<p>A Data Manager is a single, isolated entity. All other resources are dependent on a single Data Manager \u2013 they cannot be shared between Data Managers. </p> <p>Resource Media Types (\u201cTemplates\u201d) are called Models. They define a structure for resources, consisting of different fields \u2013 similar to Database tables. </p> <p>Assets are wrappers for static files. They can be organized using Tags and can contain multiple variants of a file (e.g. multiple image sizes or different localizations). </p> <p>After defining models for a Data Manager, a Hypermedia REST API is automatically generated and deployed to the cloud \u2013 including user management.</p> <p>External APIs can be connected using Hooks.</p>"},{"location":"datamanager/#data-manager-api","title":"Data Manager API","text":"<ul> <li>Entry Point: https://datamanager.entrecode.de/</li> <li>Richardson Maturity Level: 3 (full Hypermedia)</li> <li>Media Type: <code>application/hal+json</code> (HAL)</li> <li>Root Resource: <code>ec:datamanagers</code> (Data Manager List)</li> <li>Authentication: Bearer Token aquired using the Account Server API</li> </ul> <p>Make sure to read entrecode API Basics first.</p>"},{"location":"datamanager/#state-diagram","title":"State Diagram","text":""},{"location":"datamanager/#link-relations","title":"Link Relations","text":"<p>Link Relation names are those registered with the IANA. Additionally, custom link relations are used which are built in the form <code>https://doc.entrecode.de/en/latest/App_Manager/#link-relations/&lt;relation&gt;</code>. Those relations are also links to their own documentation (on this page).  For brevity, CURIE Syntax is used which results in relation names of the form <code>ec:&lt;relation&gt;/&lt;optional_subrelation&gt;</code>. </p> <p>Additional to the official link relations defined by IANA the Data Manager uses the following:</p> Link Relation Target Resource \u00a0Description <code>ec:api</code> Generated API Links to the generated API. <code>ec:dm-asset</code> Asset A single Asset <code>ec:dm-asset/file</code> File The file of an asset <code>ec:dm-asset/file-variant</code> File A file variant of an asset <code>ec:dm-asset/thumbnail</code> File A thumbnail of an asset <code>ec:dm-asset/duplicates</code> Asset List List of duplicates of the asset <code>ec:dm-asset/by-id</code> Asset A single Asset by <code>assetID</code> <code>ec:dm-assets</code> Asset List List of assets <code>ec:dm-assets/options</code> Asset List List of assets (templated) <code>ec:dm-assetgroup</code> Asset Group A single Asset Group <code>ec:dm-assetgroups</code> Asset Group List of Asset Groups <code>ec:asset</code> Asset (Legacy) A single Asset <code>ec:asset/best-file</code> File Subresource (Legacy) The content-negotiated \u201cbest suited\u201d file <code>ec:asset/by-id</code> Asset (Legacy) A single Asset by <code>assetID</code> <code>ec:asset/deleted</code> Deleted Asset (Legacy) An Asset in the trash <code>ec:asset/deleted/by-id</code> Deleted Asset (Legacy) An Asset in the trash by <code>assetID</code> <code>ec:asset/deleted/best-file</code> File Subresource (Legacy) The content-negotiated \u201cbest suited\u201d file for a deleted asset <code>ec:asset/file</code> File Subresource (Legacy) A file of an Asset <code>ec:assets</code> Asset List (Legacy) List of Assets <code>ec:assets/deleted</code> Deleted Assets List (Legacy) Assets in the trash <code>ec:assets/deleted/options</code> Deleted Assets List (Legacy) Assets in the trash, filtered <code>ec:assets/options</code> Asset List (Legacy) List of Assets, filtered <code>ec:assets/download</code> Asset List (Legacy) Downloads all Assets of the list in a single Zip-File <code>ec:assets/with-tag</code> Asset List (Legacy) List of Assets with a specific <code>tag</code> <code>ec:datamanager</code> Data Manager A single Data Manager <code>ec:datamanager/by-id</code> Data Manager A single Data Manager by <code>dataManagerID</code> <code>ec:datamanager/export</code> Data Manager Postman Collection export of a single Data Manager <code>ec:datamanager/update-from-template</code> Data Manager (only PUT) Try to update Data Manager to template <code>ec:datamanagers</code> Data Managers List of Data Managers <code>ec:datamanagers/options</code> Data Managers List of Data Managers, filtered <code>ec:datamanagers/new-from-template</code> Data Managers (only POST) Create a new Data Manager from Template <code>ec:dm-account</code> Data Manager Account A single Data Manager Account <code>ec:dm-account/by-id</code> Data Manager Account A single Data Manager Account by <code>accountID</code> <code>ec:dm-accounts</code> Data Manager Accounts List of Data Manager Accounts <code>ec:dm-accounts/options</code> Data Manager Accounts List of Data Manager Accounts, filtered <code>ec:dm-client</code> Data Manager Client A single Data Manager Client <code>ec:dm-client/by-id</code> Data Manager Client A single Data Manager Client by <code>clientID</code> <code>ec:dm-clients</code> Data Manager Clients List of Data Manager Clients <code>ec:dm-clients/options</code> Data Manager Clients List of Data Manager Clients, filtered <code>ec:dm-role</code> Data Manager Role A single Data Manager Role <code>ec:dm-role/by-id</code> Data Manager Role A single Data Manager Role by <code>roleID</code> <code>ec:dm-roles</code> Data Manager Roles List of Data Manager Roles <code>ec:dm-roles/options</code> Data Manager Roles List of Data Manager Roles, filtered <code>ec:dm-template</code> Data Manager Template A single Data Manager template <code>ec:dm-template/by-id</code> Data Manager Template A single Data Manager template by <code>templateID</code> <code>ec:dm-templates</code> Data Manager Templates List of Data Manager templates <code>ec:dm-templates/options</code> Data Manager Templates List of Data Manager templates, filtered <code>ec:model</code> Model A single Model <code>ec:model/purge</code> Model Deletes all entries of the Model <code>ec:model/by-id</code> Model A single Model by <code>modelID</code> <code>ec:model/purge/by-id</code> Model Deletes all entries of the single Model by <code>modelID</code> <code>ec:models</code> Model List List of Models <code>ec:models/options</code> Model List List of Models, filtered <code>ec:tag</code> Tag A single Asset Tag\u00a0 <code>ec:tags</code> Tag List List of Asset Tags <code>ec:tags/options</code> Tag List List of Asset Tags, filtered"},{"location":"datamanager/#field-data-types","title":"Field data types","text":"<p>A field definition consists of the following properties:</p> Key Value Examples Allowed change with entries title Identifier of the field <code>description</code>, <code>recipeIngredients</code> This results in the removal of the old field and creates a new field with the given title (Only allowed if required is <code>false</code>). description Additional information about the purpose of this field for documentation. <code>Lists ingredients of the recipe.</code> Every change. type The field type, a value as specified below <code>text</code>, <code>boolean</code>, <code>url</code>, <code>asset</code> only formattedText &lt;&gt; text readOnly Specifies if the field can be written with updates (or only at creation) <code>true</code>, <code>false</code> Every change. required Specifies if the field always needs a value or can also be null <code>true</code>, <code>false</code> Only change to <code>false</code>.\u00a0 unique Specifies if the value needs to be unique <code>true</code>, <code>false</code> Only change to <code>false</code>. localizable Specifies if the field is localizable <code>true</code>, <code>false</code> Every change. Existing entries will have localized/unlocalized values. mutable Specifies if the field is mutable by the Data manager user, or provided by the system.\u00a0 <code>true</code>, <code>false</code> None, since this value is set by the system. validation Validation of field values. Can be a Regular Expression (<code>text</code> type), a JSON Schema (<code>object</code> type), a model or asset type, or an object with optional <code>min</code> and  <code>max</code> values (<code>number</code> and <code>decimal</code> types), depending on <code>type</code> (specified below) <code>^\\d{3}\\w+$</code>, <code>{ \"$ref\": \"#some-schema\" }</code>, <code>{ \"min\": 0, \"max\": 100 }</code> Only removed. default The default value, which is set if the field is required but got no value. <code>null</code>, <code>false</code>, <code>'not set'</code> Every change. <p>If a model has no entries all properties can be changed if the field itself is marked <code>mutable</code>. But only some properties can be changed once a model has entries, as listed in the table above.</p> <p>Note that the Data Manager Field data type is published in the generated API as part of the generated JSON schema: the <code>title</code> property, which has only descriptive semantics, holds the type (useful for generating forms).</p>"},{"location":"datamanager/#change-modelfield-definition","title":"Change model/field definition","text":"<p>If a model has no entries all properties and fields can be changed if the field itself is marked <code>mutable</code>. But only some properties and fields can be changed once a model has entries.</p>"},{"location":"datamanager/#properties","title":"Properties","text":"<p>In the following table is specified if and how a property can be changed once it has entries:</p> property change title no change description always titleField always policies always fields see table below locales always"},{"location":"datamanager/#fields","title":"Fields","text":"<p>In the following table is specified if and how a field can be changed once it has entries:</p> text formattedText decimal number boolean datetime location email url phone json entry entries asset assets account role text x * * * * * * * * * * * * * - - formattedText x * * * * * * * * * * * * * - - decimal x x o * o - - - - - - - - - - - number x x x * x - - - - - - - - - - - boolean x x * * - - - - - - - - - - - - datetime x x o o - - - - - - - - - - - - location x x - - - - - - - x - - - - - - email x x - - - - - - - - - - - - - - url x x - - - - - - - - - - - - - - phone x x - - - - - - - - - - - - - - json x x - - - - * - - - - * - * - - entry x x - - - - - - - - - x - - - - entries x x - - - - - - - - - o - - - - asset x x - - - - - - - - - - - x - - assets x x - - - - - - - - - - - o - - account - - - - - - - - - - - - - - - - role - - - - - - - - - - - - - - - - Icon Description: x = OK, o = with data loss, * = with migration, - = not possible, rows are source fields, columns are target fields"},{"location":"datamanager/#mandatory-fields","title":"Mandatory fields","text":"<p>Those fields are mandatory and included in all models by default. They cannot be deleted or otherwise modified (mutable = <code>false</code>).</p>"},{"location":"datamanager/#id-type-id","title":"id (Type: <code>id</code>)","text":"<p>The <code>id</code> field is a unique identification for an entry and an own, non-reusable type.</p>"},{"location":"datamanager/#created-type-datetime","title":"created (Type: <code>datetime</code>)","text":"<p>The timestamp of the creation of an entry. All date and time values are UTC in RFC3339 format.</p>"},{"location":"datamanager/#modified-type-datetime","title":"modified (Type: <code>datetime</code>)","text":"<p>The timestamp of the last modification of an entry. All date and time values are UTC in RFC3339 format.</p>"},{"location":"datamanager/#creator-type-account","title":"creator (Type: <code>account</code>)","text":"<p>The user account that created this entry. If the entry was created by an ec.user or without authentication, the value is <code>null</code></p>"},{"location":"datamanager/#allowed-field-names","title":"Allowed field names","text":"<p>A field title may consist of up to 256 characters, but is limited to lowercase- and uppercase characters, digits, _ and -. Field titles should only use lowercase characters and be singular (e.g. <code>article</code> instead of <code>articles</code>). The following field names are reserved, since they are used internally by the system.</p> <ul> <li>id</li> <li>created</li> <li>modified</li> <li>creator</li> <li>page</li> <li>size</li> <li>sort</li> <li>private</li> <li>ending with \"from\"</li> <li>ending with \"to\"</li> <li>ending with \"~\"</li> <li>starting with \"_\"</li> </ul>"},{"location":"datamanager/#types","title":"Types","text":""},{"location":"datamanager/#primitive-types","title":"Primitive Types","text":"<p>These types are simple data types.</p> Type Description EntryStructure Validation Sort-able Filterable Example <code>text</code> A simple string value of any length. For common formats, better use Convenience Types. String Regular Expression yes exact, search, multiple <code>\"foo\"</code> <code>formattedText</code> Same as <code>text</code> type, but for formatted text. String Regular Expression yes exact, search, multiple <code>\"foo\"</code> <code>number</code> A signed integer number. Keep integer limits in mind. Number Object with <code>min</code> and/or <code>max</code> values yes exact, range, multiple <code>7</code> <code>decimal</code> A floating point number. Keep precision limits in mind. Number Object with <code>min</code> and/or <code>max</code> values yes exact, range, multiple <code>4.2</code> <code>boolean</code> A simple true/false flag. Boolean \u2014 no exact <code>true</code>"},{"location":"datamanager/#convenience-types","title":"Convenience Types","text":"<p>These types are more complex types with a specific domain that abstract from primitive types.</p> Type Description EntryStructure Validation Sort-able Filterable Example <code>id</code> Unique identification for an entry. This is an own, non-resuable type. String \u2014 no exact, multiple <code>\"j4kd68fz\"</code> <code>datetime</code> A date and/or time data type in RFC3339 format (always including Time Zone). Date \u2014 yes exact, range, multiple <code>\"2015-01-14T13:33:43.168Z\"</code> <code>location</code> A latitude/longitude definition of a location. Uses the JSON schema http://json-schema.org/geo JSON Object with keys <code>latitude</code> and <code>longitude</code> \u2014 no exact, range (with values <code>lat,long</code>) <code>{latitude: 48.774702,</code><code>longitude: 9.1827263}</code> <code>email</code> A valid eMail address. Internally, validator.js is used. String \u2014 yes exact, search, multiple <code>\"info@domain.com\"</code> <code>url</code> A valid URL. Internally, validator.js is used. String \u2014 yes exact, search, multiple <code>\"http://entrecode.de\"</code> <code>phone</code> A valid Phone number according to E.164. Will automatically formatted in international format according to the default locale of the current Data Manager with libphonenumber String \u2014 yes exact, search, multiple <code>\"+49711832468234\"</code> <code>json</code> A generic JSON object. JSON Object or Array A valid JSON Schema no \u2014 <code>{key: \"value\"}</code>"},{"location":"datamanager/#linked-types","title":"Linked Types","text":"Type Description EntryStructure Validation Sort-able Filterable Example <code>entry</code> Link to a single entry that is related to this one. String (<code>entry.id</code>) A model to enforce a specific entry type \u2014 exact, multiple <code>\"49a8f3b4\"</code> <code>entries</code> Link to entries that are related to this one. Array(of <code>entry.id</code> Strings) A model to enforce a specific entry type \u2014 search(single id that is included), multiple <code>[\"8fa398d2\",\"49a8f3b4\"]</code> <code>asset</code> Link to a single asset that is related to this entry. String (<code>asset.assetID</code>) An asset type to enforce a specific type \u2014 exact, multiple <code>\"a8c44bd8-d225-433b-94e4-20fd38ea2d8f\"</code> <code>assets</code> Link to assets that are related to this one. Array(of <code>asset.assetID</code> Strings) An asset type to enforce a specific type \u2014 search(single id that is included), multiple <code>[\"371393a6-ab7f-4591-8d5d-54261a52d28b\",</code><code>\"a8c44bd8-d225-433b-94e4-20fd38ea2d8f\"]</code> <code>account</code> Link to an account. UUID (v4) \u2013 \u2014 exact, multiple <code>\"371393a6-ab7f-4591-8d5d-54261a52d28b\"</code> <code>role</code> Link to a role. UUID (v4) String (role label) \u2014 exact, multiple <code>\"a118f6a0-0d74-463d-b1d7-afcf3eb6da3a\"</code> <p>For every <code>asset</code> and <code>assets</code> type a part of the linked resource is embedded into the entry resource. This will allow users to get file urls for linked assets directly without making an extra request to the api. For example this can be used in list view to show thumbnails of logos directly.</p>"},{"location":"datamanager/#assets-in-the-generated-api-aka-getbestfile","title":"Assets in the Generated API (aka. getBestFile)","text":"<p>Assets have a file-independent URL (consisting of the asset ID). Calling it returns the best fitting file, depending on the requested Locale (Accept-Language header). Image resources also support requesting a specific size: The query string parameter <code>size</code> can be used to specify the size in pixels the largest edge should have at least. Note that if the image is smaller than that, the largest possible image is returned (but possibly smaller than <code>size</code>). To request thumbnail sizes (thumbnails are square-cropped images of size 50, 100, 200, 400px), send the parameter <code>thumb</code> with the request. If you do not want the file directly you cann add <code>/url</code> to the request and you will get a JSON with a field <code>url</code> containing the url of the file you would have received.</p> <p>Examples:</p> <pre><code>https:/datamanager.entrecode.de/files/:assetID/:url?{?size,thumb}\n</code></pre> <p>general description of the best file route.</p> <pre><code>https:/datamanager.entrecode.de/files/853a931b-2091-4f92-acad-cd0c0e6fedbc?size=100&amp;thumb\n</code></pre> <p>will get the thumbnail <code>file</code> for the asset with <code>size</code> 100.</p> <pre><code>https:/datamanager.entrecode.de/files/853a931b-2091-4f92-acad-cd0c0e6fedbc/url?size=100\n</code></pre> <p>will get the <code>url</code> for the asset with <code>size</code> 100.</p> <p>Additionally there is a API for public assets similar to the <code>ec:asset[s]</code>. Please refer to the public documentation found in any data manager in editor.</p>"},{"location":"datamanager/#custom-asset-domain","title":"Custom Asset Domain","text":"<p>It is possible to use a custom asset domain. In order to get this working simply edit the <code>config</code> of a Data Manager to include the property <code>customAssetDomain</code>. Set the value to the custom domain. After configuring the Data Manager you'll need to set up your Domain to proxy the requests to the original url of the file (original links will always work).</p>"},{"location":"datamanager/#example","title":"Example:","text":"<pre><code>Original URL:\nhttps://cdn2.entrecode.de/beefbeef/QwB6QDJ5V9jrLkEd6OdBvXqh.jpg\n\nCustom Domain:\nhttps://www.example.com/static/QwB6QDJ5V9jrLkEd6OdBvXqh.jpg\n</code></pre> <p>Your proxy should redirect all <code>https://www.example.com/beefbeef/(.*)</code> requests to <code>https://cdn2.entrecode.de/beefbeef/$1</code>. We do this by configuring a AWS CloudFront to serve <code>/beefbeef/*</code> requests from the same origin as our <code>cnd2.entrecode.de</code> does.</p>"},{"location":"datamanager/#user-management","title":"User Management","text":"<p>While Data Manager owners (users with an entrecode Account) can generally do anything, the generated APIs have their own User Management. It knows three types of users: Public, which is everybody without any authentication (Web Users). Anonymous which are users that are created by software, but that never actively registered \u2013 useful to have users store their own data in an app without requiring an registration. And finally Registered which are users that have actively signed up, providing an email address and at least one login method.</p> <p>Anonymous users have one access token that is valid indefinitely or until they sign up and become a registered user. Login and Signup can be done using a registered Data Manager Client.</p> <p>To get an anonymous user, POST to the <code>&lt;dataManagerShortID&gt;:_auth/anonymous</code> relation. Optional query parameter can be set to adjust the token validity time. It returns an object containing the long-lived <code>jwt</code>, as well as an <code>accountID</code> and information about the token validity time.</p> <p>Which user levels are available can be configured for a data manager. </p> <p>While Anonymous and Registered users automatically get added to default user roles, one can also create additional roles and assign users to those roles.</p> <p>Roles can be used in Permission Policies.</p>"},{"location":"datamanager/#permission-policies","title":"Permission Policies","text":"<p>There are four possible methods to interact with entries of a model: create (POST), read (GET), update (PUT) and delete (DELETE). By default, none of those methods is permitted (the data manager user can still do everything, however).</p> <p>Interaction can be permitted using Policies that are specified on the model level. Every model can have any number of policies.</p> <p>A Policy consists of the following properties:</p> <ul> <li>Which Method does the policy allow? (one of <code>get</code>, <code>put</code>, <code>post</code>, <code>delete</code>) </li> <li>does it consider the whole entry or is it restricted to some fields? E.g. only allow reading of two specific entry fields.</li> <li>Who is getting the permission? Can be either <code>public</code>, or one or multiple <code>roles</code></li> <li>Additional Conditions the entry has to fulfill</li> </ul> <p>Example:</p> <pre><code>{\n    \"method\": \"get\",\n    \"restrictToFields\": [ \"title\", \"description\"],\n    \"public\": false,\n    \"roles\": [\"registered\"]\n}\n</code></pre> <p>Only registered users can read entries of this model, and only the <code>title</code> and <code>description</code> property.</p> <p>Conditions restrict the policy to a subset of entries that fulfill the conditions. They can be nested and are pretty much logical boolean expressions.</p> <p>A Condition can either be</p> <ul> <li>an Array containing three elements: a condition, <code>and</code> or <code>or</code>, and another condition</li> </ul> <p>or </p> <ul> <li>an Object with the properties <code>field</code>, <code>operator</code> and either <code>constant</code> or <code>variable</code>.</li> </ul> <p>The property <code>field</code> must be the field name of a field of the model. May also be a system-generated field like <code>_creator</code>.</p> <p>The property <code>operator</code> can be <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>in</code>, <code>notIn</code>, <code>contains</code>, <code>containsNot</code>, <code>hasRole</code> and <code>hasNotRole</code>.</p> <p>The property <code>constant</code> can be a JavaScript literal, like a string, a number or <code>null</code>. When used with the <code>in</code> operator, it can also be an Array containing literals.</p> <p>The property <code>variable</code> can either be <code>accountID</code> or <code>roles</code> for fields of type <code>account</code>, or <code>now</code> for fields of type <code>datetime</code>.</p> <p>Some combinations are not valid. E.g. <code>&lt;</code>/<code>&gt;</code> only makes sense on numerical fields. The <code>hasRole</code> operator only works on <code>account</code> type fields and either expects one or more roles as <code>constant</code> or the variable <code>roles</code> (containing all roles the current user has). <code>null notIn [Array]</code> is always false, even if <code>null</code> is in the Array \u2013 only Arrays with actual values are considered. It is not possible to have conditions on policies for the <code>post</code> method, and it is also not possible to have <code>restrictToFields</code> populated on policies for the <code>delete</code> method.</p> <p>Note that when someone has policies for <code>put</code> or <code>post</code>, they probably also should have a <code>get</code> policy. Otherwise created or modified entries will not be returned, instead a HTTP 204 will be returned without a body. And yes, it is possible to model policies that allow editing of a field that cannot be seen.</p> <p>Example 1:</p> <pre><code>{\n    \"method\": \"put\",\n    \"restrictToFields\": [\"editableField\"],\n    \"public\": false,\n    \"roles\": [\"anonymous\"],\n    \"conditions\": [\n        {\n            \"field\": \"_creator\",\n            \"operator\": \"=\",\n            \"variable\": \"accountID\"\n        },\n        \"or\",\n        {\n            \"field\": \"public\",\n            \"operator\": \"=\"\n            \"constant\": true\n        }\n    ]\n}\n</code></pre> <p>Only anonymous users can update the field <code>editableField</code> on entries they created or that have the value <code>true</code> in the field <code>public</code>. Note that the <code>public</code> field has to be created manually, if needed.</p> <p>Example 2:</p> <pre><code>{\n    \"method\": \"post\",\n    \"restrictToFields\": [\"data\"],\n    \"public\": false,\n    \"roles\": [\"freeUsers\"]\n},\n{\n    \"method\": \"post\",\n    \"restrictRuleToFields\": [\"data\", \"hideAds\"],\n    \"public\": false,\n    \"roles\": [\"paidUsers\"]\n}\n</code></pre> <p>Accounts with the role <code>freeUsers</code> can only create entries with the <code>data</code> field, whereas accounts with the role <code>paidUsers</code> can also set <code>hideAds</code>. Unallowed fields get their default value (probably <code>null</code> or <code>false</code>)</p>"},{"location":"datamanager/#customization-of-user-authentication","title":"Customization of User Authentication","text":"<p>By default, \"Auth\" (meaning: Signup, Login, eMail-Change, Password-Reset) is done using ec.passport with dynamically generated, but generic looking templates. This means that the eMails your users receive and the rendered HTML Forms they'll see in the process are labeled with the name of your Data Manager, but have a very generic look. If you're building a Web App, you probably want to style those forms yourself and maybe even want to send mails in a custom format.</p>"},{"location":"datamanager/#custom-emails","title":"Custom eMails","text":"<p>You are required to register a (sub-)domain for sending custom eMails. You can still use the domain in your own eMail provider, but it is needed to be registered with entrecode in a manual process including adding some DNS entries for validation of domain ownership. If you do that, not only will auth-related mails be sent from your-data-manager-name-noreply@your-domain.com, but you will also able to use that domain for Mail Hooks! Domains are not restricted to a single Data Manager.</p> <p>When a domain is registered for your Data Manager, you are eligible to provide mail templates. They are required to support Handlebars.js as template engine and should include certain variables (e.g. for the links the user can click). To make the templates available for your domain, a manual process at entrecode is necessary. Mail templates may also be delivered in multiple languages. We recommend Mailgun Transactional Mail Templates as a starting point for your own mail templates. An alternative with an online WYSIWYG-Designer is Bee.</p> <p>The domain has to be set in your Data Manager configuration as <code>config.customAuthDomain</code>.</p> template name purpose data variables email-verification Sent after signup to verify a user's mail address <code>link</code>, <code>email</code>, <code>title</code> (the Data Manager Title) change-email Sent to a new mail address after a change for verification <code>link</code>, <code>email</code>, <code>title</code> (the Data Manager Title) change-email-abort Sent to the old mail address after a change for resetting it <code>link</code>, <code>email</code>, <code>newMail</code>, <code>title</code> (the Data Manager Title) password-reset Sent to the user if a new password is requested <code>resetLink</code>, <code>abortLink</code>, <code>email</code>, <code>newMail</code>, <code>title</code> (the Data Manager Title) <p>All templates receive the variables <code>to</code>, <code>from</code>, <code>subject</code>, <code>template</code> and <code>language</code>, as well as <code>data</code> which has custom properties listed in the table above.</p>"},{"location":"datamanager/#template-sets","title":"Template Sets","text":"<p>Additonally to domain based custom Auth E-Mails, you can use template sets. A template set is always preferred to a domain, and can even be combined. A template set is expected to have an own template folder in ec.mail like a domain. Additionally, a domain folder can be inside a template set folder.  When using template sets, you can also use <code>config.users.templatevariables</code> for some customization. </p>"},{"location":"datamanager/#custom-auth-html-pages","title":"Custom Auth HTML pages","text":"<p>When clicking on a link in one of the auth mails, or after requesting an email change, by default a HTML page is rendered. You can customize those pages inside your Web App and make the calls to your Data Manager API manually using XHR. For that to work, you have to send your calls to Data Manager with the query string <code>?rest=true</code> appended, which results in JSON responses instead of finished HTML pages. Your also need to configure your own endpoints to use in the links sent in the eMails. Add the following to your Data Manager config as <code>config.customAuthLinks</code>:</p> <pre><code>\"customAuthLinks\": {\n  \"email-verify\": \"https://your-domain/email-verification{?jwt}\",\n  \"password-reset-abort\": \"https://your-domain/password-reset/abort{?jwt}\",\n  \"password-reset\": \"https://your-domain/password-reset{?jwt}\",\n  \"change-email-abort\": \"https://your-domain/change-email/abort{?jwt}\",\n  \"change-email-verify\": \"https://your-domain/change-email{?jwt}\"\n}\n</code></pre>"},{"location":"datamanager/#custom-auth-subjects","title":"Custom Auth subjects","text":"<p>If the default subject for auth emails should be overwritten there is the option to add <code>customAuthSubjects</code> and overwrite the ones you want. The value of the keys could be either a string or a object with keys <code>default</code>, <code>de</code>, <code>en</code>...</p> <p>Add the following to your Data Manager config as <code>config.customAuthSubjects</code>:</p> <pre><code>\"customAuthSubjects\": {\n  \"email-verify\": \"Bitte best\u00e4tigen Sie Ihre eMail-Adresse\",\n  \"password-reset\": \"Passwort\u00e4nderung Ihres ${dataManager.title} Accounts\",\n  \"change-email-abort\": \"E-Mail-Adress\u00e4nderung beauftragt\",\n  \"change-email-verify\": \"E-Mail-Adress\u00e4nderung angefordert, bitte verifizieren\"\n}\n</code></pre>"},{"location":"datamanager/#custom-auth-from","title":"Custom Auth from","text":"<p>If the default from for auth emails should be overwritten there is the option to add <code>customAuthFrom</code> and overwrite the default one which is the name of the datamanager.</p> <p>Add the following to your Data Manager config as <code>config.customAuthFrom</code>:</p> <pre><code>\"customAuthFrom\": \"Sir Send-a-lot\"\n</code></pre> <p>You are free to define those URLs as you like, but they need to be valid Template URIs according to RFC 6570 expecting a variable <code>jwt</code>. This token you'll need to make the actual auth requests to your Data Manager API.</p> <p>They map like this (all relative to your API root):</p> <ul> <li><code>email-verify</code>: <code>/_auth/email-verification/{jwt}?rest=true</code></li> <li><code>password-reset-abort</code>: <code>/_auth/password-reset/abort/{jwt}?rest=true</code></li> <li><code>password-reset</code>: <code>/_auth/password-reset/{jwt}?rest=true</code></li> <li><code>change-email-abort</code>: <code>/_auth/email-verification/abort/{jwt}?rest=true</code></li> <li><code>change-email-verify</code>: <code>/_auth/email-verification/{jwt}?rest=true</code></li> </ul> <p>Note: the <code>password-reset</code> route is only for validating the JWT, that it is still valid to set a new password. If you don't customize it, it will render a form to change the password. It is recommended to use the route after the user opened the link in the password reset mail to check if the request is valid. Then render a form requesting a new password. The new password has then to be sent in a POST request to <code>/_auth/password-reset/callback/{jwt}?rest=true</code> as JSON key <code>password</code>.</p> <p>To request an email change, POST a JSON with key <code>email</code> to <code>/_auth/change-email?rest=true</code> to receive JSON response instead of a rendered HTML.</p> <p>The JSON responses triggered using <code>?rest=true</code> contain an object with all necessary data for rendering an HTML page, or an error. </p>"},{"location":"datamanager/#openid-connect-oidc-third-party-login","title":"OpenID Connect (OIDC) Third-Party login","text":"<p>Third party authentication providers can be used via OIDC (Login with Apple, Google, Microsoft, \u2026).</p>"},{"location":"datamanager/#prerequesites","title":"Prerequesites","text":"<ul> <li>Frontend client with deployment URL (\"UI Client\")</li> <li>For each desired authentication provider (\"Issuer\"): clientID and clientSecret with redirect URI of UI Client</li> <li>configure a DM client for that:</li> </ul> <pre><code>{\n  \"grantTypes\": [\n    \"refresh_token\"\n  ],\n  \"callbackURL\": \"https://this-is-my-cool-app.com/oidc/callback\",\n  \"federatedOIDC\": [\n    {\n      \"uri\": \"https://accounts.google.com/.well-known/openid-configuration\",\n      \"scope\": \"openid email profile\",\n      \"button\": \"Login mit Google\",\n      \"clientID\": \"00000000-mycoolclientidfromgoogle.apps.googleusercontent.com\",\n      \"clientSecret\": \"supersecretsecretformycoolclient\"\n    },\n    {\n      \"uri\": \"https://account.apple.com/.well-known/openid-configuration\",\n      \"button\": \"Login mit Apple\",\n      \"clientID\": \"de.entrecode.cachena.login\",\n      \"clientSecret\": \"supersecretjwtfromapplewhichdoesexpiresorememberchangingitintime\"\n    }\n  ]\n}\n</code></pre> <p>(note the difference between DM-Client and Google-/Apple-Client!)</p>"},{"location":"datamanager/#oidc-third-party-login-flow","title":"OIDC third party login flow","text":"<ol> <li>now you can dynamically check which federated oidc providers are configured, using ec.sdk:</li> </ol> <pre><code>const thirdPartyLogins = await publicAPI.getOIDCConfig('my-dm-client-id');\n</code></pre> <p>This will result in:</p> <pre><code>[\n  {\n    \"issuer\": \"https://accounts.google.com/.well-known/openid-configuration\",\n    \"button\": \"Login mit Google\"\n  }\n]\n</code></pre> <p>Use that to render a \"Login with XYZ\" button.</p> <ol> <li> <p>generate state and nonce secrets. They are needed to make sure, the third party response is actually from your request and not man-in-the-middled. They should be random strings.  It is best practice to use state for, well, state of your app and encode some session information in it. </p> </li> <li> <p>When the user taps the \"Login with XYZ\" button, you should call this function with the \"issuer\" of the button:</p> </li> </ol> <pre><code>const redirectTo = await publicAPI.getURLForThirdPartyOIDC(clientID: string, issuer: string, state: string, nonce: string);\n</code></pre> <p>Redirect the user to the URI coming back. This will bring them to the third party login page, and afterwards back to your DM client's configured callbackURL.</p> <ol> <li>When your callbackURL is called, look at the query parameters.  It contains either an error, or <code>code</code>. Send that <code>code</code> using ec.sdk:</li> </ol> <pre><code>const tokenResponse = await publicAPI.tokenExchangeForThirdPartyOIDC(clientID: string, issuer: string, code: string, nonce: string)\n</code></pre> <p>(<code>nonce</code> should be the same as in <code>getURLForThirdPartyOIDC</code> and unique for each call). This SDK instance is then logged in, so it should be a user-SDK.</p> <p>If you get back a tokenResponse, the third party id token is linked to an DM account.  You get back:</p> <pre><code>{ \n  access_token,\n  token_type,\n  expires_in,\n  refresh_token,\n  account: {\n    accountID,\n    email,\n    isNewAccount,\n  },\n  profile: {\n    email,\n    name,\n    picture,\n    familyName,\n    givenName,\n  }\n}\n</code></pre> <p>Note that you may not get all profile properties, depending on the issuer.  Also, they are not stored to the account in any way (DM Accounts have no metadata other than email). So store them in an entry linked to the account or something.</p>"},{"location":"datamanager/#helper-functions","title":"helper functions","text":"<pre><code>await publicAPI.addOIDCIdenitityToAccount(\n    accountID: string,\n    idToken: {\n      iss: string;\n      sub: string;\n      exp: number;\n      iat: number;\n    },\n);\n</code></pre> <p>If you have an id token from a third party from some other flow, you can assign it to an existing DM account with this.</p>"},{"location":"datamanager/#hooks","title":"Hooks","text":"<p>Hooks can be used to add additional functionality to models. E.g. they enable you to alter values before saving or to pass data on to another server.</p> <p>A hook is always enabled on a per-model basis and can be triggered either before or after processing the request. A before-hook is able to transform the request (and e.g. alter values before saving them). An after-hook can be used to for example communicate the creation of an entry to another server. Hooks can be set up for all four standard HTTP methods (GET, PUT, POST, DELETE).</p> <p>Hooks are defined in the <code>hooks</code> property of a model. It is always a JSON Array. There can be an arbitrary number of hooks for a model. If two hooks are configured for the same trigger point (e.g. 'before put'), they are triggered in the order they are listed in the <code>hooks</code> array.</p> <p>There are different types of hooks that each have their own necessary configuration. Hooks are normally asynchronous. This means, the normal Data Manager execution is not influenced by the hook and not delayed. If a hook throws an error (e.g. a remote web server could not be reached), this does not influence the data manager request. However, \u201cbefore\u201d hooks can optionally be synchronous. This enables transformation of requests.</p> <p>Example JSON:</p> <pre><code>[\n    {\n        \"hook\": \"after\", // 'before' or 'after'\n        \"type\": \"web\", // a valid type\n        \"methods\": [\"post\"], // 'get', 'put', 'post' or 'delete'\n        \"description\": \"my test hook\" // optional. Makes the hook identifiable in logs etc.\n        \"config\": {\n            // type specific\n        },\n        \"hookID\": \"a0603b90-ee1e-49ce-8201-aa6e06124e2f\" // identifier for simpler sorting of multiple hooks. May change.\n    },\n    {\n    // another hook. If it has the same signature ('after' 'post'), it will be executed after the first one.\n    }\n]\n</code></pre>"},{"location":"datamanager/#web-hook","title":"Web Hook","text":"<p>The web hook sends data to another server via HTTP/HTTPS.</p> <p>Multiple targets can be set, so it is possible to notify multiple servers. Each target can be configured with an URI, the HTTP method to use and optional custom header fields.</p>"},{"location":"datamanager/#web-hook-configuration","title":"Web hook configuration","text":"<p>The available data to use in Web hooks is the following JSON object containing all available information about the request:</p> <pre><code>{\n    \"request\": {\n        \"method\": \"put\",\n        \"uri\": \"https://datamanager.entrecode.de/beef1337/mymodel?myfield=filtered\",\n        \"body\": {\n            \"myfield\": \"newValue\"\n        },\n        \"headers\": {\n            \"my-custom-header\": \"my custom header value\"\n        }\n    },\n    \"response\": { // the response property is only available if it is an 'after' hook.\n        \"status\": 200,\n        \"body\": {\n            \"count\": 1,\n            \"total\": 1,\n            \"_links\": {\n                // ... HAL links\n            },\n            \"_embedded\": {\n                \"beef1337:mymodel\": {\n                    \"id\": \"l231ij4\",\n                    \"myfield\":\"newValue\"\n                    // ... full response\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>The <code>response</code> property is currently not available in hooks!</p> <p>This object can be transformed to only send the required information. See Transformations below for details.</p> <p>The following example is a complete web hook configuration:</p> <pre><code>[\n  {\n    \"hook\": \"after\", // 'before' or 'after' \u2013 when should the hook be fired?\n    \"type\": \"web\", // indicates that this is a web hook\n    \"methods\": [\"put\"], // which methods should this hook watch\n    \"description\": \"send updated entry\", // describe what the hook does\n    \"config\": { // this config object is web-hook-specific\n      \"createJWT\": { // optional. Will create a JWT before syncing\n        \"variableToSet\": \"jwt\", // required. The context variable that will hold the generated JWT\n        \"algorithm\": \"HS256\", // required. The algorithm to use: HS256, HS384, HS512 (HMAC) or RS256, RS384, RS512 (RSA)\n        \"issuer\": \"entrecode\", // optional, can be any string and can use context variables\n        \"secret\": \"GQDstcKsx0NHjPOuXOYg5MbeJ1XT0uFiwDVvVBrk\", // only needed if the algorithm is HMAC (HS***)\n        \"subject\": \"{{username}}\", // optional. Can use context variables\n        \"expiresIn\": \"5min\" // optional. Expiration time in seconds or a timespan according to https://github.com/rauchg/ms.js\n      },\n      \"requests\": [ // you can list any number of requests here, they get executed sequentially.\n        {\n          \"uri\": \"https://my-other-server/endpoint?remoteID={{response.body._embedded['beef1337:mymodel'].id}}\", // you may access variables from the context here\n          \"headers\": {\n            \"Authorization\": \"Bearer 1o32iru1oi3rj\",\n          },\n          \"method\": \"post\"\n          \"body\": {\n            \"__jsonmask\": \"response/body/_embedded/*(id,property1,property2)\", \n            \"__jsonpath\": \"$.response.body._embedded['beef1337:mymodel']\",\n            \"__array\": false\n          },\n          \"responseMapping\": { // maps the response to new context variables (optional)\n            \"accessToken\": { // the value of $.body.accesstoken will be available in the next request as {{accessToken}}\n              \"__array\": false,\n              \"__jsonpath\": \"$.body.accesstoken\" // $ is the full response object, so you may also access headers\n            }\n          }\n        },\n        {\n          uri\": \"https://my-other-server/endpoint?remoteID={{response.body._embedded['beef1337:mymodel'].id}}\",\n          \"headers\": {\n            \"Authorization\": \"Bearer {{accessToken}}\", // the variable set in the previous request\n          },\n        }\n      ]\n    }\n  }\n]\n</code></pre> <p>It sends the <code>id</code>, <code>property1</code> and <code>property2</code> values of the edited entry to <code>https://my-other-server/endpoint?remoteID=l231ij4</code>. A \u201cbefore\u201d web hook can also be synchronous:</p> <pre><code>{\n    \"hook\": \"before\",\n    \"type\": \"web\",\n    \"methods\": [\"put\"],\n    \"description\": \"external validation\",\n    \"config\": {\n        \"requests\": [\n            {\n                \"uri\": \"https://my-other-server/endpoint\",\n                \"headers\": {\n                    \"Authorization\": \"Bearer 1o32iru1oi3rj\",\n                },\n                \"method\": \"get\"\n                \"validate\": {\n                  \"status\": 200 // you may enforce a specific http status code from the remote (only in before hooks)\n                }\n            }\n        ],\n        \"responseMapping\": { // the original request body will get those properties assigned additionally\n            \"property1\": {\n                \"__jsonpath\": \"$.body.property1\" // this is a property of the last request's response body\n                \"__array\": false\n            },\n            \"property2\": \"hard coded\" \n        }\n    }\n}\n</code></pre> <p>The <code>validate</code> property (which is only effective in \u201cbefore\u201d hooks) can be configured to expect a certain HTTP status of the remote server, in this case the request is only executed if the remote server answers with HTTP status 200. If the target server(s) respond with another status code, the data manager request is rejected with an error. An optional error response of the validating server is sent back to the data manager client. </p> <p>The <code>responseMapping</code> property in the root level (not the individual requests) can be used to amend the request body with data from a foreign server. Properties can also get hardcoded values. Properties not written remain at the value provided by the original request.</p>"},{"location":"datamanager/#mail-hook","title":"Mail Hook","text":"<p>Note: there are currently two implementations available. The deprecated one sends mails directly. The favored one is event-based and supports custom Domains. The deprecated mail hook is hook type <code>mailgun</code> and should not be used anymore.</p> <p>The <code>mail</code> hook is neither a <code>before</code> nor an <code>after</code> hook, but an <code>event</code> hook instead. This means that the main data manager process does not execute this hook, but ec.event-hook service does after the desired action produced an event (same behaviour as an <code>after</code> hook). It is not possible to have a mail hook on the <code>get</code> method, because reads do not trigger an event.</p> <pre><code>{\n    \"hook\": \"event\",\n    \"type\": \"mail\",\n    \"config\": {\n        \"to\": \"{{data.recipient}}\", // if omitted, \"to\" is set to \"undisclosed-recipients:; &lt;no-reply@&lt;domain&gt;&gt;\n    \"bccToGroup\": \"77566e8f-399b-4fcf-a968-7d4f148978ac\" // send as bcc to all members of ec.account server group with this id\n        \"from\": \"{{data.sender}}\",\n        \"text\": {\n            \"__jsonpath\": \"$.data.content\"\n        },\n        \"data\": {\n            \"__jsonpath\": \"$.data\" // to make all loaded data available in ec.mail template\n        },\n        \"subject\": \"{{data.subject}} \",\n        \"domain\": \"entrecode.de\",\n    \"language\": \"de\", // ec.mail supports different language templates\n    \"template\": \"order-paid\", // ec.mail template name\n    \"templateSet\": \"shp\", // ec.mail template folder (when missing, it just uses the domain as folder name)\n    \"__resolve\": [ // resolve entry fields so the values are available in data\n      \"account\",\n      \"shop\"\n    ],\n    \"mailgunTemplate\": \"held-open-merchant\", // use a native mailgun template instead of ec.mail - use either this or 'template'\n    \"h:X-Mailgun-Variables\": { // variables for mailgun template\n      \"__jsonpath\": \"$.data\",\n      \"__modifier\": \"stringify\"\n    }\n        // ... more properties, see https://documentation.mailgun.com/api-sending.html#sending\n    },\n    \"methods\": [\n        \"post\"\n    ],\n  \"conditions\": { // conditions can be used to trigger on certain state changes\n    \"and\": [\n      {\n        \"===\": [\n          {\n            \"var\": \"data.status\"\n          },\n          \"paid\"\n        ]\n      },\n      {\n        \"===\": [\n          {\n            \"var\": \"oldEntryData.status\"\n          },\n          \"unpaid\"\n        ]\n      }\n    ]\n  },\n    \"description\": \"Simple Mail Hook\",\n    \"hookID\": \"dd53b7c2-a494-44e6-883a-4269a89022c2\"\n}\n</code></pre> <p>This example builds a simple mail from an entry. Note the use of transjson functionality to build the mail dynamically. The available properties inside <code>config</code> map 1:1 to the properties described in the Mailgun API Documentation. Multiple recipients / multiple values for the same properties can be set as array. The <code>domain</code> property can be used to send via a specific domain; if it is omitted, the default will be taken. Note that the domain has to be registered with mailgun, which is a manual process for now. The property <code>template</code> will make ec.mail use a local template file. If you want to use Mailgun\u00b4s templates, use the property <code>mailgunTemplate</code> instead (translates to mailgun <code>template</code> property).</p> <p>The property <code>__resolve</code> can be used to supply a list of field names which should be loaded. This way, data not included in the event of an updated entry can be used (like linked entries). The 'dm-event-hook-service Mail'-Account needs reading permissions on the data manager for this (hook model and entry target model).</p> <p>It is recommended to always include a <code>text</code> property, even when a <code>html</code> property is present.</p> <p>This is an event hook. If the hooks seems not to trigger, the issue is usually fixed by saving the model once again. (Event Hook configuration is stored in etcd, not in PostgreSQL).</p>"},{"location":"datamanager/#cloudfront-invalidation-hook","title":"CloudFront Invalidation Hook","text":"<p>The <code>cloudfront</code> hook is an <code>event</code> hook that can be used to invalidate an AWS CloudFront distribution after updating an entry (e.g. a CMS page). </p> <p>Invalidations are not for free!  They currently cost $ 0.005 for each path, so they should be used only when necessary. CloudFront Hooks should always be conditional and it is better to disable them when updating a large set of entries.</p> <p>The AWS IAM user \"event-hook-service\" should have invalidation rights on the desired CloudFront distribution (all entrecode CloudFronts by default). You then only need the distribution ID for the hook.</p> <pre><code>{\n  \"hook\": \"event\",\n  \"type\": \"cloudfront\",\n  \"description\": \"Invalidate page if content or title has changed\",\n  \"config\": {\n    \"paths\": [\n      \"/{{data.seoTitle}}*\" // one or more paths to invalidate. Note that the wildcard * can only stand at the end!\n    ],\n    \"distribution\": \"EWXXXXXXXP93D\" // insert your distribution ID here\n  },\n  \"methods\": [\n    \"put\" // the hook is only really reasonable for PUT hooks\n  ],\n  \"conditions\": { // always recommended\n    \"!\": {\n      \"missingSome\": [\n        1, // only triggers, when at least one of the following properties exists\n        [\n          \"oldEntryData.title\",\n          \"oldEntryData.content\"\n        ]\n      ]\n    }\n  }\n}\n</code></pre> <p>This is an event hook. If the hooks seems not to trigger, the issue is usually fixed by saving the model once again. (Event Hook configuration is stored in etcd, not in PostgreSQL).</p>"},{"location":"datamanager/#conditional-event-hooks","title":"Conditional Event Hooks","text":"<p>Event Hooks like the Mail Hook or CloudFront Hook support conditions. This way, you can make the hook trigger only on events that fulfill a condition (e.g. a value change on a PUT event).</p> <p>Example:</p> <pre><code>[\n  {\n    \"hook\": \"event\",\n    \"type\": \"mail\",\n    \"config\": {\n      ... // mail-specific config\n    },\n    \"hookID\": \"7fbf9e62-9323-4587-8914-e36aea1e325a\",\n    \"methods\": [\n      \"put\"\n    ],\n    \"conditions\": {\n      \"and\": [\n        {\n          \"===\": [\n            {\n              \"var\": \"data.status\"\n            },\n            \"shipped\"\n          ]\n        },\n        {\n          \"===\": [\n            {\n              \"var\": \"oldEntryData.status\"\n            },\n            \"pending\"\n          ]\n        }\n      ]\n    },\n    \"description\": \"Send Shipped Mail\"\n  }\n]\n</code></pre> <p>This hook only fires on PUT events where the <code>status</code> property has been changed from <code>\"pending\"</code> to <code>\"shipped\"</code>. The conditions object is expected to be parseable by JsonLogic. You can look at the supported Operations here or play with it here. The data input is always the full event, which looks like this:</p> <pre><code>{\n  \"entryID\": \"FkQVvpavsZ\",\n  \"modelID\": \"6234144e-38e2-414d-97c5-0faf1b671428\",\n  \"private\": false,\n  \"locale\": \"\",\n  \"data\": {\n    \"title\": \"current value...\",\n    ...\n    \"_creator\": null,\n    \"creator\": null\n  },\n  \"syncID\": null,\n  \"entryAndAssetRelations\": [],\n  \"roleRelations\": [],\n  \"uniqueFields\": [],\n  \"readOnlyChecked\": true,\n  \"modelTitle\": \"mymodel\",\n  \"dataManagerID\": \"83538731-4ac3-4a1a-b3b5-e31d09e94d42\",\n  \"shortID\": \"33cc6374\",\n  \"user\": {\n    \"accountID\": \"c00803fb-46cb-4af0-a745-34758577b78f\",\n    \"userType\": \"ecUser\"\n  },\n  \"oldEntryData\": {\n    \"title\": \"previous value of the 'title' field\"\n  },\n  \"modified\": \"2018-06-25T12:48:18.580Z\",\n  \"hash\": null\n}\n</code></pre> <p>Most interesting is probably <code>data</code> and <code>oldEntryData</code>, as in the example above.</p>"},{"location":"datamanager/#synchronization","title":"Synchronization","text":"<p>A Sync configuration can be added to models to synchronize the entries with another API. The Sync is read-only \u2013 writing to remote servers is possible using Hooks.  The remote API is required to support JSON over HTTP. It is not required to be RESTful. Remote API Resources need to have a unique ID.</p> <p>Multiple subsequent HTTP requests can be done to get the required data.</p> <p>Sync is defined in the <code>sync</code> property of a model. It is always a JSON Object. Only one sync setting is available for each model.</p> <p>Synchronization is triggered using a special request on the generated API. It requires Authentication of an authorized ec user.</p>"},{"location":"datamanager/#sync-types","title":"Sync Types","text":"<p>There are different types of synchronization with slightly different necessary configuration:</p> <ul> <li> <p>Type 1: Full list sync</p> <p>This kind of synchronization syncs with a remote API that provides a complete list of resources that map 1:1 on entries. Example: we have a model <code>person</code>, and the remote server provides a resource returning a list of all persons. A sync will create an entry for each person in the remote entry. Subsequent syncs will update changed entries (overwriting changes to the local entries) and also delete entries whose related resources on the remote API are no longer existing.</p> </li> <li> <p>Type 2: Subresource sync</p> <p>This kind of synchronization is also a full list sync, but it is done multiple times: for each entry of a parent model. The returned resources are merged into a full list of all resources. The relation to the parent model is set using an <code>entry</code> type field to the parent entry. Example: we have the above model <code>person</code> and also a model <code>task</code> with tasks for each person. The remote API only provides a list of tasks for a single person. The subresource sync is then set to obtain the task list for each entry in the <code>person</code> model (that model does not necessarily need to have a own sync configuration). The synced task entries all have an <code>entry</code> type field pointing to the related <code>person</code> entry.</p> </li> <li> <p>Type 3: Single Resource sync</p> <p>This kind of synchronization does not add new entries or delete entries of the model, but merely updates them using data from a remote API. Therefor it does a request for each entry in the model. Properties set to assume a value from the remote server will be overwritten on sync. Example: we have a local model holding user data, <code>users</code>. It is filled when a new user registers for our app. For each user we want to save the profile picture of a social network providing a REST API. Therefor we ask the user to enter his username of the social network. The sync is configured to obtain the profile picture URI for each user from the remote API.</p> </li> </ul>"},{"location":"datamanager/#the-request-sequence","title":"The Request sequence","text":"<p>As mentioned above, multiple successive HTTP requests can be done to get the remote data. It is possible to pass data from request to request. The available data is called the context. By default, the context will contain the old entry (for Single Resource sync) or the properties <code>parentID</code> and <code>parentResource</code> (for subresource sync); as well as the public Data Manager Config (config.publicConfig as <code>config</code>). The full list sync initially has an empty context. Each request can have a <code>responseMapping</code> property containing a JSON Transformation. The returned object's properties will be added to the context and be accessible for subsequent requests. Subsequent requests may overwrite those properties. The context is also available when building the response mapping for the next request, in the JSONPath <code>$.__context</code>. </p>"},{"location":"datamanager/#supplying-a-json-web-token-jwt","title":"Supplying a JSON Web Token (JWT)","text":"<p>For authentication of the Data Manager Server against a remote API it is possible to create and sign a JSON Web Token. It can be signed using HMAC with a supplied secret or using RSA with public/private key signing. The public key for validating generated JWTs is:</p> <pre><code>-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCFFGDQFysjXTmiA1vjWTRB9bSy\n2SGOPpxMLzetgj1TlWwdzX5GdpooqAjZgJOd4fkXDFUlKKIHukiow1EqYNpxZ60w\n7chYF4s40fRGx62G8Qcx7kzrtDBQfC8mVjNUHXTsaYV/AiNb2FhRd3vniYyVqD7X\npKyyITayPNKNHme3SQIDAQAB\n-----END PUBLIC KEY-----\n</code></pre> <p>The jti is always a newly generated UUIDv4 for each request. Subject, issuer and expiration can optionally be set. The generated JWT is assigned to a context variable and can be used in the requests.</p>"},{"location":"datamanager/#mapping-entry-fields","title":"Mapping <code>entry</code> fields","text":"<p>Fields of the type <code>entry</code> can be mapped to entries of another model that is also synced. This means, when the value of the property supplied by the sync remote is the same as the <code>syncID</code> value of an entry in another model, a link to that entry will be inserted in the entry field.  To configure that, supply the modelID of the target model to look in. See example below.</p>"},{"location":"datamanager/#sync-object-json-structure","title":"Sync object JSON Structure","text":"<p>It is included in the Model JSON Schema.  Explanation using an Example:</p> <pre><code>{\n  \"locale\": \"\", // locale of all generated entries. MUST be set, but can be empty.\n  \"createJWT\": { // optional. Will create a JWT before syncing\n    \"variableToSet\": \"jwt\", // required. The context variable that will hold the generated JWT\n    \"algorithm\": \"HS256\", // required. The algorithm to use: HS256, HS384, HS512 (HMAC) or RS256, RS384, RS512 (RSA)\n    \"issuer\": \"entrecode\", // optional, can be any string and can use context variables\n    \"secret\": \"GQDstcKsx0NHjPOuXOYg5MbeJ1XT0uFiwDVvVBrk\", // only needed if the algorithm is HMAC (HS***)\n    \"subject\": \"{{username}}\", // optional. Can use context variables\n    \"expiresIn\": \"5min\" // optional. Expiration time in seconds or a timespan according to https://github.com/rauchg/ms.js\n  },\n  \"requests\": [ // array of requests to perform. Needs at least one entry. \n    {\n      \"uri\": \"https://myapi/myroute\", // required: the URI. Can use context variables.\n      \"method\": \"post\", // HTTP method. Currently supported: get, put, post, delete. Default is get.\n      \"body\": { // available for post and put method. Can use context variables.\n        \"key\": \"{{value}}\"\n      },\n      \"headers\": { // Object to set additional headers. Can use context variables.\n        \"My-API-Key\": \"{{jwt}}\"\n      },\n      \"responseMapping\": { // maps the response to new context variables (optional)\n        \"accessToken\": { // the value of $.body.accesstoken will be available in the next request as {{accessToken}}\n          \"__array\": false,\n          \"__jsonpath\": \"$.body.accesstoken\"\n        }\n      }\n    }\n  ],\n  \"pathToArray\": \"$.body.values\", // required: path to the resource list to sync (single object in Single Resource Sync)\n  \"remoteID\": {\n    \"__array\": false,\n    \"__jsonpath\": \"$.id\", // required: path to the unique ID of the remote resource. All JSON Transformations are possible, so you may also build ids out of multiple properties\n  },\n  \"itemMapping\": { // Mapping of the final result to properties of the entry\n    \"name\": [ \n          {\n            \"__array\": false,\n            \"__jsonpath\": \"$.renewal\", // by default, only the value of \"pathToArray\" of the last request is accessable. \n            \"__modifier\": \"stringify\"\n          },\n          {\n            \"__modifier\": \"replace\",\n            \"__arguments\": [\n              \"^(\\\\d+)$\", // remember to escape Regular Expressions\n              \"P$1M\"\n            ]\n          } \n    ],\n    \"title\": { // in this example, `name` and `title` of the entries will be set.\n      \"__array\": false,\n      \"__jsonpath\": \"$.__context.accessToken\" // Previous responses can be accessed by setting a context variable and accessing $.__context.\n    }\n  },\n  \"entryRelationTargetModelIDs\": {\n    \"country\": \"17d6e37f-5ab8-46d7-a2f1-a3de1832104c\" // country field links to synced entry in other model. Can also be the model title instead of modelID.\n  }\n  \"subResource\": { // if this property is set, a sub resource sync (sync Type 2) is done\n    \"parentModelID\": \"461bc760-5fb1-47c9-9a81-449f7ae99afd\", // required: model ID of the parent model. You can also use the modelTitle instead. However, you should then use the modelTitle everywhere, and not mix the ID notation with the title notation.\n    \"parentIDForRequests\": \"$.username\", // required: this value of the parent entry will be {{parentID}} in the request context. Either \"syncID\" (the generated ID of a remote resource), a jsonpath, or a JSON Transformation object.\n    \"entryFieldForParentRelation\": \"parentEntry\" // required: the entry field that will hold the relation to the parent resource\n  },\n  \"singleResource\": { // if this property is set (and not \"subResource\"), a single resource sync (sync Type 3) is done\n    \"resourceMapping\": { // each of the here defined properties will be available in the request context\n      \"username\": {\n        \"__array\": false,\n        \"__jsonpath\": \"$.remoteData.username\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"datamanager/#json-transformations","title":"JSON Transformations","text":"<p>Hooks and Sync configurations on models allow for JSON transformations.</p> <p>Basically, a source object gets transformed into a new JSON object using various functions. To transform a JSON object, a transformation definition is needed which holds the basic desired JSON structure and some magic properties that trigger insertion of data from the source object.</p> <p>Supported transformations are:</p> <ul> <li>static values</li> <li>a subset of the whole source JSON structure, using JSON-Mask</li> <li>certain values of the source JSON, using JSONPath</li> <li>modification of values using standard JavaScript functions</li> <li>Concatenation of multiple values</li> </ul>"},{"location":"datamanager/#static-values","title":"Static values","text":"<p>Values can get fixed, static values (without anything from the source object).</p> <p>Example:</p> <pre><code>{\n  \"property\": \"value\"\n}\n</code></pre> <p>just stays the same.</p>"},{"location":"datamanager/#json-mask","title":"JSON-Mask","text":"<p>JSON-Mask is a notation to mask specific parts of a JSON object, hiding the rest. For example, to only pass on the request body of the Web Hook object, the following JSON mask would be used: </p> <p><code>request/body</code></p> <p>To only pass on the request method/uri and the response status, the following JSON mask would be used:</p> <p><code>request(method,uri),response/status</code></p> <p>Full Example:</p> <pre><code>{\n  \"__jsonmask\": \"request(method,uri),response/status\"\n}\n</code></pre> <p>This would return an object containing request with method and uri properties, as well as response with status property.</p> <p>JSON-Mask does not alter the structure of the JSON, it just hides specific parts of it. This means, that the data will always have the <code>request</code>/<code>response</code> root level properties. To get rid of those, you can additionally use JSONPath:</p>"},{"location":"datamanager/#jsonpath","title":"JSONPath","text":"<p>JSONPath can be used to query JSON objects similar to XPath for XML. It returns an array of \u201cmatches\u201d and works similar to CSS and JQuery selectors. To only return the actual request body, the following JSONPath expression would be used:</p> <p><code>$.request.body</code></p> <p>It also lets you get a response body without the HAL container:</p> <p><code>$.response.body._embedded['beef1337:mymodel']</code></p> <p>Arrays may even be filtered with JSONPath syntax.</p> <p>Full Example:</p> <pre><code>{\n  \"__jsonpath\": \"$.request.body\",\n  \"__array\": true\n}\n</code></pre> <p>This would return only the request body, put in an array.</p> <p>Note that by default JSONPath a single object or an array. With the optional <code>__array</code> flag you can instead enforce returning always an array, even if only one object was matched.</p> <p>This was a change introduced in version 0.7.9. In previous versions, the default value for <code>__array</code> was <code>true</code>. </p>"},{"location":"datamanager/#modifier-functions","title":"Modifier functions","text":"<p>Values (typically provided using a <code>__jsonpath</code> property) can be modified using a predefined set of functions. To use this functionality, an additional <code>__modifier</code> property with the desired function name is required. Valid function names are:</p>"},{"location":"datamanager/#parseint","title":"parseInt","text":"<p>Parses an Integer value out of a string (using radix 10).</p>"},{"location":"datamanager/#parsefloat","title":"parseFloat","text":"<p>Parses a Float value out of a string. Keep in mind that the <code>.</code> is used as decimal point, not comma.</p>"},{"location":"datamanager/#stringify","title":"stringify","text":"<p>Calls JSON.stringify() on the value, returning a string value. Note that calling JSON.stringify on Strings double-escapes the string.</p>"},{"location":"datamanager/#replace","title":"replace","text":"<p>Calls String.replace() on the value.  It is required to provide an additional property <code>__arguments</code> containing a two-element array with the search string or regular expression as first element, and the replacement as second element. Important: because of the JSON structure, Regular Expressions have to be supplied as strings. This means that special JSON characters (like <code>\\</code>) inside Regular Expressions need to be escaped. Basically, things like <code>\\d</code> have to be sent as <code>\\\\d</code> to work.</p>"},{"location":"datamanager/#uppercase","title":"uppercase","text":"<p>Make all characters uppercase characters</p>"},{"location":"datamanager/#lowercase","title":"lowercase","text":"<p>Make all characters lowercase characters</p>"},{"location":"datamanager/#date","title":"date","text":"<p>Converts a value into a Date. If no value is given (e.g. using <code>__jsonpath</code>), the current timestamp is the value. String values are transformed into a date using Moment.js String parsing. The output value is by default an ISO 8601 String (including time zone). Optionally, formats can be given for parsing and output formatting.  The property <code>__arguments</code> can contain a two-element array (both values optional). Optional means that the value may be <code>null</code> or <code>false</code> to be ignored (which falls back to the default). The first argument is the optional string parsing format (see Moment.js doc. Default is String parsing without a specific format, which supports a wide range of formats that are detected automatically. The second argument is output formatting (see Moment.js doc). By default (value <code>null</code> or <code>false</code>) an ISO 8601 Date String is output.</p>"},{"location":"datamanager/#date_add-and-date_subtract","title":"date_add and date_subtract","text":"<p>Allows for manipulation of date values by adding or subtracting values. Other than that, the functions do exactly the same as the date modifier function. However, there are two additional (and required) arguments. Therefor, the <code>__arguments</code> array is always required for these two functions. The first argument is the same as for the date function: a string parsing format or null. The second argument is a number value. The third argument is the unit for the value in the second argument. The fourth argument is the same as for the date function: a string output format or null.</p> <p>Example 1:</p> <pre><code>{\n  \"__modifier\": \"date_add\",\n  \"__arguments\": [null, 7, \"days\", \"YY-MM-DD\"]\n}\n</code></pre> <p>Output: 7 days from now in YY-MM-DD.</p> <p>Example 2:</p> <pre><code>{\n  \"__jsonpath\": \"$.dateValue\",\n  \"__modifier\": \"date_subtract\",\n  \"__arguments\": [\"DD.MM.YYYY\", 3, \"years\", \"YY-MM-DD\"]\n}\n</code></pre> <p>Input of the JSONPath function: '19.05.2016'</p> <p>Output: 13-05-19</p>"},{"location":"datamanager/#multiple-modifiers","title":"Multiple modifiers","text":"<p>Blocks with modifiers can be nested using <code>__value</code>. </p> <p>Example: take property and replace <code>,</code> with <code>.</code>, then call parseFloat:</p> <pre><code>{\n  \"__value\": {\n    \"__jsonpath\": \"$.path.to.value\",\n    \"__array\": false,\n    \"__modifier\": \"replace\",\n    \"__arguments\": [\",\", \".\"]\n  },\n  \"__modifier\": \"parseFloat\",\n}\n</code></pre> <p>For more modifiers this recursive structure becomes confusing. Because of that, you can also define an array of JSON Transformation objects that will be called in sequence. The example from above in array notation:</p> <pre><code>[\n  {\n    \"__jsonpath\": \"$.path.to.value\",\n    \"__array\": false\n  },\n  {\n    \"__modifier\": \"replace\",\n    \"__arguments\": [\",\", \".\"]\n  },\n  {\n    \"__modifier\": \"parseFloat\"\n  }\n]\n</code></pre>"},{"location":"datamanager/#concatenation","title":"Concatenation","text":"<p>It is also possible to build new values out of multiple values of the source object.  It is done using an array of values (or value definitions) as <code>__composite</code> property, as well as a <code>__modifier</code> function to concatenate.</p>"},{"location":"datamanager/#string-concatenation","title":"String concatenation","text":"<p>Example: concatenating street name and house number into one value</p> <pre><code>{\n  \"street\": {\n    \"__composite\": [\n      {\n        \"__jsonpath\": \"$.path.to.streetname\",\n        \"__array\": false\n      },\n      \" \",\n      {\n        \"__jsonpath\": \"$.path.to.housenumber\",\n        \"__array\": false\n      },\n    ],\n    \"__modifier\": \"stringConcat\"\n  }\n}\n</code></pre> <p>Note the fixed value <code>\" \"</code> for the space between the two values.</p> <p>Currently only string concatenation is supported, more may come in the future (numerical calculations, array concatenation, \u2026)</p>"},{"location":"datamanager/resources/asset/","title":"Asset","text":""},{"location":"datamanager/resources/asset/#assets","title":"Assets","text":"<p>Assets are abstract representations of files. Usually, they also contain one or more thumbnails in different sizes. Image assets also support different image dimensions. </p> <p>Note on legacy assets: the former implementation is still available but deprecated.</p>"},{"location":"datamanager/resources/asset/#single-asset","title":"Single Asset","text":"<p>A single asset.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/dm-asset</p>"},{"location":"datamanager/resources/asset/#properties","title":"Properties","text":"Property Type Format Description Writable assetID String base64url-encoded UUIDv4 (<code>^[a-zA-Z0-9\\\\-_]{22}$</code>) The unique identifier for an Asset No. Gets generated on creation. title String A string title for this Asset. Inferred from the original file name of the uploaded file. Yes caption String A string caption for this Asset. Yes type String one of <code>image</code>, <code>video</code>, <code>audio</code>, <code>plain</code>, <code>document</code>, <code>spreadsheet</code>, <code>other</code> Asset type No mimetype String <code>^(image|video|audio|text|application)\\/[a-z0-9\\\\.+-]+$</code> MIME-Type of the Asset file No created String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the creation of the Asset No. Gets written on creation. modified String, <code>null</code> ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the last modification of the Asset No. Gets written on updates. creator String, <code>null</code> Version 4 UUID (RFC 4122) The accountID of the creator, if available. No. Gets written on creation. creatorType String <code>ecUser</code>, <code>dmUser</code>, or <code>public</code> The type of user that created the asset. No. Gets written on creation. tags Array[String] Tag Array of string tags for this asset Yes file JSON Main Asset file No. Gets written on creation. file.url String URL The generated URL to retrieve the asset file. No file.size Integer Bytesize of the uploaded File No file.resolution JSON, <code>null</code> Properties <code>width</code> and <code>height</code> Resolution of the image file variant in pixels. No fileVariants Array[JSON] List of File Variants, if this is an image. No. Missing image resolutions can created by requesting them. fileVariants[].url String URL The generated URL to retrieve the asset file variant. No fileVariants[].size Integer Bytesize of the uploaded File No fileVariants[].resolution JSON, <code>null</code> Properties <code>width</code> and <code>height</code> No thumbnails Array[JSON] List of Thumbnails. No. Missing thumbnail resolutions can created by requesting them. thumbnails[].url String URL The generated URL to retrieve the asset thumbnail. No thumbnails[].dimension Integer Resolution of the square thumbnail image in pixel. No isUsed Boolean Indicates if this Asset is used in an Asset/Assets field of an Entry in this Data Manager. No, dynamically changes its value. duplicates Integer Number of duplicate Assets of this Asset in the same Asset Group. No, dynamically changes its value."},{"location":"datamanager/resources/asset/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Asset The resource itself GET, PUT, DELETE collection Asset List List of all available Assets in this Asset Group GET, POST ec:dm-asset/file File The main file URL. GET ec:dm-asset/file-variant File File variant URL(s) GET ec:dm-asset/thumbnail File Thumbnail URL(s) GET ec:dm-asset/duplicates Asset List List of Assets that are duplicates, if applicable GET <p>Using the <code>ec:dm-asset/file-variant</code> and <code>ec:dm-asset/thumbnail</code> relations (both are templated URLs) you can get different sizes of images and thumbnails.  The size property is a minimum-size the target image should have. The next bigger configured size is returned. There are global default sizes, that can be overwritten in Data Manager settings and Asset Group Settings.  In the <code>fileVariants</code>/<code>thumbnails</code> JSON properties only files that were requested before are included. Use the relations to trigger rendering of new sizes; they get returned immediately. </p>"},{"location":"datamanager/resources/asset/#updating-assets","title":"Updating Assets","text":"<p>To update an existing Asset Resource, clients may perform a PUT on <code>ec:dm-asset</code> or <code>self</code> at a single Asset Resource.</p> <p>Partial updates are possible. Changeable properties are <code>title</code>, <code>tags</code> and <code>caption</code>.  It is not possible to change the file itself.</p>"},{"location":"datamanager/resources/asset/#list","title":"List","text":"<p>The Asset List Resource is a Generic List Resource with embedded Asset Resources.</p>"},{"location":"datamanager/resources/asset/#relations_1","title":"Relations","text":"<p>(additionally to the default relations)</p> Relation Name Target Resource Description Possible Methods self Asset List The Assets List GET, POST ec:dm-asset/by-id Asset Templated Link to Assets GET, PUT, DELETE ec:dm-assets/options Asset List Templated Link to Assets list GET ec:dm-assetgroup Asset Group Asset Group of this Asset List GET, PUT ec:api Generated API Entry point Root page of the generated API GET"},{"location":"datamanager/resources/asset/#creating-assets","title":"Creating Assets","text":"<p>To create a new asset, upload a file with content type multipart/form-data (RFC 2388) . MIME Type and basic properties are inferred from the uploaded file(s). The field name should be <code>file</code>.  Multiple files can be uploaded at once to create multiple assets with one call.  Assets always have to be uploaded to exactly one Asset Group. It is also possible to create an asset from an url. Simple attach the desired files with the field name <code>url</code> and DataManager will load the files and create assets.</p> <p>Response: 201 created if everything went well. Response will contain the created Asset resource(s).</p>"},{"location":"datamanager/resources/asset/#filenames","title":"Filenames","text":"<p>By default, a filename is generated using the original file's filename. You can also set the field name to something else than <code>file</code> to overwrite the filename \u2013 even sub-paths are possible this way. Note that if you want a file extension, you still have to deliver the file extension in the field name. On the other hand, it is possible this way to have files online without an extension. As an option, a random filename can be generated. This may be better for user-uploaded stuff. For that, send the field <code>preserveFilenames</code> with value <code>false</code>. The file extension is inferred from the uploaded file. The default (<code>preserveFilenames=true</code> and <code>includeAssetIDInPath=true</code>) may be different for single Data Managers or Asset Groups.</p>"},{"location":"datamanager/resources/asset/#defaultvariants","title":"defaultVariants","text":"<p>Variant sizes of image assets are normally generated on request. This should be the default. Once requested for the first time, they are generated. In some cases it may be useful to have a specific variant size right upon creation of the asset. This can be done by sending <code>defaultVariants</code> property, which should be a (stringified) Integer or Integer Array. The value(s) should be a subset of the configured image sizes.</p>"},{"location":"datamanager/resources/asset/#de-duplication","title":"De-duplication","text":"<p>By default, a de-duplication check is performed. Assets that already exist in this Asset Group are rejected with Error 2375. If you want to disable this check and enforce uploading the file, you may send the field <code>ignoreDuplicates</code> with value <code>true</code> in the multipart/form-data request. If you want to receive an already uplooaded file, you may send the field <code>deduplicate</code> with value <code>true</code> in the multipart/form-data request. You will then receive the first duplicate file for any given upload.</p> <p>Sending other properties in the fields was a feature of legacy assets and is deprecated.</p>"},{"location":"datamanager/resources/asset/#re-rendering-of-variants","title":"Re-Rendering of variants","text":"<p>It is possible to re-render an image variant or thumbnail. This is an internal route which needs special privileges (<code>dm-root:&lt;dataManagerID&gt;:assetgroup:&lt;assetGroupID&gt;:assets:render</code>).  It is not published as hypermedia link. It is a POST to <code>/a/&lt;shortID&gt;/&lt;assetGroupID&gt;/&lt;assetID&gt;/render</code> with the post body defined by https://schema.entrecode.de/schema-data/dm-asset-render.</p>"},{"location":"datamanager/resources/asset/#single-asset-legacy-assets","title":"Single Asset (Legacy Assets)","text":"<p>A single (legacy) asset.</p>"},{"location":"datamanager/resources/asset/#deprecation-notice","title":"DEPRECATION NOTICE","text":"<p>Legacy Assets are deprecated. They can be soft-disabled with the data manager setting <code>\"disableLegacyAssets\": true</code>.</p> <p>Assets are abstract representations of a file, that can be available in multiple variants (e.g. different image sizes or localizations).</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/asset</p>"},{"location":"datamanager/resources/asset/#properties-legacy-assets","title":"Properties (Legacy Assets)","text":"Property Type Format Description Writable assetID String Version 4 UUID (RFC 4122) The unique identifier for an Asset No. Gets generated on creation. title String A string title for this Asset. Inferred from the original file name of the uploaded file. Yes type String one of <code>image</code>, <code>video</code>, <code>audio</code>, <code>plain</code>, <code>document</code>, <code>spreadsheet</code> Asset type No created String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the creation of the Asset No. Gets written on creation. deleted String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the deletion of the Asset. Only included when the asset is in the trash. No tags Array[String] Tag Array of string tags for this asset Yes files Array[JSON] File Array of actual files for this asset Yes private Boolean Whether or not the asset was created private. Yes"},{"location":"datamanager/resources/asset/#relations-legacy-assets","title":"Relations (Legacy Assets)","text":"Relation Name Target Resource Description Possible Methods self Asset The resource itself GET, PUT, DELETE collection Asset List List of all available Assets GET, POST ec:asset/best-file File Content-negotiated \u201cbest suited\u201d file of this asset GET ec:datamanager Data Manager Data Manager this resource belongs to GET, PUT ec:tag Tag Tag of this asset\u00a0 GET, PUT, DELETE"},{"location":"datamanager/resources/asset/#file-subresource-legacy-assets","title":"File Subresource (Legacy Assets)","text":"<p>This subresource is included in the Asset resource.</p> Property Type Format Description Writable mimetype String\u00a0 RFC 2046 The MIME Media type for this file \u00a0No\u00a0 url String RFC 3986 The URL of the file for retrieval. Can be overwritten with custom asset url (datamanager config <code>customAssetDomain</code> No size Number Integer Size of the file in Bytes No resolution JSON JSON object with additional metadata for this file. For image assets, it will contain properties like <code>width</code> and <code>height</code> to indicate the image resolution. No locale String RFC5646 Syntax (<code>en-US</code>, <code>de-DE</code>, \u2026) Locale of the asset file Yes created String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the creation of the file No modified String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the last modification of this file No"},{"location":"datamanager/resources/asset/#list-legacy-assets","title":"List (Legacy Assets)","text":"<p>The Asset List Resource is a Generic List Resource with embedded Asset Resources.</p>"},{"location":"datamanager/resources/asset/#read","title":"Read","text":"<p>To read a single Asset Resource, clients may perform GET on a <code>ec:asset</code> relation.</p> <p>To read the Asset List Resource, clients may perform GET on a <code>ec:assets</code> relation or on the <code>collection</code> relation of a single Asset resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"datamanager/resources/asset/#create","title":"Create","text":"<p>To create a new asset, upload a file with content type multipart/form-data (RFC 2388). MIME Type and basic properties are inferred from the uploaded file(s). The field name has to be <code>file</code>.  Multiple files can be uploaded at once to create multiple assets with one call. You can also send a field <code>tags</code> or <code>title</code> to overwrite the default title and tags. <code>tags</code> must be a JSON.stringified array of strings.</p> <p>Additionally a boolean field <code>private</code> can be sent to specify if the created asset should be private (read: only accessible by the creating user) or public (read: accessible by everyone in the data manager).</p> <p>Response: 201 created if everything went well. Response will contain link relations to newly created asset(s). They will not be embedded, however.</p>"},{"location":"datamanager/resources/asset/#edit","title":"Edit","text":"<p>To update an existing Asset Resource, clients may perform a PUT on <code>ec:asset</code> or <code>self</code> at a single Asset Resource.</p> <p>Partial updates are possible.</p> <p>Files:  Include to change locale of single files (<code>ec:asset/file</code> resource properties <code>url</code> and <code>locale</code> are required). If included, all files have to be included in the array. Files not included will be deleted.</p> <p>To merge two assets, include a link relation to another asset in a PUT request (HAL links list should contain an <code>ec:api/asset</code> link relation). The target asset(s) will be merged into this one, if possible. </p> <p>To add an additional representation to an asset resource (e.g. another image resolution or document localized for another locale), the new file is POSTed to the <code>ec:api/asset</code> resource with content type multipart/form-data (RFC 2388). The field name has to be <code>file</code>.</p>"},{"location":"datamanager/resources/asset/#delete","title":"Delete","text":"<p>To delete an asset, including its file representations, send a DELETE request to the <code>ec:api/asset</code> resource. This will move the asset to the trash.</p>"},{"location":"datamanager/resources/asset/#deleted-assets","title":"Deleted Assets","text":"<p>Deleted assets are the same as regular assets, however they have the <code>deleted</code> timestamp set. They get permanently deleted after some time.</p> <p>To permanently delete a deleted asset right away, it has to be called with HTTP DELETE and the query string parameter <code>destroy=destroy</code>. Output is 204 NO CONTENT.</p> <p>To restore a deleted asset, simple call DELETE on the deleted asset, without any additional query string parameter. Output is 200 OK.</p>"},{"location":"datamanager/resources/datamanager/","title":"Data Manager","text":""},{"location":"datamanager/resources/datamanager/#single-data-manager","title":"Single Data Manager","text":"<p>The single Data Manager Resource represents an isolated \u201cspace\u201d. A Data Manager can have any number models and assets.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/datamanager.</p>"},{"location":"datamanager/resources/datamanager/#properties","title":"Properties","text":"Property Type Format Description Writable dataManagerID String Version 4 UUID (RFC 4122) The unique identifier for this Data Manager No. Gets generated on creation. created String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the creation of this Data Manager No. Gets written on creation. title String Friendly name for the Data Manager Yes description String A longer description for this Data Manager Space. Yes hexColor String 6-digit hex color <code>#rrggbb</code> <code>/^#[A-Fa-f0-9]{6}$/</code> Color identifier for editor. Yes config JSON\u00a0 A JSON object for various configurations. See Schema for details. config.publicConfig (if set) will be available to the public API root entry point as <code>config</code>. Yes config.users.anonymous boolean Setting for anonymous (token-only, no email, long-lived) user accounts Yes config.users.password boolean Activates signup/login for users with email and password Yes config.users.google JSON Activates signup/login for users with google. Properties <code>clientID</code> and <code>clientSecret</code> are required. Yes config.users.facebook JSON Activates signup/login for users with facebook. Properties <code>clientID</code> and <code>clientSecret</code> are required. Yes config.users.nwb JSON Activates signup/login for users with nwb/kiehl. Properties <code>url</code>, <code>password</code>, <code>username</code> and <code>requiredRight</code> are required. Yes config.users.snipcart JSON Activates signup/login for users with snipcart. Properties <code>apiKey</code> and <code>apiKeyTesting</code> are required. Yes config.users.hector boolean Activates login for users with hector. DEPRECATED Yes config.users.privacyProtection boolean If true, no IP addresses are stored when tokens are generated. (Empty String instead) Yes config.users.template String Choose a customEcPassport template to use. Yes config.users.templatevariables JSON if <code>template</code> is used, you can supply custom variables here. Yes config.disableUserEmailVerificationEmail boolean If true, no verification mails are sent after signup of users. Useful for importing legacy users. Yes config.publicConfig JSON Arbitrary settings that are public in the API Root. Yes config.auth JSON Arbitrary config for ec.passport, currently only <code>accessTokenValidityInMinutes</code> is implemented config.customAuthDomain string URL Use email templates for a special domain as configured in ec.mail. Must equal a folder in ec.mail's templates. Exclude https, example: <code>email.myserver.com</code> Yes config.customAuthLinks JSON URL (keys: email-verify, password-reset, change-email-abort, change-email-verify, password-reset-abort) Use custom auth links in email, example: <code>https://email.myserver.com/_auth/email-verification/{jwt}</code> Yes config.customAuthSubjects JSON String or object with language keys (keys: email-verify, password-reset, change-email-abort, change-email-verify) Use custom subjects in email, example: <code>f0rg0t p4ssw0rd?</code> Yes config.customAuthFrom string Use custom sender of the email, example: <code>Mr. Sender</code> Yes config.customAssetDomain string URL Assets will use this domain for link building instead of the generic default. Include https, example: <code>https://images.myserver.com</code> Yes config.assetSettings JSON Global default for Asset Group Settings, see https://doc.entrecode.de/resources/dm-assetgroup/ Yes rights Array One of <code>manageRights</code>, <code>editModel</code>, <code>editEntries</code>, <code>editAssets</code>, <code>manageAPIs</code> Deprecated Array of available rights. Not included rights are not available. No publicAssetRights Array \u00a0One of <code>get</code>, <code>put</code>, <code>postPrivate</code>, <code>postPublic</code>, <code>delete</code>, <code>getTags</code>, <code>editTags</code> Array of available rights for public assets API. Not included rights are not available. Yes locales Array RFC4646 Available locales in this Data Manager Space. Yes defaultLocale String RFC4646 The default locale of this Data Manager Space. Included in <code>locales</code>. Yes"},{"location":"datamanager/resources/datamanager/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Data Manager The resource itself GET, PUT collection Data Manager List List of all available Data Managers GET, POST ec:assets Asset List Collection of assets associated with this Data Manager Space. GET, POST ec:assets/deleted Asset List Collection of deleted assets associated with this Data Manager Space. GET ec:models Model List Collection of models associated with this Data Manager Space. GET, POST ec:dm-template Data Manager Template Template that was used when generating this Data Manager (optional) GET\u00a0 ec:datamanager/export Export Data Manager Postman Collection export of a Data Manager. GET"},{"location":"datamanager/resources/datamanager/#list","title":"List","text":"<p>The Data Manager List Resource is a Generic List Resource with embedded Data Manager Resources.</p> <p>Additionally, it is the entry point for the Data Manager Manager API. Because of that, it has an additional <code>msg</code> property with a greeting string (including the API Server version number).</p>"},{"location":"datamanager/resources/datamanager/#possible-actions","title":"Possible Actions","text":""},{"location":"datamanager/resources/datamanager/#read","title":"Read","text":"<p>To read a single Data Manager Resource, clients may perform GET on a <code>ec:datamanager</code> relation.</p> <p>To read the Data Manager List Resource, clients may perform GET on a <code>ec:datamanagers</code> relation or on the <code>collection</code> relation of a single Data Manager resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"datamanager/resources/datamanager/#create","title":"Create","text":"<p>To create a new Data Manager Space, clients may perform a POST on <code>ec:datamanagers</code> (the list resource). The JSON Schema for creating a new Data Manager is https://schema.entrecode.de/schema-data/datamanager-template.</p> <p>The success status code is 201 Created and the response body is the newly created single Data Manager resource.</p>"},{"location":"datamanager/resources/datamanager/#create-on-customer-database","title":"Create on customer database","text":"<p>If customer databases are available (this is a config option of the data manager instance, properties of <code>customDBs</code>), you can choose to create a Data Manager on that database. This cannot be changed afterwards! The customDB identifiers are not published.</p> <p>Known limitations:</p> <ul> <li>Data Managers on customer Databases cannot use Templates or be created with a template (Jul 2019)</li> <li>Legacy Assets will not work (and will never, because they had global routes without connection to a data manager)</li> </ul> <p>To create da data manager on a customer db, just send the property <code>dbhost</code> with the request like this:</p> <pre><code>{\n  \"title\": \"my customer data manager\",\n  \"hexColor\": \"#ffffff\",\n  \"config\": {\n    \"disableLegacyAssets\": true // always set this, because legacy assets will not work anyways\n  },\n  \"locales\": [],\n  \"dbhost\": \"customerdbidentifier\"\n}\n</code></pre> <p>Everything created under this data manager (models, asset groups, roles, accounts, entries, assets) will be stored in the customer database instead of the main PostgreSQL database. All properties of the data manager itself are always written on both database instances. </p>"},{"location":"datamanager/resources/datamanager/#create-from-template","title":"Create from Template","text":"<p>When following the datamanagers/new-from-template relation, a query parameter <code>templateID</code> is appended to the URI. If the templateID is given, instead of a single Data Manager a new Data Manager is created using the template \u2013 including models and other configuration defined in the template. Then the request body is not required to respect the datamanager-template JSON schema, but instead to respect the schema in the templates' <code>dataSchema</code> property.</p>"},{"location":"datamanager/resources/datamanager/#edit","title":"Edit","text":"<p>To update an existing Data Manager Resource, clients may perform a PUT on <code>ec:datamanager</code> or <code>self</code> at a single Data Manager Resource. The JSON Schema for editing a Data Manager is https://schema.entrecode.de/schema-data/datamanager-template. Title and description of the Data Manager can be changed. Locales can be added or deleted and a defaultLocale can be set.</p> <p>The success status code is 200 OK and the response body is the updated single Data Manager resource.</p> <pre><code>The Data Manager configuration is heavily cached. For changes to take effect, wait for at most 10 seconds.\n</code></pre>"},{"location":"datamanager/resources/datamanager/#update-from-template","title":"Update from Template","text":"<p>When following the datamanager/update-from-template relation, a query parameter <code>templateID</code> is appended to the URI. If the templateID is given, instead of a single Data Manager a new Data Manager is created using the template \u2013 including models and other configuration defined in the template. Then the request body is not required to respect the datamanager-template JSON schema, but instead to respect the schema in the templates' <code>dataSchema</code> property.</p> <p>An update is only possible if the data manager was created with a parent template of the desired template.</p>"},{"location":"datamanager/resources/datamanager/#delete","title":"Delete","text":"<p>To delete a Data Manager including all its data, clients may perform a DELETE on <code>ec:datamanager</code> or <code>self</code> at a single Data Manager Resource. This deletes the Data Manager permanently, including all its models, assets, and generated API resources.</p> <p>It is not possible to restore a deleted Data Manager in any way, so handle this method with care!</p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"datamanager/resources/datamanager/#export","title":"Export","text":"<p>To export the structure of a Data Manager Resource, clients can follow the relation <code>ec:datamananger/export</code> and perform a GET request. This will create a Postman Collection which in turn can be used in Postman (or Newman Runner) in order to create a copy of the Data Manager. Note that only the Data Manager config itself, clients, roles, models, and policies are exported. Entries and Assets will be left behind.</p> <p>The success status code is 200 OK. and the response body will be a object containing <code>collection</code> and <code>dataScheme</code>. <code>collection</code> is the Postman Collection and <code>dataScheme</code> is a JSON Schema of the required variables for the collection.</p> <p>The exported collection can also be used for creating a template for Data Managers. But this won't be part of this documentation.</p>"},{"location":"datamanager/resources/dm-account/","title":"Data Manager Account","text":""},{"location":"datamanager/resources/dm-account/#single-data-manager-account","title":"Single Data Manager Account","text":"<p>A single entrecode Data Manager Account.</p> <p>Data Manager Accounts represent users of the generated API.</p> <p>Note: This is not the same as the global entrecode Account!</p> <p>Data Manager Accounts get created by signing up as a user, either actually with email/password or an OAuth connection, or implicit as anonymous user. This resource is for viewing and deleting those users.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/dm-account.</p>"},{"location":"datamanager/resources/dm-account/#properties","title":"Properties","text":"Property Type Format Description Writable accountID String Version 4 UUID (RFC 4122) The unique identifier for a account No. Gets generated on creation. email String valid eMail Address or <code>null</code> The primary eMail address of the account. If <code>null</code>, it is an anonymous account. No hasPassword Boolean \u00a0Whether or not a password is set\u00a0 \u00a0No \u00a0oauth Array[String] \u00a0OAuth issuer identifiers List of connected OAuth accounts No created String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the creation/registration of this Account No. Gets written on creation. pending Boolean <code>true</code> if the email address has not yet been validated, <code>false</code> otherwise. No. Gets written when the user clicks on the link in the validation email. pendingUpdated String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the last change of the <code>pending</code> flag (time of double opt in) No. Gets written when <code>pending</code> changes."},{"location":"datamanager/resources/dm-account/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self DM Account The resource itself GET, DELETE collection DM Account List List of all available Data Manager Accounts GET ec:datamanager Data Manager Data Manager this resource belongs to GET, PUT ec:dm-role DM Roles Roles this account is assigned to. Change by editing roles. GET, PUT, DELETE"},{"location":"datamanager/resources/dm-account/#list","title":"List","text":"<p>The Data Manager Account List Resource is a Generic List Resource with embedded Data Manager Account Resources.</p>"},{"location":"datamanager/resources/dm-account/#possible-actions","title":"Possible Actions","text":""},{"location":"datamanager/resources/dm-account/#read","title":"Read","text":"<p>To read a single Data Manager Account Resource, you may perform GET on a <code>ec:dm-account</code> relation.</p> <p>To read the Data Manager Account List Resource, you may perform GET on a <code>ec:dm-accounts</code> relation or on the <code>collection</code> relation of a single Data Manager Account resource.</p> <p>Note that it is possible to filter the list by role, to get all Accounts with a specific role.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"datamanager/resources/dm-account/#example","title":"Example","text":"<pre><code> {\n        \"accountID\": \"53361701-09a9-4401-a438-73e1a767c45b\",\n        \"email\": null,\n        \"hasPassword\": false,\n        \"oauth\": [],\n        \"_links\": {\n          \"self\": {\n            \"href\": \"https://datamanager.entrecode.de/account?dataManagerID=57e0c6eb-0041-41a7-8d27-ebb480ad1c2d&amp;accountID=53361701-09a9-4401-a438-73e1a767c45b\"\n          },\n          \"collection\": {\n            \"href\": \"https://datamanager.entrecode.de/account?dataManagerID=57e0c6eb-0041-41a7-8d27-ebb480ad1c2d\"\n          },\n          \"ec:datamanager\": {\n            \"href\": \"https://datamanager.entrecode.de/?dataManagerID=57e0c6eb-0041-41a7-8d27-ebb480ad1c2d\"\n          }\n        }\n      }\n</code></pre>"},{"location":"datamanager/resources/dm-account/#create","title":"Create","text":"<p>Accounts cannot be created using the API, only using the User Management.</p>"},{"location":"datamanager/resources/dm-account/#edit","title":"Edit","text":"<p>To update an existingAccount Resource, clients may perform a PUT on <code>ec:account</code> or <code>self</code> at a single Account Resource. The JSON Schema for editing a Account is just HAL. Only linked roles can be changed, by adding or removing the HAL links <code>ec:dm-role</code> with a valid <code>href</code>.</p> <p>The success status code is 200 OK and the response body is the updated single Account resource.</p>"},{"location":"datamanager/resources/dm-account/#delete","title":"Delete","text":"<p>To delete an existing Data Manager Account Resource, you may perform a DELETE on <code>ec:dm-account</code> or <code>self</code> at a single Data Manager Account Resource.</p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"datamanager/resources/dm-assetgroup/","title":"Asset Group","text":""},{"location":"datamanager/resources/dm-assetgroup/#single-asset-group","title":"Single Asset Group","text":"<p>Asset Group in a Data Manager. Asset Groups are used to organize Assets. Every (non-legacy) asset belongs to exactly one Asset Group. Asset Groups can have settings that overwrite the global or Data Manager settings for its assets.  Also, an Asset Group defines if the file URLs of its Asset are signed URLs or just plain URLs. This can never change in an Asset Group.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/dm-assetgroup.</p>"},{"location":"datamanager/resources/dm-assetgroup/#properties","title":"Properties","text":"Property Type Format Description Writable assetGroupID String <code>^[a-z0-9_-]{1,32}$</code> The unique identifier for an asset group Yes, but only on creation. Cannot be changed afterwards. public Boolean true/false Indicating if assets in this group are generally public or have signed URLs. Yes, but only on creation. Cannot be changed afterwards. settings JSON various settings Yes settings.urlExpiration String ISO-8601 formatted Duration String (PXXX\u2026, RFC 3339) How long URLs will be valid, if this assetgroup is non-public. Overwrites global setting from Data Manager. Yes settings.disabledTypes Array[String] Array of either types (\"image\", \"video\", \"audio\", \"plain\", \"document\", \"spreadsheet\", \"other\") or mime-types. List of asset types and mime types that may not be used in this group. Yes, but values can only be removed. settings.imageSizes Array[Integer] List of available image sizes. Yes, but values can only be added. settings.thumbSizes Array[Integer] List of available thumbnail sizes. Yes, but values can only be added. settings.urls.public String URI Custom public Asset Domain Yes settings.urls.private String URI Custom private Asset Domain Yes settings.preserveFilenames Boolean Set if by default the file name should be part of the URL. Can be overridden on upload. Yes settings.includeAssetIDInPath Boolean Set if by default the file name should include the assetID for uniqueness. To be used together with preserveFilenames. Can be overridden on upload. Yes settings.thumbMimeType <code>null</code> or String <code>'image/jpeg'</code> \u00a0Set to <code>image/jpeg</code> (currently only supported value) to enforce JPEG Thumbnails. Yes settings.variantMimeType <code>null</code> or String <code>'image/jpeg'</code> Set to <code>image/jpeg</code>/<code>image/png</code>/\u00ecmage/webp`) to enforce default Variant Images in another format. If not set, variants are in the original mime type. Yes settings.additionalVariants <code>null</code> or Array[String] <code>['image/webp']</code> Enable creation of additional variants in another format (mime type). Yes settings.optimize <code>null</code> or Boolean true/false enable optimization of JPEG/PNG images using TinyPNG Yes settings.jpegQuality Integer between 10 and 90 JPEG/webp Quality to use for rendering of Variants and Thumbs. Default is 85. Yes settings.autoDelete <code>null</code> or String <code>7 days</code>, <code>1 month</code>, <code>1 second</code> Automatically delete Assets after specified timespan. Do not set to retain assets. Note that a script is periodically running for the deletion. So a value of '1 second' will not necessarily make the deletion instant, but will delete assets on the next run of the deletion script. Yes settings.deletePermanently String <code>7 days</code>, <code>1 month</code>, <code>1 second</code> Timespan after which a deleted asset is physically deleted. Default is 7 days. Note that a script is periodically running for the deletion. So a value of '1 second' will not necessarily make the deletion instant, but will let deleted assets be removed on the next run of the deletion script. Yes settings.defaultVariants Array[Integer] List of default variant sizes to generate for uploaded assets. Should be a subset of <code>imageSizes</code>. Yes settings.download Boolean true/false Set to <code>true</code> to trigger a <code>Content-Disposition: attachment</code> header. Default is <code>false</code>. Yes policies Array[JSON] Policy Definition Permission Policies for Assets in this Asset Group Yes policies[].method String <code>get</code>, <code>put</code>, <code>post</code>, <code>delete</code> The method the policy should apply to. Yes policies[].user String <code>public</code>, <code>dmUser</code> The user type the policy should apply to. Yes policies[].conditions JSON or <code>null</code> See https://schema.entrecode.de/schema-data/dm-assetgroup#definitions/conditions Additional conditions the assets need to fulfill. Yes"},{"location":"datamanager/resources/dm-assetgroup/#example-assetgroup-settings","title":"Example Assetgroup Settings","text":"<p>Copy and paste, but think about it:</p> <pre><code>{\n  \"disabledTypes\": [\"image\", \"video\", \"audio\", \"plain\", \"document\", \"spreadsheet\", \"other\"],\n  \"imageSizes\": [500],\n  \"thumbSizes\": [160],\n  \"preserveFilenames\": false,\n  \"includeAssetIDInPath\": false\n}\n</code></pre>"},{"location":"datamanager/resources/dm-assetgroup/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Asset Group The resource itself GET, PUT collection Asset Group List List of all available Asset Group GET, POST ec:datamanager Data Manager The Data Manager this Asset Group belongs to GET, PUT ec:dm-assets \u00a0 Asset List The Assets of this Asset Group GET, POST"},{"location":"datamanager/resources/dm-assetgroup/#list","title":"List","text":"<p>The Asset Group List Resource is a Generic List Resource with embedded Asset Group Resources.</p>"},{"location":"datamanager/resources/dm-assetgroup/#possible-actions","title":"Possible Actions","text":""},{"location":"datamanager/resources/dm-assetgroup/#read","title":"Read","text":"<p>To read a single Asset Group Resource, clients may perform GET on a <code>ec:dm-assetgroup</code> relation.</p> <p>To read the Asset Group List Resource, clients may perform GET on a <code>ec:dm-assetgroups</code> relation or on the <code>collection</code> relation of a single Asset Group resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"datamanager/resources/dm-assetgroup/#create","title":"Create","text":"<p>To create a new Asset Group, clients may perform a POST on <code>ec:dm-assetgroups</code> (the list resource). The JSON Schema for creating a new Asset Group is https://schema.entrecode.de/schema-data/dm-assetgroup-template-post. </p> <p>The success status code is 201 Created and the response body is the newly created single Asset Group resource.</p>"},{"location":"datamanager/resources/dm-assetgroup/#edit","title":"Edit","text":"<p>To update an existing Asset Group Resource, clients may perform a PUT on <code>ec:dm-assetgroup</code> or <code>self</code> at a single Asset Group Resource. The JSON Schema for editing a Asset Group is https://schema.entrecode.de/schema-data/dm-assetgroup-template-put.  All fields are optional. Some changes are restricted (see table above).</p> <p>The success status code is 200 OK and the response body is the updated single Asset Group resource.</p>"},{"location":"datamanager/resources/dm-assetgroup/#delete","title":"Delete","text":"<p>Deleting an Asset Group is currently not possible.</p>"},{"location":"datamanager/resources/dm-client/","title":"Client","text":""},{"location":"datamanager/resources/dm-client/#single-data-manager-client","title":"Single Data Manager Client","text":"<p>A single entrecode Data Manager Client.</p> <p>Client registration is needed to obtain access tokens. Due to the authentication flow of OAuth, the end user is sent to the OAuth Provider in the browser, and afterwards redirected back to the client application. The access token can only be sent to the client using a valid redirect URL that gets the token appended as query string parameter or cookie.</p> <p>Clients have an alphanumerical ID and some configuration \u2013 primarily a callback URL that is used to redirect the user back to the client after successful authentication.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/dm-client.</p>"},{"location":"datamanager/resources/dm-client/#properties","title":"Properties","text":"Property Type Format Description Writable clientID String <code>^[0-9a-z\\-_]+$</code> Unique Identifier for a client Only on creation callbackURL String Valid URL (RFC 1738) URL to send the user back to after authentication Yes tokenMethod Array[String] <code>query</code>, <code>cookie</code> or <code>body</code> Indicates how the client expects the token to receive. Default: <code>query</code> Yes disableStrategies Array[String] valid login strategy (i.e. <code>password</code>, <code>google</code>, <code>facebook</code>) Disable one or more login strategies for this client Yes hexColor String 6-digit hex color <code>#rrggbb</code> <code>/^#[A-Fa-f0-9]{6}$/</code> Color identifier for editor. Yes"},{"location":"datamanager/resources/dm-client/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self DM Client The resource itself GET, PUT, DELETE collection DM Client List List of all available Data Manager Clients GET, POST ec:datamanager Data Manager Data Manager this resource belongs to GET, PUT"},{"location":"datamanager/resources/dm-client/#list","title":"List","text":"<p>The Data Manager Client List Resource is a Generic List Resource with embedded Data Manager Client Resources.</p>"},{"location":"datamanager/resources/dm-client/#possible-actions","title":"Possible Actions","text":""},{"location":"datamanager/resources/dm-client/#read","title":"Read","text":"<p>To read a single Data Manager Client Resource, clients may perform GET on a <code>ec:dm-client</code> relation.</p> <p>To read the Data Manager Client List Resource, clients may perform GET on a <code>ec:dm-clients</code> relation or on the <code>collection</code> relation of a single Data Manager Client resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"datamanager/resources/dm-client/#example","title":"Example","text":"<pre><code>{\n  \"clientID\": \"default-web-client\",\n  \"callbackURL\": \"https://my-client.example/callback\",\n  \"tokenMethod\": [\n    \"query\"\n  ],\n  \"disableStrategies\": [\n    \"google\"\n  ],\n  \"hexColor\": \"#00beef,\n  \"_links\": {\n    \"self\": {\n      \"href\": \"https://datamanager.entrecode.de/client?dataManagerID=00000000-0000-4444-8888-000000000000&amp;clientID=default-web-client\"\n    },\n    \"curies\": {\n      \"href\": \"https://entrecode.de/doc/rel/{rel}\",\n      \"templated\": true\n    },\n    \"collection\": {\n      \"href\": \"https://datamanager.entrecode.de/client?dataManagerID=00000000-0000-4444-8888-000000000000\"\n    }\n  }\n}\n</code></pre>"},{"location":"datamanager/resources/dm-client/#create","title":"Create","text":"<p>To create a new Data Manager Client Resource, clients may perform a POST on <code>ec:dm-clients</code> (the list resource). The JSON Schema for creating a new Data Manager Client is https://schema.entrecode.de/schema-data/dm-client-template-post. </p> <p>Identical to Edit, but <code>clientID</code> and <code>callbackURL</code> are both required. </p> <p>The success status code is 201 Created and the response body is the newly created single Data Manager Client resource.</p>"},{"location":"datamanager/resources/dm-client/#edit","title":"Edit","text":"<p>To update an existing Data Manager Client Resource, clients may perform a PUT on <code>ec:dm-client</code> or <code>self</code> at a single Data Manager Client Resource. The JSON Schema for editing a Data Manager Client is https://schema.entrecode.de/schema-data/dm-client-template-put. </p> <p>It is possible to make partial changes. Missing properties keep their old value.</p> <p>The success status code is 200 OK and the response body is the updated single Data Manager Client resource.</p>"},{"location":"datamanager/resources/dm-client/#delete","title":"Delete","text":"<p>To delete an existing Data Manager Client Resource, clients may perform a DELETE on <code>ec:dm-client</code> or <code>self</code> at a single Data Manager Client Resource. </p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"datamanager/resources/dm-role/","title":"Data Manager Role","text":""},{"location":"datamanager/resources/dm-role/#single-data-manager-role","title":"Single Data Manager Role","text":"<p>A single entrecode Data Manager Role.</p> <p>Data Manager Accounts can be organized using Roles (Groups). This is needed to assign permissions to users, because model permission policies can only be assigned to roles and not to accounts directly.</p> <p>There are default roles in Data Managers where new users get added to automatically. This is a behavior that can be configured for each role.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/dm-role.</p>"},{"location":"datamanager/resources/dm-role/#properties","title":"Properties","text":"Property Type Format Description Writable roleID String Version 4 UUID (RFC 4122) The unique identifier for a role No. Gets generated on creation. name String Friendly name for the role Yes label String\u00a0 A label for the role (filterable, for categorizing roles) Yes addUnregistered Boolean \u00a0Whether or not new anonymous accounts should be added to this role\u00a0 \u00a0Yes addRegistered Boolean Whether or not new registered accounts should be added to this role \u00a0Yes accountsCount Integer Number of accounts with this role No"},{"location":"datamanager/resources/dm-role/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self DM Role The resource itself GET, PUT, DELETE collection DM Role List List of all available Data Manager Roles GET, POST ec:datamanager Data Manager Data Manager this resource belongs to GET, PUT ec:dm-accounts DM Account List List of accounts with this role GET"},{"location":"datamanager/resources/dm-role/#list","title":"List","text":"<p>The Data Manager Role List Resource is a Generic List Resource with embedded Data Manager Role Resources.</p>"},{"location":"datamanager/resources/dm-role/#possible-actions","title":"Possible Actions","text":""},{"location":"datamanager/resources/dm-role/#read","title":"Read","text":"<p>To read a single Data Manager Role Resource, you may perform GET on a <code>ec:dm-role</code> relation.</p> <p>To read the Data Manager Role List Resource, you may perform GET on a <code>ec:dm-roles</code> relation or on the <code>collection</code> relation of a single Data Manager Role resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"datamanager/resources/dm-role/#example","title":"Example","text":"<pre><code> {\n        \"roleID\": \"53361701-09a9-4401-a438-73e1a767c45b\",\n        \"name\": \"Anonymous Users\",\n        \"label\": \"\",\n        \"addUnregistered\": true,\n        \"addRegistered\": false,\n        \"accounts\": [],\n        \"_links\": {\n          \"self\": {\n            \"href\": \"https://datamanager.entrecode.de/role?dataManagerID=57e0c6eb-0041-41a7-8d27-ebb480ad1c2d&amp;roleID=53361701-09a9-4401-a438-73e1a767c45b\"\n          },\n          \"collection\": {\n            \"href\": \"https://datamanager.entrecode.de/role?dataManagerID=57e0c6eb-0041-41a7-8d27-ebb480ad1c2d\"\n          },\n          \"ec:datamanager\": {\n            \"href\": \"https://datamanager.entrecode.de/?dataManagerID=57e0c6eb-0041-41a7-8d27-ebb480ad1c2d\"\n          }\n        }\n      }\n</code></pre>"},{"location":"datamanager/resources/dm-role/#create","title":"Create","text":"<p>To create a new Data Manager Role Resource, you may perform a POST on <code>ec:dm-roles</code> (the list resource). The JSON Schema for creating a new Data Manager Role is https://schema.entrecode.de/schema-data/dm-role-template. </p> <p>Identical to Edit.</p> <p>The success status code is 201 Created and the response body is the newly created single Data Manager Role resource.</p>"},{"location":"datamanager/resources/dm-role/#edit","title":"Edit","text":"<p>To update an existing Data Manager Role Resource, you may perform a PUT on <code>ec:dm-role</code> or <code>self</code> at a single Data Manager Role Resource. The JSON Schema for editing a Data Manager Role is https://schema.entrecode.de/schema-data/dm-role-template. </p> <p>It is possible to make partial changes. Missing properties keep their old value.</p> <p>The success status code is 200 OK and the response body is the updated single Data Manager Role resource.</p>"},{"location":"datamanager/resources/dm-role/#delete","title":"Delete","text":"<p>To delete an existing Data Manager Role Resource, you may perform a DELETE on <code>ec:dm-role</code> or <code>self</code> at a single Data Manager Role Resource. </p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"datamanager/resources/dm-template/","title":"Data Manager Template","text":""},{"location":"datamanager/resources/dm-template/#single-data-manager-template","title":"Single Data Manager Template","text":"<p>A single entrecode Data Manager Template.</p> <p>Data Manager Templates are basically Postman Collections \u2013 a series of templated HTTP Requests that can be run using Postman, the Newman command-line utility or the entrecode Newman Microservice.</p> <p>Templates are always rooted in a base template (or a are a base template themselves). There are only updates possible, e.g. when a Data Manager Template gets a new model after sometime, there is the first version that is the initial template (creating the Data Manager etc) and then a second version that only adds the new model. When creating a new Data Manager, the base template is run and all update versions up to the desired version. There is no downgrade logic.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/dm-template.</p>"},{"location":"datamanager/resources/dm-template/#properties","title":"Properties","text":"Property Type Format Description Writable templateID String Version 4 UUID (RFC 4122) The unique identifier for a template No. Gets generated on creation. name String Friendly name for the Template Yes collection JSON Object\u00a0 Postman Collection The request collection that builds up the data manager Yes dataSchema JSON Object JSON Schema Optional. JSON Schema describing the expected <code>data</code> object for running <code>collection</code> \u00a0Yes version String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Version (Timestamp) \u00a0No. Gets written on creation."},{"location":"datamanager/resources/dm-template/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self DM Template The resource itself GET collection DM Template List List of all available Data Manager Templates GET, POST ec:datamanagers Data Manager List Data Manager entry point GET, POST ec:dm-template/parent DM Template Parent Template (previous version of this template) GET ec:datamanagers/new-from-template Data Managers Create a new Data Manager from this template POST ec:datamanager/update-from-template Data Manager Try to update Data Manager to template (templated Link) PUT"},{"location":"datamanager/resources/dm-template/#list","title":"List","text":"<p>The Data Manager Template List Resource is a Generic List Resource with embedded Data Manager Template Resources.</p>"},{"location":"datamanager/resources/dm-template/#possible-actions","title":"Possible Actions","text":""},{"location":"datamanager/resources/dm-template/#read","title":"Read","text":"<p>To read a single Data Manager Template Resource, you may perform GET on a <code>ec:dm-template</code> relation.</p> <p>To read the Data Manager Template List Resource, you may perform GET on a <code>ec:dm-templates</code> relation or on the <code>collection</code> relation of a single Data Manager Template resource.</p> <p>In both cases, the success status code is 200 OK.</p>"},{"location":"datamanager/resources/dm-template/#example","title":"Example","text":"<pre><code> {\n        \"templateID\": \"53361701-09a9-4401-a438-73e1a767c45b\",\n        \"name\": \"Ironic App\",\n        \"collection\": {\n            ... postman collection ...\n        },\n        \"dataSchema\": {}\n        \"_links\": {\n          \"ec:dm-template/parent\": {\n            \"href\": \"https://datamanager.entrecode.de/template?templateID=57e0c6eb-0041-41a7-8d27-ebb480ad1c2d\"\n          }\n        }\n      }\n</code></pre>"},{"location":"datamanager/resources/dm-template/#create","title":"Create","text":"<p>To create a new Data Manager Template Resource, you may perform a POST on <code>ec:dm-templates</code> (the list resource). The JSON Schema for creating a new Data Manager Template is https://schema.entrecode.de/schema-data/dm-template-template. </p> <p>The success status code is 201 Created and the response body is the newly created single Data Manager Template resource.</p>"},{"location":"datamanager/resources/dm-template/#edit-delete","title":"Edit / Delete","text":"<p>It is not possible to edit or delete templates.</p>"},{"location":"datamanager/resources/model/","title":"Model","text":""},{"location":"datamanager/resources/model/#single-model","title":"Single Model","text":"<p>Model in a Data Manager. A model describes a resource available in the generated Data Manager API.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/model.</p>"},{"location":"datamanager/resources/model/#properties","title":"Properties","text":"Property Type Format Description Writable created String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the creation of this Model No. Gets written on creation. description String Optional. A detailed description of this model. Yes fields Array[JSON] Field Definition The fields for resources of this model. Yes hasEntries Boolean Indicates if entries exist. No hexColor String 6-digit hex color <code>#rrggbb</code> <code>/^#[A-Fa-f0-9]{6}$/</code> Color identifier for editor. Yes hooks Array[JSON] Hook Definition Hooks to perform when using the API Yes locales Array[String] RFC4646 JSON array with supported locales by this model. Like <code>de-DE</code> or <code>en-US</code>. Yes modelID String Version 4 UUID (RFC 4122) The unique identifier for a model No. Gets generated on creation. modified String ISO-8601 formatted UTC Date String (YYYY-MM-DDTHH:mm:ss.sssZ, RFC 3339) Timestamp of the last modification of this Model No. Gets written on modification. policies Array[JSON] Policy Definition Permission Policies for the API Yes title String a-z A-Z 0-9 _ - Maximum length 256 The title of a model, unique in this data manager. Should be singular and lower case. Yes titleField String One of the fields The field which should be used as title in editor frontend. Default: <code>id</code> Yes deprecated: rights JSON Object with boolean keys: get, put, postPublic, postPrivate, delete JSON object of available rights on this model Yes"},{"location":"datamanager/resources/model/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Model The resource itself GET, PUT collection Model List List of all available Models GET, POST ec:model/purge - Attempts to delete all entries of the model, see Purge DELETE ec:model/entryHistory\u00a0 Entry Event List returns a list of events that happened to entries of this model. GET"},{"location":"datamanager/resources/model/#list","title":"List","text":"<p>The Model List Resource is a Generic List Resource with embedded Model Resources.</p>"},{"location":"datamanager/resources/model/#possible-actions","title":"Possible Actions","text":""},{"location":"datamanager/resources/model/#read","title":"Read","text":"<p>To read a single Model Resource, clients may perform GET on a <code>ec:model</code> relation.</p> <p>To read the Modle List Resource, clients may perform GET on a <code>ec:models</code> relation or on the <code>collection</code> relation of a single Model resource.</p> <p>In both cases, the success status code is 200 OK.</p> <p>Example:</p> <pre><code>{\n    \"modelID\": \"886aa7bb-a8f5-4164-8123-ae0e35bb9b35\",\n    \"title\": \"recipe\",\n    \"titleField\": \"name\",\n    \"locales\": [\n        \"en-US\",\n        \"de-DE\"\n    ],\n    \"fields\": [\n        {\n            \"title\": \"id\",\n            \"description\": \"\",\n            \"type\": \"id\",\n            \"readOnly\": true,\n            \"required\": true,\n            \"unique\": true,\n            \"localizable\": false,\n            \"mutable\": false,\n            \"validation\": null\n        },\n        {\n            \"title\": \"created\",\n            \"description\": \"\",\n            \"type\": \"datetime\",\n            \"readOnly\": true,\n            \"required\": true,\n            \"unique\": false,\n            \"localizable\": false,\n            \"mutable\": false,\n            \"validation\": null\n        },\n        {\n            \"title\": \"modified\",\n            \"description\": \"\",\n            \"type\": \"datetime\",\n            \"readOnly\": true,\n            \"required\": true,\n            \"unique\": false,\n            \"localizable\": false,\n            \"mutable\": false,\n            \"validation\": null\n        },\n        {\n            \"title\": \"creator\",\n            \"description\": \"\",\n            \"type\": \"entry\",\n            \"readOnly\": true,\n            \"required\": true,\n            \"unique\": false,\n            \"localizable\": false,\n            \"mutable\": false,\n            \"validation\": \"account\"\n        },\n        {\n            \"title\": \"name\",\n            \"description\": \"\",\n            \"type\": \"title\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"unique\": false,\n            \"localizable\": true,\n            \"mutable\": true,\n            \"validation\": \"^[A-Z]\\w*$\"\n        },\n        {\n            \"title\": \"website\",\n            \"description\": \"\",\n            \"type\": \"url\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"unique\": false,\n            \"localizable\": true,\n            \"mutable\": true,\n            \"validation\": null\n        },\n        ...\n    ],\n    \"policies\": [\n        {\n            \"method\": \"get\",\n            \"restrictToFields\": [],\n            \"public\": true,\n            \"roles\": []\n        },\n        {\n            \"method\": \"post\",\n            \"restrictRuleToFields\": [],\n            \"public\": false,\n            \"roles\": [\"14i1ord\"]\n        }\n    ]\n}\n</code></pre>"},{"location":"datamanager/resources/model/#create","title":"Create","text":"<p>To create a new Model, clients may perform a POST on <code>ec:models</code> (the list resource). The JSON Schema for creating a new Model is https://schema.entrecode.de/schema-data/model-template. </p> <p>The success status code is 201 Created and the response body is the newly created single Model resource.</p>"},{"location":"datamanager/resources/model/#edit","title":"Edit","text":"<p>To update an existing Model Resource, clients may perform a PUT on <code>ec:model</code> or <code>self</code> at a single Model Resource. The JSON Schema for editing a Model is https://schema.entrecode.de/schema-data/model-template.  All fields are optional. Some changes cannot be done when there are already entries (generated API resources).</p> <p>The success status code is 200 OK and the response body is the updated single Model resource.</p>"},{"location":"datamanager/resources/model/#delete","title":"Delete","text":"<p>To delete a Model including all its data, clients may perform a DELETE on <code>ec:model</code> or <code>self</code> at a single Model Resource.</p> <p>If the model is \u201cmandatory\u201d or still has entries, it cannot be deleted \u2013 delete the entries in the generated API first.</p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"datamanager/resources/model/#purge","title":"Purge","text":"<p>To delete all entries of a Model, clients may perform a DELETE on <code>ec:model/purge</code> at a single Model Resource. Note that entries which are referenced as required somewhere else will not be deleted. Until now you need to find the referencing entry manually. This is subject to change.</p> <p>The success status code is 204 No Content or 202 Accepted with an empty response body.</p>"},{"location":"datamanager/resources/model/#entry-event-list","title":"Entry Event List","text":"<p>If the <code>ec:model/entryHistory</code> relation is output, the event history of this model's entries is available (otherwise the Data Manager History Service is not configured or currently offline). </p> <p>Following the link relation using GET returns an array of events (can be empty). To specify the number of events, you may set the <code>_size</code> property in the templated link. There are no more filter options available. The result JSON format is not fixed yet and may be subject to change.</p> <p>Note that the size of events can be quite big. It is not recommended to request more than 10-20 events! </p> <p>The permission <code>dm:&lt;dataManagerID&gt;:model:entries:&lt;modelID&gt;:history</code> is required to access entry events.</p> <p>By default, the output media type is <code>application/json</code>.  To support live updating, server-sent events are also supported. Clients may consume the event stream using the EventSource API built into browsers. The URI is the same (sending an <code>Accept: text/event-stream</code> header triggers output of the stream instead of the JSON entry list). Note that while some EventSource Client libraries support additional HTTP headers, the default API does not. Because of that, it is required to send the authentication token via query string parameter <code>_token</code> as described in those clients.</p>"},{"location":"datamanager/resources/tag/","title":"Tag","text":""},{"location":"datamanager/resources/tag/#single-tag","title":"Single Tag","text":"<p>Tag in a Data Manager for Assets.</p> <p>The JSON Schema is https://schema.entrecode.de/schema-data/tag</p>"},{"location":"datamanager/resources/tag/#properties","title":"Properties","text":"Property Type Format Description Writable tag String a-z 0-9 \u00e4\u00fc\u00f6\u00df _- The tag name. Yes count Number positive Integer Number of occurences of this tag in the data manager. No"},{"location":"datamanager/resources/tag/#relations","title":"Relations","text":"Relation Name Target Resource Description Possible Methods self Tag The resource itself GET, PUT, DELETE collection Tag List List of all available Tags GET"},{"location":"datamanager/resources/tag/#list","title":"List","text":"<p>The Tag List Resource is a Generic List Resource with embedded Tag Resources.</p>"},{"location":"datamanager/resources/tag/#possible-actions","title":"Possible Actions","text":""},{"location":"datamanager/resources/tag/#read","title":"Read","text":"<p>To read a single Tag Resource, clients may perform GET on a <code>ec:tag</code> relation.</p> <p>To read the Tag List Resource, clients may perform GET on a <code>ec:tags</code> relation or on the <code>collection</code> relation of a single Tag resource.</p> <p>In both cases, the success status code is 200 OK.</p> <p>Example:</p> <pre><code>{\n    \"tag\": \"tagName\",\n    \"count\": 3,\n    ...\n}\n</code></pre>"},{"location":"datamanager/resources/tag/#create","title":"Create","text":"<p>Tags get created automatically once they get used in an Asset.</p>"},{"location":"datamanager/resources/tag/#edit","title":"Edit","text":"<p>To update an existing Tag Resource, clients may perform a PUT on <code>ec:tag</code> or <code>self</code> at a single Tag Resource.  Only <code>tag</code> can be set.</p> <p>The success status code is 200 OK and the response body is the updated single Tag resource.</p>"},{"location":"datamanager/resources/tag/#delete","title":"Delete","text":"<p>To delete a Tag, clients may perform a DELETE on <code>ec:tag</code> or <code>self</code> at a single Tag Resource. This also removes the tag from all assets.</p> <p>The success status code is 204 No Content with an empty response body.</p>"},{"location":"sdk/datamanager-java/","title":"Data Manager Java SDK","text":""},{"location":"sdk/datamanager-java/#deprecated","title":"DEPRECATED","text":"<p>This Module is deprecated. Don't use it anymore! There won't be any bugfixes or improvements.</p>"},{"location":"sdk/datamanager-java/#ecdatamanager-java-sdk","title":"ec.datamanager-java-sdk","text":"<p>Java SDK for ec.datamanager. By entrecode.</p> <p>Simply use the generated APIs of the ec.datamanager with Java.</p> <p>The SDK is fully asyncron.</p>"},{"location":"sdk/datamanager-java/#setup","title":"Setup","text":"<p>Get via Maven:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;de.entrecode&lt;/groupId&gt;\n  &lt;artifactId&gt;datamanager_java_sdk&lt;/artifactId&gt;\n  &lt;version&gt;0.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>or with Gradle:</p> <pre><code>compile 'de.entrecode:datamanager_java_sdk:0.4.0'\n</code></pre>"},{"location":"sdk/datamanager-java/#usage","title":"Usage","text":"<p>See the running example in <code>srv/main/java/de.entrecode.datamanager_java_sdk.example</code>.</p>"},{"location":"sdk/datamanager-java/#initialization","title":"Initialization","text":"<p>You need to connect to your Data Manager API using the <code>DataManager(\u2026)</code> constructors.</p> <p>Initializing dataManager with existing token:</p> <pre><code>DataManager dm = new DataManager(\n  new URL(\"https://datamanager.entrecode.de/api/beefbeef\"),\n  UUID.fromString(\"8c3b7b55-531f-4a03-b584-09fdef59cb0c\")\n);\n</code></pre> <p>Alternative:</p> <pre><code>DataManager dm = new DataManager(\n  \"beefbeef\",\n  UUID.fromString(\"8c3b7b55-531f-4a03-b584-09fdef59cb0c\")\n);\n</code></pre> <p>Initializing without token (will be generated):</p> <pre><code>DataManager dm;\nDataManager.create(\n  new URL(\"https://datamanager.entrecode.de/api/beefbeef\",\n  new ECResponseListener&lt;DataManager&gt;{\n    @Override\n    public void onResponse(DataManager dataManager){\n        dm = dataManager;\n    }\n  }, new ECErrorListener{\n    @Override\n    public void onError(ECError error){\n        System.out.println(error.stringify());\n    }\n  });\n</code></pre> <p>Alternative without token:</p> <pre><code>DataManager dm;\nDataManager.create(\n  \"beefbeef\",\n  new ECResponseListener&lt;DataManager&gt;{\n    @Override\n    public void onResponse(DataManager dataManager){\n        dm = dataManager;\n    }\n  }, new ECErrorListener{\n    @Override\n    public void onError(ECError error){\n        System.out.println(error.stringify());\n    }\n  });\n</code></pre> <p>Initializing with read-only mode:</p> <pre><code>DataManager dm = new DataManager(\"beefbeef\", true); // throws ECMalformedDataManagerIDException\n\n//OR\n\nDataManager dm2 = new DataManager(\n  new URL(\"https://datamanager.entrecode.de/api/beefbeef\",\n  true);\n</code></pre>"},{"location":"sdk/datamanager-java/#get-entries","title":"Get Entries","text":"<pre><code>dm.model(\"myModel\").entries()\n    .levels(2)\n    .onResponse(new ECResponseListener&lt;List&lt;ECEntry&gt;&gt;{\n        @Override\n        public void onResponse(List&lt;ECEntry&gt; entries){\n            // TODO something       \n        }\n    })\n    .onError(new ECErrorListener{\n        @Override\n        public void onError(ECError error){\n            // TODO something\n        }\n    })\n    .filter(new HashMap&lt;String, String&gt;(){{\n        put(\"propertyA~\", \"LikeThat\");\n        put(\"propertyB\", \"ExactlyThat\");\n        put(\"propertyCFrom\", \"FromThat\");\n        put(\"propertyCTo\", \"ToThat\");\n    }})\n    .go();\n</code></pre>"},{"location":"sdk/datamanager-java/#get-entry","title":"Get Entry","text":"<pre><code>dm.model(\"myModel\").entry(\"alwoigei\")\n    .levels(2)\n    .onResponse(new ECResponseListener&lt;ECEntry&gt;{\n        @Override\n        public void onResponse(ECEntry entry){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#create-entry","title":"Create Entry","text":"<pre><code>ECEntry ecEntry = new ECEntry(\u2026);\n\u2026\ndm.model(\"myModel\").createEntry(ecEntry)\n    .onResponse(new ECResponseListener&lt;ECEntry&gt;{\n        @Override\n        public void onResponse(ECEntry entry){\n            // TODO something\n        }\n    }).onError(new ECResponseListener&lt;ECEntry&gt;{\n        @Override\n        public void onResponse(ECEntry entry){\n            // TODO something       \n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#delete-entry","title":"Delete Entry","text":"<pre><code>ECEntry ecEntry;\n\u2026\necEntry.delete()\n    .onResponse(new ECResponseListener{\n        @Override\n        public void onResponse(){\n            // TODO something\n        }\n    }\n    .onError(new ECErrorListener{\n        @Override\n        public void onError(ECError error){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#update-entry","title":"Update Entry","text":"<pre><code>ECEntry ecEntry;\n\u2026\necEntry.save()\n    .onResponse(new ECResponseListener&lt;ECEntry&gt;{\n        @Override\n        public void onResponse(ECEntry entry){\n            // TODO something\n        }\n    })\n    .onError(new ECErrorListener{\n        @Override\n        public void onError(){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#model-list","title":"Model List","text":"<pre><code>dm.modelList()\n    .onResponse(new ECResponseListener&lt;List&lt;Model&gt;&gt;{\n        @Override\n        public void onResponse(List&lt;Model&gt; models){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#get-json-schema","title":"Get JSON Schema","text":"<pre><code>dm.model(\"myModel\").getSchema()\n    .forMethod(\"PUT\")\n    .onResponse(new ECResponseListener&lt;JsonObject&gt;{\n        @Override\n        public void onResponse(JsonObject schema){\n            // TODO something\n        }\n    })\n    .onError(new ECErrorListener{\n        @Override\n        public void onError(){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#user-managerment","title":"User Managerment","text":"<pre><code>dm.register()\u2026 // is shorthand for\ndm.model(\"user\").createEntry(new ECEntry())\n    .onResponse(new ECResponseListener&lt;UUID&gt;{\n        @Override\n        public void onResponse(ECEntry user){\n            // TODO save token\n            saveSomwhere(user.getProperty(\"temporaryToken\"));\n        }\n    })\n    .onError(new ECErrorListener{\n        @Override\n        public void onError(){\n            // TODO something\n        }\n    }).go();\n</code></pre> <p>Full example of updating a user entry:</p> <pre><code>ECErrorListener ecel = new ECErrorListener{\n    @Override\n    public void onError(ECError error){\n        // TODO something\n    }\n}\ndm.user(\"lsadklja\")\u2026 // is shorthand for\ndm.model(\"user\").entry(\"lsadklja\")\n    .onResponse(new ECResponseListener&lt;ECEntry&gt;{\n        @Override\n        public void onResponse(ECEntry user){\n            user.set(\"name\", \"Andr\u00e9 Code\");\n            user.save()\n                .onResponse(new ECREsponseListener&lt;ECEntry&gt;{\n                    @Override\n                    public void onResponse(ECEntry user){\n                        // TODO something\n                    }\n                }).onError(ecel).go();\n        }\n    })\n    .onError(ecel).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#asset-file-helper","title":"Asset File Helper","text":"<p>The SDK can help you getting asset files, and image assets in the right sizes.</p> <pre><code>dm.getFileURL(\"46092f02-7441-4759-b6ff-8f3831d3da4b\")\n    .locale(\"en-US\")\n    .onResponse(new ECResponseListener&lt;String&gt;{\n        @Override\n        public void onResponse(String url){\n            // TODO something\n        }\n    }).go();\n</code></pre> <p>For image Assets, the following helper is available:</p> <pre><code>dm.getImageURL(\"46092f02-7441-4759-b6ff-8f3831d3da4b\")\n    .size(500)\n    .onResponse(new ECResponseListener&lt;String&gt;{\n        @Override\n        public void onResponse(String url){\n            // TODO something\n        }\n    }).go();\n\n// OR\n\ndm.getFileURL(\"46092f02-7441-4759-b6ff-8f3831d3da4b\")\n    .image()\n    .size(500)\n    .onResponse(new ECResponseListener&lt;String&gt;{\n        @Override\n        public void onResponse(String url){\n            // TODO something\n        }\n    }).go();\n</code></pre> <p><code>size(\u2026)</code> expects a pixel value. The largest edge of the returned image will be at least this value pixels in size, if available.</p> <p>You can also request a thumbnail:</p> <pre><code>dm.getImageThumbURL(\"46092f02-7441-4759-b6ff-8f3831d3da4b\")\n    .size(100)\n    .onResponse(new ECResponseListener&lt;String&gt;{\n        @Override\n        public void onResponse(String url){\n            // TODO something\n        }\n    }).go();\n\n// OR\n\ndm.getImageURL(\"46092f02-7441-4759-b6ff-8f3831d3da4b\")\n    .size(500)\n    .crop()\n    .onResponse(new ECResponseListener&lt;String&gt;{\n        @Override\n        public void onResponse(String url){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#get-assets","title":"Get Assets","text":"<pre><code>dm.assets()\n    .onResponse(new ECResponseListener&lt;List&lt;ECAssets&gt;&gt;{\n        @Override\n        public void onResponse(List&lt;ECAssets&gt; assets){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#get-asset","title":"Get Asset","text":"<pre><code>dm.asset(\"46092f02-7441-4759-b6ff-8f3831d3da4b\")\u2026 // is shorthand for\ndm.assets().filter(new HashMap&lt;String, String&gt;(){{\n        put(\"assetID\", \"46092f02-7441-4759-b6ff-8f3831d3da4b\");\n    }})\n    .onResponse(new ECResponseListener&lt;ECAsset&gt;{\n        @Override\n        public void onResponse(ECAsset asset){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#delete-asset","title":"Delete Asset","text":"<pre><code>ECAsset asset;\n\u2026\nasset.delete()\n    .onResponse(new ECResponseListener{\n        @Override\n        public void onResponse(){\n            // TODO something\n        }\n    }\n    .onError(new ECErrorListener{\n        @Override\n        public void onError(ECError error){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#get-tags","title":"Get Tags","text":"<pre><code>dm.tags()\n    .onResponse(new ECResponseListener&lt;List&lt;ECTag&gt;&gt;{\n        @Override\n        public void onResponse(List&lt;ECTag&gt; tags){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#get-tag","title":"Get Tag","text":"<pre><code>dm.tag(\"tagname\")\u2026 // is shorthand for\ndm.tag().filter(new HashMap&lt;String, String&gt;(){{\n        put(\"tag\", \"tagname\");\n    }})\n    .onResponse(new ECResponseListener&lt;ECTag&gt;{\n        @Override\n        public void onResponse(ECTag tag){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#edit-tag","title":"Edit Tag","text":"<pre><code>ECTag tag = \u2026\n\u2026\ntag.save()\n    .onResponse(new ECResponseListener&lt;ECTag&gt;{\n        @Override\n        public void onResponse(ECTag tag){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#delete-tag","title":"Delete Tag","text":"<pre><code>ECTag tag;\n\u2026\ntag.delete()\n    .onResponse(new ECResponseListener{\n        @Override\n        public void onResponse(){\n            // TODO something\n        }\n    }\n    .onError(new ECErrorListener{\n        @Override\n        public void onError(ECError error){\n            // TODO something\n        }\n    }).go();\n</code></pre>"},{"location":"sdk/datamanager-java/#documentation","title":"Documentation","text":"<p>see JavaDoc.</p>"},{"location":"sdk/datamanager-java/#test-coverage","title":"Test &amp; Coverage","text":"<p>Running tests with:</p> <pre><code>./gradlew test\n</code></pre> <p>Running tests with coverage:</p> <pre><code>./gradlew jacocoTestReport\n</code></pre>"},{"location":"sdk/datamanager-java/#changelog","title":"Changelog","text":""},{"location":"sdk/datamanager-java/#042","title":"0.4.2","text":"<ul> <li>support for nested entries with <code>level(int)</code></li> </ul>"},{"location":"sdk/datamanager-java/#041","title":"0.4.1","text":"<ul> <li>added tag api doc</li> </ul>"},{"location":"sdk/datamanager-java/#040","title":"0.4.0","text":"<ul> <li>use updated single resource responses in Public API.</li> <li>added tag api.</li> </ul>"},{"location":"sdk/datamanager-java/#023","title":"0.2.3","text":"<ul> <li>SDK will use new thumbnail api for image assets</li> </ul>"},{"location":"sdk/datamanager-java/#022","title":"0.2.2","text":"<ul> <li>added JavaDoc</li> </ul>"},{"location":"sdk/datamanager-java/#021","title":"0.2.1","text":"<ul> <li>initial public release</li> </ul>"},{"location":"sdk/datamanager-js/","title":"Data Manager JavaScript SDK","text":""},{"location":"sdk/datamanager-js/#deprecated","title":"DEPRECATED","text":"<p>This Module is deprecated. There won't be any bugfixes or improvements. Use ec.sdk instead.</p> <p> </p>"},{"location":"sdk/datamanager-js/#ecdatamanagerjs","title":"ec.datamanager.js","text":"<p>JavaScript SDK for ec.datamanager. By entrecode.</p> <p>Simply use the generated APIs of the ec.datamanager with JavaScript. Supports usage in frontend (web) and backend (Node.js).</p> <p>The SDK is fully promise-based. Since version <code>0.6.0</code> the SDK is fully HAL based and uses traverson, traverson-hal, and halfred.</p>"},{"location":"sdk/datamanager-js/#contents","title":"Contents","text":"<ul> <li>Installation</li> <li>Usage</li> <li>Errors</li> <li>Documentation</li> <li>Tests and Coverage</li> <li>Build</li> <li>Changelog</li> </ul>"},{"location":"sdk/datamanager-js/#installation","title":"Installation","text":"<p>With npm (for backend or frontend usage):</p> <pre><code>npm install ec.datamanager\n</code></pre> <p>With bower (for frontend usage in the Browser):</p> <pre><code>bower install ec.datamanager\n</code></pre> <p>The bower module only includes the minified build (and no tests etc.).</p>"},{"location":"sdk/datamanager-js/#usage","title":"Usage","text":"<p>Loading the module in node.js:</p> <pre><code>var DataManager = require('ec.datamanager');\n</code></pre> <p>Loading the minified module in the Browser:</p> <pre><code>&lt;script src=\"bower_components/ec.datamanager.js/build/datamanager.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p><code>DataManager</code> is then globally available.</p> <p>(if you did not install using bower, the first part of the path may be different)</p>"},{"location":"sdk/datamanager-js/#initialization","title":"Initialization","text":"<p>You need to connect to your Data Manager API using the <code>DataManager(options)</code> constructor.</p> <p>Initializing dataManager with existing token:</p> <pre><code>var dataManager = new DataManager({\n  url: 'https://datamanager.entrecode.de/api/abcdef',\n  accessToken: '8c3b7b55-531f-4a03-b584-09fdef59cb0c'\n});\n</code></pre> <p>Initialization without token:</p> <pre><code>var dataManager = new DataManager({\n  url: 'https://datamanager.entrecode.de/api/abcdef'\n});\n</code></pre> <p>Alternative:</p> <pre><code>var dataManager = new DataManager({\n  id: 'abcdef12'\n});\n</code></pre> <p>Initialization with <code>clientID</code> for user management:</p> <pre><code>var dataManager = new DataManager({\n  id: 'beefbeef',\n  clientID: 'myAwesomeClient'\n});\n</code></pre> <p>Initialization with <code>errorHandler</code>:</p> <pre><code>var dataManager = new DataManager({\n  id: 'beefbeef',\n  errorHandler: function(error){\n    console.log(error);\n  }\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#datamanager","title":"DataManager","text":""},{"location":"sdk/datamanager-js/#resolve","title":"Resolve","text":"<p>Retrieves information about the connected Data Manager. Like title, id, \u2026</p> <pre><code>dataManager.resolve()\n.then(function(dm) {\n  console.log(dm.metadata.title);\n  // Note: dataManager === dm\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#permission-check","title":"Permission Check","text":"<p>To check if the currently instantiated Data Manager has a specific right you can use <code>can(\u2026)</code>.</p> <pre><code>dataManager.can('myModel:put:title')\n.then(function(ok) {\n  // the SDK is able to perform this action.\n}, errorHandler);\n\ndataManager.can('myModel:delete')\n.then(okHandler)\n.catch(function(err) {\n  console.log(err.message); // permission_denied\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#enable-cache","title":"Enable Cache","text":"<pre><code>dataManager.enableCache('myModel', DataManager.DB_NODEJS)\u2026\n// OR\ndataManager.enableCache({\n  myModel: 3600,\n  'my-model-with-dash': 600000\n}, DataManager.DB_CORDOVA)\n// OR\ndataManager.enableCache([\n  'myModel',\n  'myOtherModel'\n], DataManager.DB_BROWSER, 3600)\n.then(function(models){\n  console.log(models); // Array of LokiJS collections\n  models[0].find({ lokiJS: 'doesThis' });\n}, errorHandler);\n</code></pre> <p>If you use caching, you should not have the fields '$loki' and 'meta' in your Model.</p>"},{"location":"sdk/datamanager-js/#clear-cache","title":"Clear Cache","text":"<pre><code>dataManager.clearCache('myModel')\u2026 // only myModel gets cleared\n// OR\ndataManager.clearCache([           // all in the array\n  'myModel',\n  'myOtherModel'\n]\u2026\n// OR\ndataManager.clearCache()            // all models\n.then(function(){\n  // cache is cleared and disabled\n})\n.catch(errorHandler)\n</code></pre>"},{"location":"sdk/datamanager-js/#model","title":"Model","text":""},{"location":"sdk/datamanager-js/#model-list","title":"Model List","text":"<p>Retrieves all models of a Data Manager:</p> <pre><code>dataManager.modelList()\n.then(function(modelList) {\n  console.log(modelList) // object with models, titles are property names.\n  console.log(modelList.myModel.metadata.titleField) // the title field of the model.\n  modelList.myModel.entries()\u2026\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#model-resolve","title":"Model Resolve","text":"<p>When creating a model directly it will not have the metadata ready. You can retrieve the metadata with <code>resolve()</code>.</p> <pre><code>dataManager.model('myModel').resolve()\n.then(function(model){\n  console.log(model.metadata.titleField);\n  model.entries()\u2026\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#model-enable-cache","title":"Model enable cache","text":"<pre><code>dataManager.model('myModel').enableCache(DataManager.DB_NODEJS, 3600)\n.then(function(lokiJSCollection){\n  lokiJSCollection.find({ lokiJS: 'doesThis' });\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#model-clear-cache","title":"Model clear cache","text":"<pre><code>dataManager.model('myModel').clearCache()\n.then(function() {\n  // cache cleared and disabled\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-json-schema","title":"Get JSON Schema","text":"<p>JSON schemas exist for models. To get one call <code>getSchema()</code>.</p> <pre><code>dataManager.model('myModel').getSchema() // will load 'GET' schema\n.then(function(myModelSchema) {\n  console.log(myModelSchema)\n}, errorHandler);\n\n// For PUT or POST schema:\ndataManager.model('myModel').getSchema('put'|'post')\n.then(\u2026);\n</code></pre>"},{"location":"sdk/datamanager-js/#entries","title":"Entries","text":""},{"location":"sdk/datamanager-js/#get-entrylist","title":"Get EntryList","text":"<p><code>size: 0</code> will return ALL entries</p> <pre><code>dataManager.model('myModel').entryList({size: 100, sort: ['property', '-date']})\n.then(function(res) {\n  console.log(res.entries); // success! array of Entries\n  console.log(res.count); // no. of received entries\n  console.log(res.total); // total no. of available entries (accesss with pagination)\n  if(res.hasOwnProperty('next'){\n    res.next().then(\u2026);\n  }\n  if(res.hasOwnProperty('prev'){\n    res.prev().then(\u2026);\n  }\n  if(res.hasOwnProperty('first'){\n    res.first().then(\u2026);\n  }\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-entrylist-with-cachetype","title":"Get EntryList with cacheType","text":"<p>also works on <code>entry(\u2026)</code> and <code>entries(\u2026)</code></p> <pre><code>dataManager.model('myModel').entryList({ cacheType: 'default' })\n.then(function(list){\n  console.log(list.entries); // refreshed data when cache was stale, cached data otherwise\n}, errorHandler);\n\u2026\ndataManager.model('myModel').entryList()\n.then(function(list){\n  console.log(list.entries); // same as cacheType: 'default'\n}, errorHandler);\n\u2026\ndataManager.model('myModel').entryList({ cacheType: 'refresh' })\n.then(function(list){\n  console.log(list.entries); // contains refreshed entries\n}, errorHandler);\n\u2026\n// the following type only works on entryList, is handled like default on entry/entries\ndataManager.model('myModel').entryList({ cacheType: 'stale' })\n.then(function(list){\n  console.log(list.entries); // contains cache data, even stale\n  list.refreshedData().then(function(list){\n    console.log(list.entries); // contains refreshed data\n  }, errorHandler);\n}, errorHandler);\n\n</code></pre>"},{"location":"sdk/datamanager-js/#get-entries","title":"Get Entries","text":"<p><code>size: 0</code> will return ALL entries</p> <pre><code>dataManager.model('myModel').entries({size: 0, sort: ['property' , '-date']})\n.then(function(entries) {\n  console.log(entries); // success! array of Entries\n  var clonedEntries = DataManager.cloneEntries(entries); // clones entry objects.\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-entry","title":"Get Entry","text":"<pre><code>dataManager.model('myModel').entry('my7fmeXh')\n.then(function(entry) {\n  console.log(entry); // success! an Entry\n}, errorHandler);\n\n// OR for nested entries\n\ndataManager.model('myModel').entry('my7fmeXh', 2}) // since 0.6.0 no longer object\n.then(function(entry) {\n  console.log(entry); // success! an Entry\n  var clonedEntry = entry.clone(); // clones entry object.\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-nested-entry","title":"Get nested Entry","text":"<p>Just like get entry but nested entries will be resolved as proper datamanager SDK objects.</p> <pre><code>dataManager.model('myModel').nestedEntry('my7fmeXh', 2}) // since 0.6.0 no longer object\n.then(function(entry) {\n  console.log(entry); // success! an Entry\n  entry.value.nestedEntry.delete().then(console.log)); // this will work now.\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#create-entry","title":"Create Entry","text":"<pre><code>dataManager.model('myModel').createEntry({\n  some: 'property',\n  other: {\n    proper: 'T\\'s'\n  }\n})\n.then(function(entry){\n  console.log(entry.value._id); // the created entry\n}, errorHanlder);\n</code></pre>"},{"location":"sdk/datamanager-js/#delete-entry","title":"Delete Entry","text":"<p>The <code>delete()</code> function is an instance method of <code>Entry</code>. Just return <code>entry.delete()</code> in your entry promise handler:</p> <pre><code>dataManager.model('myModel').entry('f328af3')\n.then(function(entry) {\n  return entry.delete();\n})\n.then(function() {\n  console.log('deleted'); // success!\n})\n.catch(errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#update-entry","title":"Update Entry","text":"<p>Works similar to <code>delete()</code>:</p> <pre><code>dataManager.model('myModel').entry('f328af3')\n.then(function(entry) {\n  // first set the new values\n  entry.value.key1 = 'new value for key1';\n  entry.value.key2 = 2;\n  // then save\n  return entry.save();\n})\n.then(function(savedEntry){\n  console.log(entry.value.key1); // prints 'new value for key1'\n})\n.catch(errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-title-of-entry","title":"Get Title of Entry","text":"<p>Returns the title of any nested entry in the entry.</p> <p>Example:</p> <pre><code>dataManager.model('myModel).entry('f328af3', '2')\n.then(function(entry) {\n  console.log(entry.getTitle('child')); // prints the title of the child 'child'\n  // is String for entry\n  // is Array of String for entries\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-model-name-of-entry","title":"Get Model Name of Entry","text":"<p>Returns the model title of any nested entry in the entry.</p> <p>Example:</p> <pre><code>dataManager.model('myModel).entry('f328af3', '2')\n.then(function(entry) {\n  console.log(entry.getModelTitle('child')); // prints the model title of the child 'child'\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#users-in-the-sdk","title":"Users in the SDK","text":""},{"location":"sdk/datamanager-js/#register-anonymous-user","title":"Register Anonymous User.","text":"<pre><code>// register anonymous user.\ndataManager.registerAnonymous()\n.then(function(user) {\n  // token was already added to dataManager instance.\n  console.log(user.value.jwt); // token of the user. please save for later.\n  console.log(user.value.accountID); // acocuntID of the user\n  \u2026\n  dataManager.model('myModel')\u2026 // this will be using the logged in anonymous user.\n  \u2026\n  user.logout()\u2026 // this will clear the accessToken and reset the sdk instance.\n  user.isAnonymous(); // this will be true for anonymous users. false otherwise.\n  user.isAnon(); // this will be true for anonymous users. false otherwise.\n}, errorHandler);\n</code></pre> <p>The <code>accessToken</code> is a property of the DataManager instance:</p> <pre><code>dataManager.accessToken; // the currently used token for user authentication\n</code></pre>"},{"location":"sdk/datamanager-js/#logout-aka-clear-accesstoken-and-reset-sdk","title":"Logout aka. clear accessToken and reset sdk.","text":"<pre><code>\u2026\n// dataManager has a accessToken.\ndataManager.logout();\n// accessToken has been cleared and internal API connection was reset.\n\u2026\n</code></pre>"},{"location":"sdk/datamanager-js/#email-available","title":"Email Available","text":"<p>You can check for email availability before you regiser a user:</p> <pre><code>dataManager.emailAvailable('some@mail.com').then(function(available){\n  if(available){\n    console.log('The email is available');\n  } else {\n    console.log('The email is NOT available');\n  }\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-authorizaton-links","title":"Get Authorizaton Links","text":"<p>In order to receive prefilled urls for all other account management relations you can use <code>getAuthLink()</code>.</p> <pre><code>dataManager.getAuthLink('anonymous', {clientID: 'myAwesomeClientID'})\n.then(function(url){\n  request.post(url).end(function(err, res){ // your own post request to register a anonymous user.\n    \u2026\n    // token will not be set in datamanager. but can be manually:\n    dataManager.accessToken = res.body.jwt;\n  });\n\n}, errorHandler);\n</code></pre> <p>This function provides you with all links found in the root API response with the relation <code>&lt;dataManagerShortID&gt;:_auth/&lt;linkName&gt;</code>. Most of them require <code>clientID</code> either set in the DataManager instance or directly as shown above. Others require additional properties (e.g. <code>password-reset</code>: requires <code>clientID</code> and <code>email</code>).</p> <p>Applicable link names are:</p> <ul> <li><code>anonymous</code></li> <li><code>signup</code></li> <li><code>login</code></li> <li><code>password-reset</code></li> <li><code>email-available</code></li> <li><code>public-key.pem</code></li> </ul> <p>Additional documentation for user management in Data Manager APIs can be found in the Data Manager documentation itself.</p>"},{"location":"sdk/datamanager-js/#get-account","title":"Get Account","text":"<p>Get information about the logged in account.</p> <pre><code>dataManager.account()\n.then(function(account) {\n  console.log(account.accountID);\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#asset-file-helper","title":"Asset File Helper","text":"<p>The SDK can help you getting asset files, and image assets in the right sizes. All file Helper can receive a <code>locale</code> property as last parameter if you want to request a specific locale (not the choosen one from Data Manager).</p>"},{"location":"sdk/datamanager-js/#note-on-static-helper","title":"Note On Static Helper","text":"<p>The following functions are also provided as static functions in <code>DataManager</code>. E.g. you can call <code>DataManager.getFileUrl(assetID).then(\u2026);</code> without connecting to a DataManager. This only works for assets in <code>https://datamanager.entrecode.de</code> DataManagers (not in Staging).</p>"},{"location":"sdk/datamanager-js/#file-helper","title":"File Helper","text":"<pre><code>dataManager.getFileUrl('46092f02-7441-4759-b6ff-8f3831d3da4b')\n.then(function(url) {\n  console.log(url)\n), errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#image-helper","title":"Image Helper","text":"<pre><code>dataManager.getImageUrl('46092f02-7441-4759-b6ff-8f3831d3da4b', 500)\n.then(function(url) {\n  console.log(url)\n), errorHandler);\n</code></pre> <p><code>getImageURL</code> expects a pixel value. The largest edge of the returned image will be at least this value pixels in size, if available.</p>"},{"location":"sdk/datamanager-js/#thumbnail-helper","title":"Thumbnail Helper","text":"<pre><code>dataManager.getImageThumbUrl('46092f02-7441-4759-b6ff-8f3831d3da4b', 100)\n.then(function(url) {\n    console.log(url)\n), errorHandler);\n</code></pre> <p>The returned image will be a square-cropped variant with (in this example) at least 100 pixels (pixel value can be set as with <code>getImageURL</code>). Available sizes are 50, 100, 200 and 400 px. Other values will be mapped to next bigger one.</p>"},{"location":"sdk/datamanager-js/#assets","title":"Assets","text":""},{"location":"sdk/datamanager-js/#get-assetlist","title":"Get AssetList","text":"<pre><code>dataManager.assetList()\n.then(function(res) {\n  console.log(res.assets); // array with assets\n  console.log(res.count);\n  console.log(res.total);\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-assets","title":"Get Assets","text":"<pre><code>dataManager.assets()\n.then(function(assets) {\n  console.log(assets); // array with assets\n  var clonedAssets = DataManager.cloneAssets(assets); // clones assets objects.\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-asset","title":"Get Asset","text":"<pre><code>dataManager.asset('46092f02-7441-4759-b6ff-8f3831d3da4b')\n.then(function(asset) {\n  console.log(asset); // the Asset\n  var clonedAsset = DataManager.cloneAsset(asset); // clones asset objects.\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#create-assets","title":"Create Asset(s)","text":"<pre><code>dataManager.createAsset(formData)\n.then(function(assets){\n  console.log(assets); // array with Get Asset Promises\n  return assets[0]; // this is a Promise!\n})\n.then(function(asset){\n  console.log(asset); // the created Asset.\n})\n.catch(errorHandler);\n</code></pre> <p>For node.js acceptable inputs are:</p> <ul> <li>A path string to a local file (<code>path/to/file</code>)</li> <li>An array of path strings (<code>['path/to/file1', 'path/to/file2']</code>)</li> </ul> <p>For browsers acceptable inputs are:</p> <ul> <li> <p>FormData</p> <p>Example: </p> <p>```js $('form').submit(function (e) {   e.preventDefault();   var data;   data = new FormData();   data.append('file', $('#file')[0].files[0]);</p> <p>var dataManager = new DataManager({     id: 'c024f209'   });   dataManager.register();   dataManager.createAsset(data).then(function(assets){     return assets[0];   }).then(function(asset){     console.log(asset); // the created Asset.   })   .catch(function(err){     console.log(err);   });</p> <p>e.preventDefault(); }); ```</p> </li> </ul>"},{"location":"sdk/datamanager-js/#edit-asset","title":"Edit Asset","text":"<pre><code>dataManager.asset('46092f02-7441-4759-b6ff-8f3831d3da4b')\n.then(function(asset){\n  asset.value.title = 'new title';\n  return asset.save();\n})\n.then(function(savedAsset){\n  console.log('success!'); // successfully saved asset\n})\n.catch(errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#delete-asset","title":"Delete Asset","text":"<pre><code>dataManager.asset('46092f02-7441-4759-b6ff-8f3831d3da4b')\n.then(function(asset){\n  return asset.delete();\n})\n.then(function(){\n  console.log('success!'); // successfully deleted asset\n})\n.catch(errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#asset-file-helper_1","title":"Asset File Helper","text":"<pre><code>var url = asset.getFileUrl(); // original file\n</code></pre>"},{"location":"sdk/datamanager-js/#asset-image-helper","title":"Asset Image Helper","text":"<pre><code>var url = asset.getImageUrl(500) // size 500 image files\n</code></pre> <p><code>getImageUrl</code> expects a pixel value. The largest edge of the returned image will be at least this value pixels in size, if available.</p>"},{"location":"sdk/datamanager-js/#asset-thumbnail-helper","title":"Asset Thumbnail Helper","text":"<pre><code>var url = asset.getImageThumbUrl(100); // size 100 thumb files\n</code></pre> <p>The returned image will be a square-cropped variant with (in this example) at least 100 pixels (pixel value can be set as with <code>getImageUrl</code>). Available sizes are 50, 100, 200 and 400 px. Other values will be mapped to next bigger one.</p>"},{"location":"sdk/datamanager-js/#tags","title":"Tags","text":""},{"location":"sdk/datamanager-js/#get-taglist","title":"Get TagList","text":"<pre><code>dataManager.tagList()\n.then(function(res){\n  console.log(res.tags); // array of tags\n  console.log(res.count);\n  console.log(res.total);\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-tags","title":"Get Tags","text":"<pre><code>dataManager.tags()\n.then(function(tags){\n  console.log(tags); // array of tags\n  var clonedTags = DataManager.cloneTags(tags); // clones tags objects.\n}, errorHanlder);\n</code></pre>"},{"location":"sdk/datamanager-js/#get-tag","title":"Get Tag","text":"<pre><code>dataManager.tag('tag1')\n.then(function(tag){\n  console.log(tag); // tag\n  var clonedTag = DataManager.cloneTag(tag); // clones tag objects.\n}).catch(function(error){\n  console.log(error); // error getting tag\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#edit-tag","title":"Edit Tag","text":"<pre><code>dataManager.tag('tag1')\n.then(function(tag){\n  tag.value.tag = 'newTag';\n  return tag.save();\n})\n.then(function(savedTag){\n  console.log('success!'); // successfully saved tag\n})\n.catch(errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#delete-tag","title":"Delete Tag","text":"<pre><code>dataManager.tag('tag1')\n.then(function(tag){\n  return tag.delete();\n})\n.then(function(){\n  console.log('success!'); // successfully deleted tag\n})\n.catch(errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#errors","title":"Errors","text":"<ul> <li><code>ec_sdk_no_url_or_id_set</code> You did not specify a id or url in DataManager constructor.</li> <li><code>ec_sdk_invalid_url</code> The url (or url generated from id) was malformed.</li> <li><code>ec_sdk_model_not_found</code> When you tried to <code>model(\u2026).resolve()</code> a model which is not available in the Data Manager.</li> <li><code>ec_sdk_invalid_method_for_schema</code> You specified the wrong method for <code>model(\u2026).getSchema(&lt;method&gt;)</code>. Only <code>get</code>, <code>put</code>, and <code>post</code> are allowed.</li> <li><code>ec_sdk_not_logged_in</code> Your tried to resolve the account info without being logged in.</li> </ul>"},{"location":"sdk/datamanager-js/#documentation","title":"Documentation","text":""},{"location":"sdk/datamanager-js/#class-datamanager","title":"class DataManager","text":""},{"location":"sdk/datamanager-js/#constructor","title":"Constructor","text":"<p><code>new DataManager(options)</code> returns new DataManager Object</p> <p><code>options</code> contains following keys: <code>url</code>, <code>accessToken</code>,<code>id</code>, <code>errorHandler</code> and <code>clientID</code>. All are optional, but either <code>url</code> or <code>id</code> have to be set. Depending on the Data Manager Settings you will not be able to modify entries etc. when no accessToken is spcified.</p> <p>Examples:</p> <pre><code>// initializing dataManager with existing token\nvar dataManager = new DataManager({\n  url: 'https://datamanager.entrecode.de/api/abcdef',\n  accessToken: '8c3b7b55-531f-4a03-b584-09fdef59cb0c'\n});\n\n// Initialization without token\nvar dataManager = new DataManager({\n  url: 'https://datamanager.entrecode.de/api/abcdef'\n  errorHandler: function(error) {\n    handleError(error);\n  }\n});\n\n// Alternative\nvar dataManager = new DataManager({\n  id: 'abcdef',\n  clientID: 'myAwesomeClientID'\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#datamanager-static-methods","title":"DataManager Static Methods","text":""},{"location":"sdk/datamanager-js/#getfileurlassetid-locale","title":"<code>getFileURL(assetID, [locale])</code>","text":"<p>returns a file url. Optionally, a specific <code>locale</code> can be requested. The promise is getting rejected if no file is found.</p>"},{"location":"sdk/datamanager-js/#getimageurlassetid-size-locale","title":"<code>getImageURL(assetID, [size, locale])</code>","text":"<p>returns an image file. <code>size</code> is optional and states the size in pixels the largest edge should have at least.</p> <p>Note that the image may still be smaller if the original image is smaller than <code>size</code>. If <code>size</code> is omitted, the largest size (i.e. the original image) is returned. Optionally, a specific <code>locale</code> can be requested. The promise is getting rejected if no file is found. The following sizes are being returned: 256, 512, 1024, 2048, 4096.</p> <p>Example: The source image has a largest edge of 3000 pixels. <code>getImageURL(id, 1000)</code> will return the 1024px version. <code>getImageURL(id, 4096)</code> will return the original file with 3000 pixels.</p>"},{"location":"sdk/datamanager-js/#getimagethumburlassetid-size-locale","title":"<code>getImageThumbURL(assetID, size[, locale])</code>","text":"<p>returns an image thumbnail (square cropped). <code>size</code> is required and states the size in pixels the thumbnail square edge should have at least.</p> <p>Note that the image may still be smaller if the original image is smaller than <code>size</code>. Optionally, a specific <code>locale</code> can be requested. The promise is getting rejected if no file is found. The following sizes are being returned: 50, 100, 200, 400</p>"},{"location":"sdk/datamanager-js/#cloneentriesentries-cloneassetsassets-clonetagstags","title":"<code>cloneEntries(entries)</code>, <code>cloneAssets(assets)</code>, <code>cloneTags(tags)</code>","text":"<p>returns a cloned copy of <code>entries</code>, <code>assets</code>, or <code>tags</code>.</p>"},{"location":"sdk/datamanager-js/#cloneentryentry-deprecated-cloneassetasset-clonetagtag","title":"<code>cloneEntry(entry)</code> deprecated, <code>cloneAsset(asset)</code>, <code>cloneTag(tag)</code>","text":"<p>returns a cloned copy of the <code>entrie</code>, <code>asset</code>, or <code>tag</code>.</p>"},{"location":"sdk/datamanager-js/#datamanager-instance-methods","title":"DataManager Instance Methods","text":""},{"location":"sdk/datamanager-js/#enablecachestringorarrayofobject-lokijsenv-maxcacheage","title":"<code>enableCache(stringOrArrayofObject[, lokiJsEnv[, maxCacheAge]])</code>","text":"<p>enables caching for the given models. Either one model title (<code>String</code>) or multiple model titles (<code>Array</code>) or multiple model titles(<code>key</code>) with custom maxCacheAge(<code>value</code>) (<code>Object</code>). returns a Promise which resolves to a array of LokiJS collections.</p> <p>If you use caching, you should not have the fields '$loki' and 'meta' in your Model.</p>"},{"location":"sdk/datamanager-js/#clearcachestringorarray","title":"<code>clearCache(stringOrArray)</code>","text":"<p>disables and cleares the cache for the given models. Either one model title (<code>String</code>) or multiple model titles (<code>Array</code>). return a Promise which resovles after successfully clearing cache.</p>"},{"location":"sdk/datamanager-js/#assetidentifier","title":"<code>asset(identifier)</code>","text":"<p>returns an Asset object as Promise. <code>identifier</code> (String) is required.</p>"},{"location":"sdk/datamanager-js/#modelidentifier","title":"<code>model(identifier)</code>","text":"<p>returns a Model object. <code>identifier</code> (String) is required.</p>"},{"location":"sdk/datamanager-js/#modellist","title":"<code>modelList()</code>","text":"<p>returns available Models as Promise.</p>"},{"location":"sdk/datamanager-js/#assets_1","title":"<code>assets()</code>","text":"<p>returns available Assets as Promise.</p>"},{"location":"sdk/datamanager-js/#assetlist","title":"<code>assetList()</code>","text":"<p>returns available Assets as Promise. Promise will resolve a list object containing the properties <code>assets</code>, <code>count</code>, and <code>total</code>.</p>"},{"location":"sdk/datamanager-js/#createassetformdatafilepatharrayoffilepaths","title":"<code>createAsset(formData|filePath|arrayOfFilePaths)</code>","text":"<p>creates a new Asset. Returns an Array of Promsises to retrieve the created Assets.</p>"},{"location":"sdk/datamanager-js/#getfileurlassetid-locale_1","title":"<code>getFileURL(assetID, [locale])</code>","text":"<p>returns a file url. Optionally, a specific <code>locale</code> can be requested. The promise is getting rejected if no file is found.</p>"},{"location":"sdk/datamanager-js/#getimageurlassetid-size-locale_1","title":"<code>getImageURL(assetID, [size, locale])</code>","text":"<p>returns an image file. <code>size</code> is optional and states the size in pixels the largest edge should have at least.</p> <p>Note that the image may still be smaller if the original image is smaller than <code>size</code>. If <code>size</code> is omitted, the largest size (i.e. the original image) is returned. Optionally, a specific <code>locale</code> can be requested. The promise is getting rejected if no file is found. The following sizes are being returned: 256, 512, 1024, 2048, 4096.</p> <p>Example: The source image has a largest edge of 3000 pixels. <code>getImageURL(id, 1000)</code> will return the 1024px version. <code>getImageURL(id, 4096)</code> will return the original file with 3000 pixels.</p>"},{"location":"sdk/datamanager-js/#getimagethumburlassetid-size-locale_1","title":"<code>getImageThumbURL(assetID, size[, locale])</code>","text":"<p>returns an image thumbnail (square cropped). <code>size</code> is required and states the size in pixels the thumbnail square edge should have at least.</p> <p>Note that the image may still be smaller if the original image is smaller than <code>size</code>. Optionally, a specific <code>locale</code> can be requested. The promise is getting rejected if no file is found. The following sizes are being returned: 50, 100, 200, 400</p>"},{"location":"sdk/datamanager-js/#registeranonymous","title":"<code>registerAnonymous()</code>","text":"<p>For creating a new anonymous user account. Returns user object with jwt token and accountID. The token is also assigned to DataManager and used with subsequent requests.</p> <p>Example:</p> <pre><code>dataManager.registerAnonymous()\n.then(function(user) {\n   console.log(user.value.jwt); // token to save and send with next startup\n})\n.catch(function(error) {\n   console.error(error);\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#logout","title":"<code>logout()</code>","text":"<p>Syncronous method for clearing the <code>accessToken</code> of the SDK and resetting the internal API connection.</p>"},{"location":"sdk/datamanager-js/#getauthlinklinkname","title":"<code>getAuthLink(linkName)</code>","text":"<p>returns an auth link as Promise.</p> <p>Please see user guide above for details.</p>"},{"location":"sdk/datamanager-js/#emailavailableemail","title":"<code>emailAvailable(email)</code>","text":"<p>return an email availability check as Promise.</p>"},{"location":"sdk/datamanager-js/#canpermission","title":"<code>can(permission)</code>","text":"<p>Checks if the currently connected Data Manager is able to perform <code>permission</code>. Permission format is something like <code>&lt;model&gt;:&lt;method&gt;:&lt;field&gt;</code>. Additional documentation can be found in generated documentation of the Data Manager.</p>"},{"location":"sdk/datamanager-js/#datamanager-instance-properties","title":"DataManager Instance Properties","text":"<ul> <li><code>accessToken</code> Access Token for user, or <code>null</code>/<code>undefined</code> if not set.</li> <li><code>id</code> ShortID of the connected Data Manager.</li> <li><code>url</code> The url of the connected Data Manager.</li> <li><code>clientID</code> ClientID which will be used to generate authLinks, or <code>null</code>/<code>undefined</code> if not set.</li> <li><code>errorHandler</code> The global errorHandler for all erorrs which can occur.</li> <li><code>DB_NODEJS</code> LokiJS env for node.</li> <li><code>DB_CORDOVA</code> LokiJS env for cordova.</li> <li><code>DB_BROWSER</code> LokiJS env for browsers.</li> </ul>"},{"location":"sdk/datamanager-js/#model-object","title":"Model object","text":""},{"location":"sdk/datamanager-js/#connecting-a-model","title":"Connecting a Model","text":"<pre><code>var myModel = dataManager.model('myModel');\n</code></pre> <p>returns Model Object which is a promise.</p>"},{"location":"sdk/datamanager-js/#model-instance-methods","title":"Model Instance Methods","text":""},{"location":"sdk/datamanager-js/#enablecachelokijsenv-maxcacheage","title":"<code>enableCache([lokiJsEnv [, maxCacheAge])</code>","text":"<p>enables caching for the connected model with <code>maxCacheAge</code> (in ms). Returns a Promise which resolves to a LokiJS collection.</p>"},{"location":"sdk/datamanager-js/#clearcache","title":"<code>clearCache()</code>","text":"<p>disables and cleares the cache for the model. return a Promise which resovles after successfully clearing cache.</p>"},{"location":"sdk/datamanager-js/#entriesoptionsentrylistoptions","title":"<code>entries(options)</code>/<code>entryList(options)</code>","text":"<p>returns JSON Array of Entries (async). The request can be configured using <code>options</code>. Valid keys are:</p> <ul> <li><code>size</code> \u2013 number of entries to get (default: 10)</li> <li><code>page</code> \u2013 which page of entries to get when there are more than <code>size</code> (default: 1)</li> <li><code>sort</code> \u2013 sort by a different than the default property. Syntax: <code>{direction}{property}[,\u2026]</code> where <code>direction</code> defaults to <code>+</code> (ascending order) and can be set to <code>-</code> (descending order) and <code>property</code> is the property to sort after. Can even be multiple properties (Array).</li> <li><code>filter</code> \u2013 for filtering after properties. Always an object with properties as key. The keys can have the following possible values:<ul> <li><code>exact</code>: exact filter. Value is the value to match exactly</li> <li><code>search</code>: search filter. Value is the value to include</li> <li><code>from</code>: Range filter: value is the value to have as lower end (\u2265)</li> <li><code>to</code>: Range filter: value is the value to have as upper end (\u2264) </li> <li><code>any</code>: Multiple-exact-match filter. Value is an Array containing allowed values (OR)</li> <li><code>all</code>: Multiple-exact-match filter. Value is an Array containing required values (AND)</li> </ul> </li> <li><code>cacheType</code> - selected cachedType (default: <code>default</code>)<ul> <li><code>default</code> - refreshes data when stale, cached otherwise</li> <li><code>refresh</code> - refreshes data every time</li> <li><code>stale</code> - resolves promise directly with stale data. add <code>refreshedData</code> (<code>Promise</code>) to result which can be used to refresh the data asyncronously. This only works on <code>entryList</code>.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>// get entries\ndataManager.model('myModel').entries({size: 100, sort: ['property' , '-date'])\n.then(function(entries) {\n   console.log(entries); // success!\n})\n.catch(function(error) {\n   console.error(error); // error getting entries\n});\n</code></pre> <p><code>entries()</code> will return an array of entries. <code>entryList()</code> will return an object with the following structure:</p> <pre><code>{\n  entries: [\n    /* array of entries */\n  ],\n  total: 10,\n  count: 5,\n  next: /* Promise Factory */,\n  prev: /* Promise Factory */,\n  first: /* Promise Factory */\n}\n</code></pre>"},{"location":"sdk/datamanager-js/#entryid-levels","title":"<code>entry(id [, levels])</code>","text":"<p>returns a Entry object as Promise. Levels property can be used to request nested entries.</p>"},{"location":"sdk/datamanager-js/#nestedentryid-levels","title":"<code>nestedEntry(id [, levels])</code>","text":"<p>returns a Entry object as Promise. Levels property can be used to request nested entries. Resolved nested elementes are proper SDK objects with all functions like <code>save()</code> and <code>delete()</code>.</p>"},{"location":"sdk/datamanager-js/#createentryobject","title":"<code>createEntry(object)</code>","text":"<p>create a new entry. Returns the Entry.</p>"},{"location":"sdk/datamanager-js/#deleteentryid","title":"<code>deleteEntry(id)</code>","text":"<p>return a Promise for deleting an entry.</p>"},{"location":"sdk/datamanager-js/#getschemamethod","title":"<code>getSchema([method])</code>","text":"<p>retrieve JSON Schema. <code>method</code> is <code>get</code> by default. Other possible values: <code>put</code>, <code>post</code>.</p>"},{"location":"sdk/datamanager-js/#resolve_1","title":"<code>resolve()</code>","text":"<p>return a resolved model as Promise.</p> <p>Can be used when creating a model object without calling <code>modelList()</code> to resolve model metadata.</p>"},{"location":"sdk/datamanager-js/#model-instance-properties","title":"Model Instance Properties","text":"<ul> <li><code>id</code> The model id</li> <li><code>title</code> The model title. Same as <code>id</code>.</li> <li><code>metadata</code> Contains <code>titleField</code> and other model metadata.</li> </ul>"},{"location":"sdk/datamanager-js/#entry-object","title":"Entry Object","text":""},{"location":"sdk/datamanager-js/#entry-properties","title":"Entry properties","text":"<ul> <li><code>values</code> The properties of the Entry are available at <code>entry.values</code>.</li> </ul>"},{"location":"sdk/datamanager-js/#entry-instance-methods","title":"Entry Instance Methods","text":""},{"location":"sdk/datamanager-js/#save","title":"save()","text":"<p>saves the entry. Promise.</p> <p>Example:</p> <pre><code>// update entry\ndataManager.model('myModel').entry('f328af3')\n.then(function(entry) {\n  entry.values.key1 = 'new value for key1';\n  entry.values.key2 = 2;\n  return entry.save()\n})\n.then(function(savedEntry){\n  console.log(entry.values.key1 = 'new value for key1';\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#delete","title":"delete()","text":"<p>deletes the entry. Promise.</p> <p>Example:</p> <pre><code>// update entry\ndataManager.model('myModel').entry('f328af3')\n.then(function(entry) {\n  return entry.save()\n})\n.then(function(){\n  console.log('deleted');\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#gettitlestring","title":"getTitle(String)","text":"<p>gets the title of any child entry identified by <code>String</code>. Will return <code>String</code> for single types and <code>Array&lt;String&gt;</code> for multiple types.</p> <p>Example:</p> <pre><code>dataManager.model('myModel).entry('f328af3', 2')\n.then(function(entry) {\n  console.log(entry.getTitle('child')); // prints the title of the child 'child'\n  // is String for entry\n  // is Array of String for entries\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#getmodeltitlestring","title":"getModelTitle(String)","text":"<p>gets the model title of any child entry identified by <code>String</code>.</p> <p>Example:</p> <pre><code>dataManager.model('myModel').entry('f328af3', 2')\n.then(function(entry) {\n  console.log(entry.getModelTitle('child')); // prints the model title of the child 'child'\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#clone","title":"clone()","text":"<p>clones an entry.</p> <p>Example:</p> <pre><code>dataManager.model('myModel').entry('f328af3', 2')\n.then(function(entry) {\n  var newEntry = entry.clone();\n\n  assert(newEntry !== entry);\n  assert(newEntry.value._id === entry.value._id);\n  assert(newEntry.value.field1 === entry.value.field1);\n  assert(newEntry.value.field2 === entry.value.field2);\n  // \u2026\n}, errorHandler);\n</code></pre>"},{"location":"sdk/datamanager-js/#asset-object","title":"Asset object","text":""},{"location":"sdk/datamanager-js/#connecting-an-asset","title":"Connecting an Asset","text":"<pre><code>var myAsset = dataManager.asset('8c3b7b55-531f-4a03-b584-09fdef59cb0c');\n</code></pre> <p>returns Asset as a Promise.</p>"},{"location":"sdk/datamanager-js/#asset-properties","title":"Asset properties","text":"<ul> <li><code>value</code> The properties of the Asset are available at <code>asset.value</code>.</li> </ul>"},{"location":"sdk/datamanager-js/#asset-instance-methods","title":"Asset Instance Methods","text":""},{"location":"sdk/datamanager-js/#save_1","title":"save()","text":"<p>saves a changed Asset. Promise.</p> <p>Example:</p> <pre><code>dataManager.asset('8c3b7b55-531f-4a03-b584-09fdef59cb0c')\n.then(function(asset){\n  asset.value.title = 'New Title';\n  return asset.save();\n})\n.then(function(savedAsset){\n  console.log(savedAsset.value.title; // prints 'New Title';\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#delete_1","title":"delete()","text":"<p>deletes the asset. Promise.</p> <p>Example:</p> <pre><code>dataManager.asset('8c3b7b55-531f-4a03-b584-09fdef59cb0c')\n.then(function(asset) {\n  return asset.delete();\n})\n.then(function(){\n  console.log('Deleted');\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#getfileurl","title":"getFileUrl","text":"<p>syncronously returns a file url. Optionally, a specific <code>locale</code> can be requested.</p>"},{"location":"sdk/datamanager-js/#getimageurl","title":"getImageUrl","text":"<p>syncronously returns an image file. <code>size</code> is optional and states the size in pixels the largest edge should have at least.</p> <p>Note that the image may still be smaller if the original image is smaller than <code>size</code>. If <code>size</code> is omitted, the largest size (i.e. the original image) is returned. Optionally, a specific <code>locale</code> can be requested. The following sizes are being returned: 256, 512, 1024, 2048, 4096.</p> <p>Example: The source image has a largest edge of 3000 pixels. <code>getImageURL(id, 1000)</code> will return the 1024px version. <code>getImageURL(id, 4096)</code> will return the original file with 3000 pixels.</p>"},{"location":"sdk/datamanager-js/#getimagethumburl","title":"getImageThumbUrl","text":"<p>syncronously returns an image thumbnail (square cropped). <code>size</code> is required and states the size in pixels the thumbnail square edge should have at least.</p> <p>Note that the image may still be smaller if the original image is smaller than <code>size</code>. Optionally, a specific <code>locale</code> can be requested. The following sizes are being returned: 50, 100, 200, 400</p>"},{"location":"sdk/datamanager-js/#tag-object","title":"Tag Object","text":""},{"location":"sdk/datamanager-js/#connecting-a-tag","title":"Connecting a Tag","text":"<pre><code>var myTag = dataManager.tag('myTag');\n</code></pre> <p>returns Tag as a Promise.</p>"},{"location":"sdk/datamanager-js/#tag-properties","title":"Tag Properties","text":"<ul> <li><code>value</code> The properties of the Tag are available at <code>tag.value</code>. Typically <code>tag</code> and <code>count</code>.</li> </ul>"},{"location":"sdk/datamanager-js/#tag-instance-methods","title":"Tag Instance Methods","text":""},{"location":"sdk/datamanager-js/#save_2","title":"save()","text":"<p>saves a changed Tag. Promise</p> <pre><code>dataManager.tag('myTag')\n.then(function(tag) {\n  tag.value.tag = 'newTagName';\n  return tag.save();\n})\n.then(function(savedTag) {\n  console.log(savedTag.value.tag); // prints 'newTagName'\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#delete_2","title":"delete()","text":"<p>deletes the Tag. Promise.</p> <p>Example:</p> <pre><code>dataManager.tag('myTag')\n.then(function(tag) {\n  return tag.delete();\n})\n.then(function(){\n  console.log('Deleted');\n});\n</code></pre>"},{"location":"sdk/datamanager-js/#tests-and-coverage","title":"Tests and Coverage","text":"<p>Before running tests, you need to <code>npm install</code> the dev dependency modules. For frontend tests <code>phantomjs 2.0</code> has to be installed globally.</p> <p>Running backend Tests with mocha (called with npm):</p> <pre><code>npm test\n</code></pre> <p>Alternative, using grunt:</p> <pre><code>grunt test           # tests backend and frontend\ngrunt test-backend   # only backend\ngrunt test-frontend  # only frontent\n</code></pre> <p>Running backend tests with coverage:</p> <pre><code>grunt coverage\n</code></pre> <p>Running frontend Tests with karma:</p> <pre><code>grunt test-frontend\n</code></pre> <p>The task will run a mocked server at port 54815. Make sure it is available.</p> <p>Installing phantomjs 2.0 with homebrew</p> <pre><code>brew install phantomjs\n</code></pre>"},{"location":"sdk/datamanager-js/#build","title":"Build","text":"<p>Should not be necessary. A new build for frontend usage (minified) can be triggered with</p> <pre><code>grunt build\n</code></pre> <p>(<code>npm install</code> is needed before for installing dev dependency modules)</p>"},{"location":"sdk/ec.dm-cache/","title":"ec.dm-cache","text":"<p>In Node.js projects you can use ec.dm-cache.</p> <p>It is a tandem library to ec.sdk to support powerful caching.  You can use either in-memory or a redis cache to fetch Data Manager Entries really fast. The most powerful feature is automatic invalidation with ec.amqp to connect to the RabbitMQ Message Queue. This way, you get instant cache invalidations upon data changes.</p>"},{"location":"sdk/ec.sdk/","title":"ec.sdk","text":"<p>We provide a JavaScript SDK for usage in frontend as well as backend (Node.js) projects.</p> <p>All information and documentation about it is found in the ec.sdk Documentation.</p>"}]}